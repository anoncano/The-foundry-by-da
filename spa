<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NDIS Invoicing & Shift Logger</title>
    
    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>
    
    <!-- React Libraries -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>
    
    <!-- Babel to transpile JSX in the browser -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>
    
    <!-- PDF Generation Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>

    <!-- Excel/CSV Parsing Library (SheetJS) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>

    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

    <style>
        body { font-family: 'Inter', sans-serif; }
        .card { background-color: white; border-radius: 0.75rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); padding: 1.5rem; }
        .wizard-step { animation: fadeIn 0.5s; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
    </style>
</head>
<body class="bg-gray-100">

    <div id="root"></div>

    <script type="text/babel">
        const { useState, createContext, useContext, useEffect, useCallback } = React;
        const { jsPDF } = window.jspdf;
        const { XLSX } = window;

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Mock Data Store
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const initialDataStore = {
            users: [
                { id: 'admin-1', email: 'admin@test.com', password: 'password123', role: 'admin', fullName: 'Admin User', profileComplete: true },
                { id: 'worker-1', email: 'worker@test.com', password: 'password123', role: 'worker', fullName: 'John Doe', profileComplete: true, personalDetails: { fullName: 'John Doe', email: 'worker@test.com', abn: '55 123 456 789', street: '123 Fake St', suburb: 'Sydney', state: 'NSW', postcode: '2000' }, invoicing: { accountName: 'John Doe', bsb: '012-345', accountNumber: '12345678', startingInvoiceNumber: '101' } },
                { id: 'worker-2', email: 'new-worker@test.com', password: 'password123', role: 'worker', fullName: 'Jane Smith', profileComplete: false },
                { id: 'participant-1', email: 'participant@test.com', password: 'password123', role: 'participant', fullName: 'Peter Pan', profileComplete: true, ndisNumber: '123456789', address: '1 Neverland Ave, Fantasia, NSW 2888', billingDetails: { type: 'Plan Managed', managerEmail: 'invoices@planmanager.com.au' }, linkedServices: ['01_011_0107_1_1'] },
                { id: 'participant-2', email: 'new-participant@test.com', password: 'password123', role: 'participant', fullName: 'Wendy Darling', profileComplete: false, ndisNumber: '987654321', address: '22 London Way, Bloomsbury, VIC 3000', billingDetails: { type: 'Self Managed', selfEmail: 'wendy@example.com' }, linkedServices: ['04_104_0125_6_1'] },
                { id: 'participant-3', email: 'hook@test.com', password: 'password123', role: 'participant', fullName: 'Captain Hook', profileComplete: true, ndisNumber: '555555555', address: 'The Jolly Roger, At Sea', billingDetails: { type: 'Plan Managed', managerEmail: 'hook.invoices@managers.com' }, linkedServices: ['01_015_0107_1_1'] },
            ],
            shifts: [
                { id: 'shift-1', workerId: 'worker-1', participantId: 'participant-1', participantName: 'Peter Pan', shiftDate: '2025-07-21', startTime: '09:00', endTime: '11:00', durationHours: '2.00', supportItemId: '01_011_0107_1_1', isTravelClaimed: true, travelKms: 15, notes: 'Assisted with morning routine and meal prep.', invoiced: false },
                { id: 'shift-2', workerId: 'worker-1', participantId: 'participant-2', participantName: 'Wendy Darling', shiftDate: '2025-07-22', startTime: '13:00', endTime: '15:00', durationHours: '2.00', supportItemId: '04_104_0125_6_1', isTravelClaimed: false, travelKms: 0, notes: '', invoiced: false },
                { id: 'shift-4', workerId: 'worker-1', participantId: 'participant-1', participantName: 'Peter Pan', shiftDate: '2025-07-23', startTime: '09:00', endTime: '12:00', durationHours: '3.00', supportItemId: '01_011_0107_1_1', isTravelClaimed: false, travelKms: 0, notes: 'Community access to the library.', invoiced: false },
                { id: 'shift-3', workerId: 'worker-2', participantId: 'participant-3', participantName: 'Captain Hook', shiftDate: '2025-07-24', startTime: '10:00', endTime: '14:00', durationHours: '4.00', supportItemId: '01_015_0107_1_1', isTravelClaimed: true, travelKms: 25, notes: 'High intensity support.', invoiced: false }
            ],
            draftShifts: [ { id: 'draft-1', workerId: 'worker-1', participantId: 'participant-1', startTime: new Date().toISOString() } ],
            jobs: [
                { id: 'job-1', participantId: 'participant-1', serviceId: '01_011_0107_1_1', rate: 67.56, date: '2025-07-21', time: '09:00', duration: 2, location: '123 Neverland Ave', details: 'Morning routine assistance.', status: 'Pending', repeats: 'weekly', repeatDays: [1, 3, 5], repeatEndDate: '2025-08-15', assignedWorkerId: null },
                { id: 'job-2', participantId: 'participant-2', serviceId: '04_104_0125_6_1', rate: 70.00, date: '2025-07-22', time: '14:00', duration: 3, location: 'Community Park', details: 'Social outing and community access.', status: 'Assigned', repeats: 'none', assignedWorkerId: 'worker-1' }
            ],
            invoices: [],
            priceGuide: [
                { itemNumber: '01_011_0107_1_1', itemName: 'Self-Care - Standard', unit: 'Hour', rate: 67.56, travelItemNumber: '01_799_0104_1_1' },
                { itemNumber: '01_015_0107_1_1', itemName: 'Self-Care - High Intensity', unit: 'Hour', rate: 74.44, travelItemNumber: '01_799_0104_1_1' },
                { itemNumber: '04_104_0125_6_1', itemName: 'Community Access - Standard', unit: 'Hour', rate: 67.56, travelItemNumber: '04_799_0104_6_1' },
                { itemNumber: '01_799_0104_1_1', itemName: 'Provider Travel - Self Care', unit: 'km', rate: 0.99 },
                { itemNumber: '04_799_0104_6_1', itemName: 'Provider Travel - Community', unit: 'km', rate: 0.99 },
            ],
        };

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  App Context
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const AppContext = createContext();

        const AppProvider = ({ children }) => {
            const [view, setView] = useState('login');
            const [user, setUser] = useState(null);
            const [appData, setAppData] = useState(initialDataStore);
            const [activeId, setActiveId] = useState(null);

            useEffect(() => {
                const savedData = localStorage.getItem('ndis_app_data');
                if (savedData) {
                    setAppData(JSON.parse(savedData));
                }
            }, []);

            useEffect(() => {
                localStorage.setItem('ndis_app_data', JSON.stringify(appData));
            }, [appData]);

            const login = (email, password) => {
                const foundUser = appData.users.find(u => u.email === email && u.password === password);
                if (foundUser) {
                    setUser(foundUser);
                    setActiveId(foundUser.id);
                    if (!foundUser.profileComplete) {
                        setView(foundUser.role === 'worker' ? 'workerOnboarding' : 'participantOnboarding');
                    } else {
                        setView('overview');
                    }
                    return true;
                }
                return false;
            };

            const logout = () => { setUser(null); setView('login'); setActiveId(null); };

            const register = (userData) => {
                if (appData.users.some(u => u.email === userData.email)) {
                    alert('An account with this email already exists.');
                    return;
                }
                const newUser = { id: `user-${Date.now()}`, ...userData, profileComplete: false };
                setAppData(prev => ({ ...prev, users: [...prev.users, newUser] }));
                setUser(newUser);
                setActiveId(newUser.id);
                setView(newUser.role === 'worker' ? 'workerOnboarding' : 'participantOnboarding');
            };
            
            const updateUser = (updatedUserData) => {
                setUser(updatedUserData);
                setAppData(prev => ({ ...prev, users: prev.users.map(u => u.id === updatedUserData.id ? updatedUserData : u) }));
            };
            
            const navigateTo = (newView, id = null) => {
                setActiveId(id || (user ? user.id : null));
                setView(newView);
            };
            
            const value = { view, navigateTo, user, login, logout, register, updateUser, appData, setAppData, activeId };
            return <AppContext.Provider value={value}>{children}</AppContext.Provider>;
        };

        const useAppContext = () => useContext(AppContext);

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Reusable Components
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const Input = ({ id, label, ...props }) => (
            <div><label htmlFor={id} className="block text-sm font-medium text-gray-700">{label}</label><input id={id} {...props} className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm placeholder-gray-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" /></div>
        );
        const Button = ({ children, onClick, type = "button", variant = "primary", disabled = false, fullWidth = false }) => {
            const base = "inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2";
            const variants = { primary: "text-white bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500", secondary: "text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:ring-indigo-500", danger: "text-white bg-red-600 hover:bg-red-700 focus:ring-red-500" };
            const width = fullWidth ? "w-full" : "";
            const disabledState = "disabled:opacity-50 disabled:cursor-not-allowed";
            return <button type={type} onClick={onClick} className={`${base} ${variants[variant]} ${width} ${disabledState}`} disabled={disabled}>{children}</button>;
        };
        const Spinner = () => <div className="flex justify-center items-center p-8"><div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div></div>;
        const Modal = ({ show, onClose, title, children }) => {
            if (!show) return null;
            return (
                <div className="fixed inset-0 bg-gray-600 bg-opacity-75 overflow-y-auto h-full w-full z-50 flex items-center justify-center p-4">
                    <div className="relative mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md bg-white">
                        <div className="flex justify-between items-center pb-3 border-b"><h3 className="text-2xl font-bold">{title}</h3>{onClose && <button onClick={onClose} className="text-gray-400 hover:text-gray-600 text-3xl">&times;</button>}</div>
                        <div className="mt-3">{children}</div>
                    </div>
                </div>
            );
        };
        const DetailItem = ({label, value}) => <div className="py-3 sm:grid sm:grid-cols-3 sm:gap-4"><dt className="text-sm font-medium text-gray-500">{label}</dt><dd className="mt-1 text-sm text-gray-900 sm:col-span-2 sm:mt-0">{value || 'N/A'}</dd></div>;
        const StatCard = ({ title, value, icon, onClick }) => (
            <div className="card flex items-center cursor-pointer transition-transform transform hover:-translate-y-1 hover:shadow-xl" onClick={onClick}>
                <div className="p-3 rounded-full bg-indigo-100 text-indigo-600">{icon}</div>
                <div className="ml-4"><p className="text-sm font-medium text-gray-500 truncate">{title}</p><p className="text-2xl font-semibold text-gray-900">{value}</p></div>
            </div>
        );

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Authentication & Onboarding Views
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const LoginScreen = () => {
            const { login, navigateTo } = useAppContext();
            const [email, setEmail] = useState('');
            const [password, setPassword] = useState('');
            const [error, setError] = useState('');
            const handleSubmit = (e) => { e.preventDefault(); setError(''); if (!login(email, password)) { setError('Invalid email or password.'); } };
            return (
                <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
                    <div className="w-full max-w-md">
                        <div className="bg-white shadow-md rounded-lg p-8">
                            <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">Welcome Back</h1>
                            <div className="mb-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-md">
                                <p className="font-bold">Dev Login Info</p>
                                <ul className="list-disc list-inside text-sm mt-1">
                                    <li><b>Admin:</b> admin@test.com</li>
                                    <li><b>Worker (Done):</b> worker@test.com</li>
                                    <li><b>Worker (New):</b> new-worker@test.com</li>
                                    <li><b>Participant (Done):</b> participant@test.com</li>
                                    <li><b>Password (all):</b> password123</li>
                                </ul>
                            </div>
                            {error && <p className="bg-red-100 text-red-700 p-3 rounded-md mb-4 text-center">{error}</p>}
                            <form onSubmit={handleSubmit} className="space-y-6">
                                <Input id="email" label="Email Address" type="email" value={email} onChange={e => setEmail(e.target.value)} required placeholder="you@example.com" />
                                <Input id="password" label="Password" type="password" value={password} onChange={e => setPassword(e.target.value)} required placeholder="••••••••" />
                                <Button type="submit" fullWidth>Sign In</Button>
                            </form>
                            <p className="text-center text-sm text-gray-600 mt-8">Don't have an account?{' '}<a href="#" onClick={(e) => { e.preventDefault(); navigateTo('signup'); }} className="font-medium text-indigo-600 hover:text-indigo-500">Sign up</a></p>
                        </div>
                    </div>
                </div>
            );
        };
        const SignUpScreen = () => {
            const { navigateTo } = useAppContext();
            return (
                <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
                    <div className="w-full max-w-md text-center">
                        <div className="bg-white shadow-md rounded-lg p-8">
                            <h1 className="text-3xl font-bold text-gray-800 mb-2">Create Your Account</h1><p className="text-gray-600 mb-8">First, tell us who you are.</p>
                            <div className="space-y-4"><Button onClick={() => navigateTo('workerSignUp')} fullWidth>I am a Support Worker</Button><Button onClick={() => navigateTo('participantSignUp')} fullWidth variant="secondary">I am a Participant</Button></div>
                            <p className="text-center text-sm text-gray-600 mt-8">Already have an account?{' '}<a href="#" onClick={(e) => { e.preventDefault(); navigateTo('login'); }} className="font-medium text-indigo-600 hover:text-indigo-500">Sign In</a></p>
                        </div>
                    </div>
                </div>
            );
        };
        const WorkerSignUpForm = () => {
            const { register, navigateTo } = useAppContext();
            const [formData, setFormData] = useState({ fullName: '', email: '', password: '' });
            const handleChange = (e) => setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            const handleSubmit = (e) => { e.preventDefault(); register({ ...formData, role: 'worker' }); };
            return (
                <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
                    <div className="w-full max-w-md">
                        <div className="bg-white shadow-md rounded-lg p-8">
                            <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">Worker Sign Up</h1>
                            <form onSubmit={handleSubmit} className="space-y-6"><Input id="fullName" name="fullName" label="Full Name" value={formData.fullName} onChange={handleChange} required /><Input id="email" name="email" label="Email Address" type="email" value={formData.email} onChange={handleChange} required /><Input id="password" name="password" label="Password" type="password" value={formData.password} onChange={handleChange} required /><Button type="submit" fullWidth>Create Account</Button></form>
                            <p className="text-center text-sm text-gray-600 mt-8"><a href="#" onClick={(e) => { e.preventDefault(); navigateTo('signup'); }} className="font-medium text-indigo-600 hover:text-indigo-500">&larr; Back</a></p>
                        </div>
                    </div>
                </div>
            );
        };
        const ParticipantSignUpForm = () => {
            const { register, navigateTo } = useAppContext();
            const [formData, setFormData] = useState({ fullName: '', email: '', password: '' });
            const handleChange = (e) => setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            const handleSubmit = (e) => { e.preventDefault(); register({ ...formData, role: 'participant' }); };
            return (
                <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
                    <div className="w-full max-w-md">
                        <div className="bg-white shadow-md rounded-lg p-8">
                            <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">Participant Sign Up</h1>
                            <form onSubmit={handleSubmit} className="space-y-6"><Input id="fullName" name="fullName" label="Full Name" value={formData.fullName} onChange={handleChange} required /><Input id="email" name="email" label="Email Address" type="email" value={formData.email} onChange={handleChange} required /><Input id="password" name="password" label="Password" type="password" value={formData.password} onChange={handleChange} required /><Button type="submit" fullWidth>Create Account</Button></form>
                            <p className="text-center text-sm text-gray-600 mt-8"><a href="#" onClick={(e) => { e.preventDefault(); navigateTo('signup'); }} className="font-medium text-indigo-600 hover:text-indigo-500">&larr; Back</a></p>
                        </div>
                    </div>
                </div>
            );
        };
        const WorkerOnboarding = () => {
            const { user, updateUser, navigateTo } = useAppContext();
            const [step, setStep] = useState(1);
            const [formData, setFormData] = useState({ abn: '', street: '', suburb: '', state: 'NSW', postcode: '', accountName: '', bsb: '', accountNumber: '', startingInvoiceNumber: '101' });
            const handleChange = (e) => setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            const handleNext = () => setStep(s => s + 1);
            const handleBack = () => setStep(s => s - 1);
            const handleSubmit = (e) => { e.preventDefault(); const updatedUser = { ...user, personalDetails: { fullName: user.fullName, email: user.email, ...formData }, invoicing: { ...formData }, profileComplete: true, }; updateUser(updatedUser); navigateTo('overview'); };
            return (
                 <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
                    <div className="w-full max-w-2xl"><div className="bg-white shadow-md rounded-lg p-8">
                        <h1 className="text-3xl font-bold text-center text-gray-800 mb-2">Complete Your Worker Profile</h1><p className="text-center text-gray-600 mb-8">We need a few more details to get you set up.</p>
                        <div className="relative pt-1 mb-8"><div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-indigo-200"><div style={{ width: `${(step / 2) * 100}%` }} className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-indigo-500 transition-all duration-500"></div></div></div>
                        <form onSubmit={handleSubmit}>
                            {step === 1 && ( <div className="wizard-step space-y-6"> <h2 className="text-xl font-semibold text-gray-700">Personal & Business Details</h2> <Input id="abn" name="abn" label="ABN" value={formData.abn} onChange={handleChange} required /> <Input id="street" name="street" label="Street Address" value={formData.street} onChange={handleChange} required /> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Input id="suburb" name="suburb" label="Suburb" value={formData.suburb} onChange={handleChange} required /> <Input id="postcode" name="postcode" label="Postcode" value={formData.postcode} onChange={handleChange} required /> <div><label htmlFor="state" className="block text-sm font-medium text-gray-700">State</label><select id="state" name="state" value={formData.state} onChange={handleChange} className="mt-1 block w-full px-3 py-2 bg-white border border-gray-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"><option>NSW</option><option>VIC</option></select></div> </div> <div className="flex justify-end pt-4"><Button onClick={handleNext}>Next &rarr;</Button></div> </div> )}
                            {step === 2 && ( <div className="wizard-step space-y-6"> <h2 className="text-xl font-semibold text-gray-700">Invoicing & Bank Details</h2> <Input id="accountName" name="accountName" label="Account Name" value={formData.accountName} onChange={handleChange} required /> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"><Input id="bsb" name="bsb" label="BSB" value={formData.bsb} onChange={handleChange} required /><Input id="accountNumber" name="accountNumber" label="Account Number" value={formData.accountNumber} onChange={handleChange} required /></div> <Input id="startingInvoiceNumber" name="startingInvoiceNumber" label="Starting Invoice Number" type="number" value={formData.startingInvoiceNumber} onChange={handleChange} required /> <div className="flex justify-between pt-4"><Button onClick={handleBack} variant="secondary">&larr; Back</Button><Button type="submit">Finish Setup</Button></div> </div> )}
                        </form>
                    </div></div>
                </div>
            );
        };
        const ParticipantOnboarding = () => {
            const { user, updateUser, navigateTo } = useAppContext();
            const [choice, setChoice] = useState(null);
            const [formData, setFormData] = useState({ ndisNumber: '', address: '', billingDetails: { type: 'Plan Managed', managerEmail: '' }, linkedServices: [] });
            const [shareLink, setShareLink] = useState('');
            const handleChange = (e) => { const { name, value } = e.target; if (name === 'managerEmail' || name === 'billingType') { setFormData(prev => ({ ...prev, billingDetails: { ...prev.billingDetails, [name]: value } })); } else { setFormData(prev => ({ ...prev, [name]: value })); } };
            const handleSubmit = (e) => { e.preventDefault(); const updatedUser = { ...user, ...formData, profileComplete: true }; updateUser(updatedUser); navigateTo('overview'); };
            const handleShare = () => { setShareLink(`${window.location.origin}?setup_token=${user.id}`); setChoice('share'); };
            const handleCopyLink = () => { navigator.clipboard.writeText(shareLink).then(() => alert('Link copied!')); };
            if (choice === 'self') {
                return (
                    <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4">
                        <div className="w-full max-w-2xl"><div className="bg-white shadow-md rounded-lg p-8 wizard-step">
                            <h1 className="text-3xl font-bold text-center text-gray-800 mb-6">Your NDIS Details</h1>
                            <form onSubmit={handleSubmit} className="space-y-6"><Input id="ndisNumber" name="ndisNumber" label="NDIS Number" value={formData.ndisNumber} onChange={handleChange} required /><Input id="address" name="address" label="Home Address" value={formData.address} onChange={handleChange} required /><div><label className="block text-sm font-medium text-gray-700">Billing Type</label><select name="billingType" value={formData.billingDetails.type} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"><option>Plan Managed</option><option>Self Managed</option></select></div><Input id="managerEmail" name="managerEmail" label="Plan Manager / Your Billing Email" type="email" value={formData.billingDetails.managerEmail} onChange={handleChange} required /><div className="flex justify-between pt-4"><Button onClick={() => setChoice(null)} variant="secondary">&larr; Back</Button><Button type="submit">Save & Continue</Button></div></form>
                        </div></div>
                    </div>
                );
            }
            if (choice === 'share') { return ( <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4"><div className="w-full max-w-2xl text-center"><div className="bg-white shadow-md rounded-lg p-8 wizard-step"><h1 className="text-3xl font-bold text-gray-800 mb-4">Share for Assistance</h1><p className="text-gray-600 mb-6">Send this secure link to your support coordinator, plan manager, or trusted person to help set up your account.</p><div className="bg-gray-100 p-4 rounded-md flex items-center justify-between"><span className="text-sm text-gray-700 break-all">{shareLink}</span><Button onClick={handleCopyLink} variant="secondary">Copy</Button></div><p className="text-xs text-gray-500 mt-4">For security, this link is unique to you. Your dashboard will be unlocked once your details are completed.</p><div className="mt-8"><Button onClick={() => setChoice(null)} variant="secondary">&larr; Back</Button></div></div></div></div> ); }
            return ( <div className="flex items-center justify-center min-h-screen bg-gray-50 p-4"><div className="w-full max-w-2xl text-center"><div className="bg-white shadow-md rounded-lg p-8"><h1 className="text-3xl font-bold text-gray-800 mb-2">Complete Your Profile</h1><p className="text-gray-600 mb-8">Let's add your NDIS details to get started.</p><div className="space-y-4 md:space-y-0 md:flex md:space-x-4"><Button onClick={() => setChoice('self')} fullWidth>Set Up My NDIS Details Now</Button><Button onClick={handleShare} fullWidth variant="secondary">Share Link for Assistance</Button></div></div></div></div> );
        };
        const ProfileCompletionModal = () => {
            const { user, navigateTo } = useAppContext();
            const handleGoToSetup = () => { navigateTo(user.role === 'worker' ? 'workerOnboarding' : 'participantOnboarding'); };
            return ( <Modal show={true} title="Complete Your Profile"><p className="text-gray-700 mb-6">Welcome! To unlock your dashboard and access all features, you need to complete your profile first.</p><Button onClick={handleGoToSetup} fullWidth>Go to Profile Setup</Button></Modal> );
        };
        
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Application Views (All original components restored and integrated)
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const AdminOverview = () => {
            const { navigateTo, appData, setAppData } = useAppContext();
            const uninvoicedShifts = appData.shifts.filter(s => !s.invoiced).length;
            const workers = appData.users.filter(u => u.role === 'worker');
            const participants = appData.users.filter(u => u.role === 'participant');
            const handleSimulateSMS = () => {
                const workerId = prompt("Enter Worker ID to simulate SMS from (e.g., worker-1):", "worker-1");
                const participantId = prompt("Enter Participant ID for the shift (e.g., participant-1):", "participant-1");
                if (workerId && participantId) {
                    setAppData(prev => ({...prev, draftShifts: [...prev.draftShifts, { id: `draft-${Date.now()}`, workerId, participantId, startTime: new Date().toISOString() }]}));
                    alert(`Draft shift created!`); navigateTo('invoicing');
                }
            };
            const QuickActionButton = ({ title, description, icon, onClick }) => ( <button onClick={onClick} className="text-left w-full p-4 border rounded-lg hover:bg-gray-50 flex items-center space-x-4 transition-colors"><div className="p-3 rounded-full bg-indigo-100 text-indigo-600">{icon}</div><div><p className="font-semibold text-gray-800">{title}</p><p className="text-sm text-gray-500">{description}</p></div></button> );
            return (
                <div>
                    <h1 className="text-3xl font-bold text-gray-900 mb-6">Admin Overview</h1>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <StatCard title="Total Workers" value={workers.length} icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path d="M17 20h5v-2a3 3 0 0 0-5.356-1.857M17 20H7m10 0v-2c0-.653-.224-1.26-.62-1.751M17 20h-2M7 20H2v-2a3 3 0 0 1 5.356-1.857M7 20v-2c0-.653.224-1.26.62-1.751M7 20h2m-4 3h4m-4-3v-2m4 3v-2m4-11a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z" /></svg>} onClick={() => navigateTo('workers')} />
                        <StatCard title="Total Participants" value={participants.length} icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path d="M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-2.308M15 19.128v-3.86a2.25 2.25 0 0 1 3.86-1.732M15 19.128v-3.86a2.25 2.25 0 0 0-3.86-1.732M15 19.128c-3.112 0-5.625-2.513-5.625-5.625S11.888 7.878 15 7.878s5.625 2.513 5.625 5.625a5.632 5.632 0 0 1-1.125 3.375M6.375 11.25a2.25 2.25 0 0 1 4.5 0m4.5 0a2.25 2.25 0 0 1 4.5 0m-13.5 0a2.25 2.25 0 0 1 4.5 0" /></svg>} onClick={() => navigateTo('participants')} />
                        <StatCard title="Uninvoiced Shifts" value={uninvoicedShifts} icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg>} onClick={() => navigateTo('invoicing')} />
                    </div>
                    <div className="mt-8"><h2 className="text-xl font-bold text-gray-900 mb-4">Quick Actions</h2><div className="grid grid-cols-1 md:grid-cols-2 gap-4"><QuickActionButton title="Create a New Job" description="Request support for a participant." icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path d="M12 4.5v15m7.5-7.5h-15" /></svg>} onClick={() => navigateTo('createJob')} /><QuickActionButton title="Simulate SMS Shift Start" description="Create a draft shift log from a text message." icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path d="M10.5 1.5H8.25A2.25 2.25 0 0 0 6 3.75v16.5a2.25 2.25 0 0 0 2.25 2.25h7.5A2.25 2.25 0 0 0 18 20.25V3.75a2.25 2.25 0 0 0-2.25-2.25H13.5m-3 0V3h3V1.5m-3 0h3m-3 18.75h3" /></svg>} onClick={handleSimulateSMS} /></div></div>
                </div>
            );
        };
        const WorkersDashboard = () => {
            const { navigateTo, appData } = useAppContext();
            const workers = appData.users.filter(u => u.role === 'worker');
            return (
                <div><h1 className="text-3xl font-bold text-gray-900 mb-6">Workers</h1><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">{workers.map(worker => (<div key={worker.id} className="card flex flex-col justify-between"><div><h2 className="text-xl font-bold text-gray-800">{worker.fullName}</h2><p className="text-sm text-gray-500">{worker.email}</p></div><div className="mt-4 flex space-x-2"><Button onClick={() => navigateTo('userProfile', worker.id)}>View Profile</Button><Button onClick={() => navigateTo('logShift', worker.id)} variant="secondary">Log Shift</Button></div></div>))}</div></div>
            );
        };
        const ParticipantsDashboard = () => {
            const { navigateTo, appData } = useAppContext();
            const participants = appData.users.filter(u => u.role === 'participant');
            return (
                <div><h1 className="text-3xl font-bold text-gray-900 mb-6">Participants</h1><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">{participants.map(p => (<div key={p.id} className="card"><div><h2 className="text-xl font-bold text-gray-800">{p.fullName}</h2><p className="text-sm text-gray-500">NDIS #: {p.ndisNumber || 'N/A'}</p></div><div className="mt-4"><Button onClick={() => navigateTo('userProfile', p.id)} variant="secondary">View Details</Button></div></div>))}</div></div>
            );
        };
        const JobBoard = () => {
            const { user, appData, setAppData, navigateTo } = useAppContext();
            const [editingJob, setEditingJob] = useState(null);
            const [expandedJobId, setExpandedJobId] = useState(null);
            const handleSaveJob = (updatedJob) => { setAppData(prev => ({ ...prev, jobs: prev.jobs.map(j => j.id === updatedJob.id ? updatedJob : j) })); setEditingJob(null); };
            const handleAcceptJob = (jobId) => { setAppData(prev => ({ ...prev, jobs: prev.jobs.map(j => j.id === jobId ? { ...j, status: 'Assigned', assignedWorkerId: user.id } : j) })); alert('Job accepted!'); };
            const getStatusColor = (status) => ({ Pending: 'bg-yellow-100 text-yellow-800', Assigned: 'bg-blue-100 text-blue-800', Completed: 'bg-green-100 text-green-800' }[status] || 'bg-gray-100 text-gray-800');
            const JobCard = ({ job }) => {
                const participant = appData.users.find(p => p.id === job.participantId);
                const isExpanded = expandedJobId === job.id;
                const repeatText = job.repeats === 'weekly' ? `Repeats on ${['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].filter((_,i) => job.repeatDays.includes(i)).join(', ')}` : 'Does not repeat';
                return (
                    <div className="card cursor-pointer" onClick={() => setExpandedJobId(isExpanded ? null : job.id)}>
                        <div className="flex justify-between items-start"><div><h2 className="text-lg font-bold text-gray-800">{participant?.fullName}</h2><p className="text-sm text-gray-600 mt-1">{new Date(job.date + 'T' + job.time).toLocaleString('en-AU')}</p></div><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(job.status)}`}>{job.status}</span></div>
                        {isExpanded && (<div className="mt-4 pt-4 border-t"><p className="text-sm text-gray-700"><strong>Details:</strong> {job.details}</p><p className="text-sm text-gray-700 mt-1"><strong>Location:</strong> {job.location}</p><p className="text-sm text-gray-700 mt-1"><strong>Recurrence:</strong> {repeatText}</p><div className="mt-4 flex justify-end">{user.role === 'admin' && <Button onClick={(e) => { e.stopPropagation(); setEditingJob(job); }} variant="secondary">Edit Job</Button>}{user.role === 'worker' && job.status === 'Pending' && <Button onClick={(e) => { e.stopPropagation(); handleAcceptJob(job.id); }}>Accept Job</Button>}</div></div>)}
                    </div>
                );
            };
            const availableJobs = appData.jobs.filter(j => j.status === 'Pending');
            const myJobs = user.role === 'worker' ? appData.jobs.filter(j => j.assignedWorkerId === user.id) : appData.jobs.filter(j => j.participantId === user.id);
            return (
                <div>{editingJob && <EditJobModal job={editingJob} onSave={handleSaveJob} onClose={() => setEditingJob(null)} />}<div className="flex justify-between items-center mb-6"><h1 className="text-3xl font-bold text-gray-900">{user.role === 'admin' ? 'Job Management' : (user.role === 'worker' ? 'Job Board' : 'My Jobs')}</h1>{(user.role === 'admin' || user.role === 'participant') && <Button onClick={() => navigateTo('createJob')}>Create Job</Button>}</div>
                {user.role !== 'admin' && <div className="mb-8"><h2 className="text-xl font-bold text-gray-800 mb-4">{user.role === 'worker' ? 'My Accepted Jobs' : 'My Requested Jobs'}</h2><div className="space-y-4">{myJobs.length > 0 ? myJobs.map(job => <JobCard key={job.id} job={job} />) : <p className="text-gray-500 card">You have no jobs in this category.</p>}</div></div>}
                {(user.role === 'admin' || user.role === 'worker') && <div><h2 className="text-xl font-bold text-gray-800 mb-4">{user.role === 'admin' ? 'All Jobs' : 'Available Jobs'}</h2><div className="space-y-4">{(user.role === 'admin' ? appData.jobs : availableJobs).map(job => <JobCard key={job.id} job={job} />)}</div></div>}
                </div>
            );
        };
        const EditJobModal = ({ job, onSave, onClose }) => {
            const [jobData, setJobData] = useState(job);
            const handleChange = (e) => setJobData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            const handleSubmit = (e) => { e.preventDefault(); onSave(jobData); };
            return ( <Modal show={true} onClose={onClose} title="Edit Job"><form onSubmit={handleSubmit} className="space-y-4"><Input id="location" name="location" label="Job Location" value={jobData.location} onChange={handleChange} required /><Input id="details" name="details" label="Job Details" value={jobData.details} onChange={handleChange} required /><div><label className="block text-sm font-medium text-gray-700">Status</label><select name="status" value={jobData.status} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 rounded-md"><option>Pending</option><option>Assigned</option><option>Completed</option></select></div><div className="flex justify-end space-x-3 pt-4"><Button onClick={onClose} variant="secondary">Cancel</Button><Button type="submit">Save Changes</Button></div></form></Modal> );
        };
        const CreateJob = () => {
            const { navigateTo, appData, setAppData, user } = useAppContext();
            const [jobData, setJobData] = useState({ participantId: user.role === 'participant' ? user.id : '', serviceId: '', rate: '', date: '', time: '', duration: '', location: '', details: '', repeats: 'none', repeatDays: [], repeatEndDate: '' });
            const handleChange = (e) => setJobData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            const handleSubmit = (e) => { e.preventDefault(); const newJob = { id: `job-${Date.now()}`, ...jobData, status: 'Pending' }; setAppData(prev => ({...prev, jobs: [...prev.jobs, newJob]})); alert('Job created successfully!'); navigateTo('jobs'); };
            const participants = appData.users.filter(u => u.role === 'participant');
            return (
                <div><h1 className="text-3xl font-bold text-gray-900 mb-6">{user.role === 'participant' ? 'Request New Support' : 'Create New Job'}</h1><form onSubmit={handleSubmit} className="card space-y-6">{user.role === 'admin' && (<div><label htmlFor="participantId" className="block text-sm font-medium text-gray-700">Participant</label><select id="participantId" name="participantId" value={jobData.participantId} onChange={handleChange} required className="mt-1 block w-full rounded-md"><option value="">Select participant</option>{participants.map(p => <option key={p.id} value={p.id}>{p.fullName}</option>)}</select></div>)}<Input id="date" name="date" type="date" label="Start Date" value={jobData.date} onChange={handleChange} required /><Input id="time" name="time" type="time" label="Start Time" value={jobData.time} onChange={handleChange} required /><Input id="duration" name="duration" type="number" label="Duration (hours)" value={jobData.duration} onChange={handleChange} required /><Input id="details" name="details" label="Job Details" value={jobData.details} onChange={handleChange} /><div className="flex justify-end space-x-3"><Button onClick={() => navigateTo('jobs')} variant="secondary">Cancel</Button><Button type="submit">Create Job</Button></div></form></div>
            );
        };
        const InvoicingHub = () => {
            const { navigateTo, appData } = useAppContext();
            const uninvoicedShifts = appData.shifts.filter(s => !s.invoiced);
            const participantsWithUninvoicedShifts = [...new Set(uninvoicedShifts.map(s => s.participantId))].map(id => appData.users.find(u => u.id === id));
            return (
                <div><h1 className="text-3xl font-bold text-gray-900 mb-6">Invoicing</h1><div className="card"><h2 className="text-xl font-bold text-gray-800">Participants with Uninvoiced Shifts</h2>{participantsWithUninvoicedShifts.length > 0 ? (<ul className="divide-y divide-gray-200 mt-4">{participantsWithUninvoicedShifts.map(p => p && (<li key={p.id} className="flex justify-between items-center py-5"><div><p className="font-semibold">{p.fullName}</p><p className="text-sm text-gray-500">NDIS #: {p.ndisNumber}</p></div><Button onClick={() => navigateTo('participantInvoicing', p.id)}>Create Invoice</Button></li>))}</ul>) : (<p className="mt-4 text-gray-500">No participants have uninvoiced shifts.</p>)}</div></div>
            );
        };
        const InvoicePreviewModal = ({ show, onClose, onConfirm, onOpen, invoiceData }) => {
            if (!show) return null;
            const { tableBody, grandTotal, participant, worker } = invoiceData;
            return (
                <Modal show={show} onClose={onClose} title="Invoice Preview">
                    <div className="text-sm text-gray-700 p-4 border rounded-md">
                        <div className="grid grid-cols-2 gap-4 mb-6">
                            <div><strong className="block">From:</strong>{worker.personalDetails.fullName}<br/>ABN: {worker.personalDetails.abn}</div>
                            <div className="text-right"><strong>To:</strong><br/>{participant.fullName}<br/>NDIS: {participant.ndisNumber}<br/>{participant.address}</div>
                        </div>
                        <table className="w-full text-left table-auto">
                            <thead><tr className="bg-gray-100"><th className="p-2 font-semibold">Date</th><th className="p-2 font-semibold">Support</th><th className="p-2 font-semibold">Duration/KM</th><th className="p-2 font-semibold text-right">Total</th></tr></thead>
                            <tbody>
                                {tableBody.map((row, i) => (
                                    <React.Fragment key={i}>
                                        <tr className="border-b"><td className="p-2">{row.date}</td><td className="p-2">{row.support}</td><td className="p-2">{row.qty}</td><td className="p-2 text-right">{row.total}</td></tr>
                                        {/* NOTE: The user requested notes to be removed from the invoice. This part is now correctly excluded. */}
                                    </React.Fragment>
                                ))}
                            </tbody>
                            <tfoot><tr className="font-bold"><td colSpan="3" className="p-2 text-right">Grand Total:</td><td className="p-2 text-right">${grandTotal.toFixed(2)}</td></tr></tfoot>
                        </table>
                    </div>
                    <div className="flex justify-end space-x-3 mt-6">
                        <Button onClick={onClose} variant="secondary">Cancel</Button>
                        <Button onClick={onOpen} variant="secondary">Open PDF in New Tab</Button>
                        <Button onClick={onConfirm}>Confirm & Queue for Sending</Button>
                    </div>
                </Modal>
            );
        };
        const ParticipantInvoicing = () => {
            const { appData, setAppData, activeId, navigateTo } = useAppContext();
            const [invoiceData, setInvoiceData] = useState(null);
            const [showPreview, setShowPreview] = useState(false);
            const participant = appData.users.find(p => p.id === activeId);
            const shiftsToInvoice = appData.shifts.filter(s => s.participantId === activeId && !s.invoiced);
            const generateInvoiceData = () => {
                const firstShiftWorker = appData.users.find(w => w.id === shiftsToInvoice[0]?.workerId);
                if (!firstShiftWorker) { alert("Error: Could not find worker for this shift."); return null; }
                const tableBody = []; let grandTotal = 0;
                shiftsToInvoice.forEach(shift => {
                    const supportItem = appData.priceGuide.find(item => item.itemNumber === shift.supportItemId);
                    if (!supportItem) return;
                    const total = shift.durationHours * supportItem.rate; grandTotal += total; 
                    tableBody.push({ 
                        date: new Date(shift.shiftDate).toLocaleDateString('en-AU'), 
                        support: `${supportItem.itemName} (${supportItem.itemNumber})`, 
                        qty: `${shift.durationHours} hrs`, 
                        rate: supportItem.rate,
                        total: `$${total.toFixed(2)}`,
                        // Note: shift.notes is intentionally omitted from this data structure as per user request.
                    });
                    if (shift.isTravelClaimed && shift.travelKms > 0) {
                        const travelItem = appData.priceGuide.find(item => item.itemNumber === supportItem.travelItemNumber);
                        if (travelItem) { 
                            const travelTotal = shift.travelKms * travelItem.rate; grandTotal += travelTotal; 
                            tableBody.push({ 
                                date: new Date(shift.shiftDate).toLocaleDateString('en-AU'), 
                                support: `${travelItem.itemName} (${travelItem.itemNumber})`, 
                                qty: `${shift.travelKms} km`,
                                rate: travelItem.rate,
                                total: `$${travelTotal.toFixed(2)}`
                            }); 
                        }
                    }
                });
                return { tableBody, grandTotal, participant, worker: firstShiftWorker, shiftsToInvoice };
            };
            const handleGenerateInvoice = () => { if (shiftsToInvoice.length === 0) return; const data = generateInvoiceData(); if (data) { setInvoiceData(data); setShowPreview(true); } };
            const handleConfirmInvoice = () => {
                setAppData(prev => {
                    const newInvoices = [...prev.invoices, { id: `inv-${Date.now()}`, participantId: activeId, shiftIds: invoiceData.shiftsToInvoice.map(s => s.id), status: 'queued' }];
                    const updatedShifts = prev.shifts.map(s => invoiceData.shiftsToInvoice.some(is => is.id === s.id) ? { ...s, invoiced: true } : s);
                    const updatedUsers = prev.users.map(u => u.id === invoiceData.worker.id ? { ...u, invoicing: { ...u.invoicing, startingInvoiceNumber: (parseInt(u.invoicing.startingInvoiceNumber) + 1).toString() } } : u);
                    return { ...prev, invoices: newInvoices, shifts: updatedShifts, users: updatedUsers };
                });
                alert(`Invoice for ${participant.fullName} has been queued.`); setShowPreview(false); setInvoiceData(null); navigateTo('invoicing');
            };
            const generateAndOpenPDF = () => {
                const { tableBody, grandTotal, participant, worker } = invoiceData; 
                const doc = new jsPDF();
                
                // --- PDF Header ---
                doc.setFontSize(20); doc.text("Tax Invoice", 14, 22);
                doc.setFontSize(12); doc.text(`Invoice #${worker.invoicing.startingInvoiceNumber}`, 14, 30);
                doc.text(`Date: ${new Date().toLocaleDateString('en-AU')}`, 14, 36);
                
                // --- From / To Details ---
                doc.setFontSize(10);
                doc.text("From:", 14, 50);
                doc.text(worker.personalDetails.fullName, 14, 55);
                doc.text(`ABN: ${worker.personalDetails.abn}`, 14, 60);
                doc.text(`${worker.personalDetails.street}, ${worker.personalDetails.suburb}, ${worker.personalDetails.state} ${worker.personalDetails.postcode}`, 14, 65);
                
                doc.text("Bill To:", 130, 50);
                doc.text(participant.fullName, 130, 55);
                doc.text(`NDIS: ${participant.ndisNumber}`, 130, 60);
                doc.text(participant.address, 130, 65);

                // --- Table ---
                const head = [['Date', 'Support Item', 'Item Code', 'Quantity', 'Rate', 'Total']];
                const body = tableBody.map(row => {
                    const match = row.support.match(/(.*) \((.*)\)/);
                    const itemName = match ? match[1] : row.support;
                    const itemCode = match ? match[2] : '';
                    return [row.date, itemName, itemCode, row.qty, `$${row.rate.toFixed(2)}`, row.total];
                });

                doc.autoTable({ head, body, startY: 75 });
                const finalY = doc.lastAutoTable.finalY || 100;
                
                // --- Grand Total ---
                doc.setFontSize(14); doc.text(`Total: $${grandTotal.toFixed(2)}`, 14, finalY + 15);
                
                // --- Payment Details Footer ---
                doc.setFontSize(10); doc.text("Payment Details:", 14, finalY + 30);
                doc.text(`Account Name: ${worker.invoicing.accountName}`, 14, finalY + 35);
                doc.text(`BSB: ${worker.invoicing.bsb}`, 14, finalY + 40);
                doc.text(`Account Number: ${worker.invoicing.accountNumber}`, 14, finalY + 45);
                
                doc.output('dataurlnewwindow');
            };
            if (!participant) return <Spinner />;
            return (
                <div>
                    <InvoicePreviewModal show={showPreview} onClose={() => setShowPreview(false)} onConfirm={handleConfirmInvoice} onOpen={generateAndOpenPDF} invoiceData={invoiceData} />
                    <h1 className="text-3xl font-bold text-gray-900">Invoicing for {participant.fullName}</h1>
                    <div className="card mt-6">
                        <div className="flex justify-between items-center"><h2 className="text-xl font-bold">Uninvoiced Shifts</h2><Button onClick={handleGenerateInvoice} disabled={shiftsToInvoice.length === 0}>Generate Invoice</Button></div>
                        <div className="mt-4 flow-root"><table className="min-w-full divide-y divide-gray-300"><thead><tr><th>Worker</th><th>Date</th><th>Duration</th></tr></thead><tbody>{shiftsToInvoice.length > 0 ? shiftsToInvoice.map(shift => { const worker = appData.users.find(w => w.id === shift.workerId); return (<tr key={shift.id}><td className="py-4 px-3">{worker?.fullName}</td><td>{new Date(shift.shiftDate).toLocaleDateString('en-AU')}</td><td>{shift.durationHours} hrs</td></tr>) }) : (<tr><td colSpan="3" className="text-center py-4 text-gray-500">No uninvoiced shifts.</td></tr>)}</tbody></table></div>
                    </div>
                </div>
            );
        };
        const Settings = () => {
            const { appData, setAppData } = useAppContext();
            const [fileName, setFileName] = useState('');
            const handleFileUpload = (e) => {
                const file = e.target.files[0]; if (!file) return; setFileName(file.name); const reader = new FileReader();
                reader.onload = (evt) => {
                    const bstr = evt.target.result; const wb = XLSX.read(bstr, { type: 'binary' }); const wsname = wb.SheetNames[0]; const ws = wb.Sheets[wsname]; const data = XLSX.utils.sheet_to_json(ws);
                    const parsedData = data.map(row => ({ itemNumber: row['Item Number'], itemName: row['Item Name'], unit: row['Unit'], rate: parseFloat(row['Rate (AUD)']), travelItemNumber: row['Travel Item Number'] })).filter(item => item.itemNumber && item.rate);
                    if (parsedData.length > 0) { setAppData(prev => ({...prev, priceGuide: parsedData })); alert('Price guide uploaded!'); } else { alert('Could not parse file.'); }
                }; reader.readAsBinaryString(file);
            };
            return (
                <div>
                    <h1 className="text-3xl font-bold text-gray-900 mb-6">Settings</h1>
                    <div className="card"><h2 className="text-xl font-bold text-gray-800">Upload NDIS Price Guide</h2><p className="text-sm text-gray-600 mt-2">Upload a CSV or Excel file.</p><div className="mt-4"><label className="w-full flex items-center px-4 py-2 bg-white text-blue-500 rounded-lg shadow-lg tracking-wide uppercase border border-blue-500 cursor-pointer hover:bg-blue-500 hover:text-white"><svg className="w-6 h-6 mr-2" fill="currentColor" viewBox="0 0 20 20"><path d="M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4 4-4-4h3v-3h2v3z" /></svg><span className="text-sm leading-normal">{fileName || 'Select a file'}</span><input type='file' className="hidden" onChange={handleFileUpload} accept=".csv, .xlsx" /></label></div></div>
                    <div className="card mt-6"><h2 className="text-xl font-bold text-gray-800">Current Price Guide</h2><div className="mt-4 flow-root"><table className="min-w-full divide-y divide-gray-300"><thead><tr><th>Item Number</th><th>Item Name</th><th>Rate</th></tr></thead><tbody>{appData.priceGuide.map(item => (<tr key={item.itemNumber}><td className="py-4 px-3">{item.itemNumber}</td><td>{item.itemName}</td><td>${item.rate.toFixed(2)}</td></tr>))}</tbody></table></div></div>
                </div>
            );
        };
        const UserProfile = () => {
            const { appData, activeId } = useAppContext();
            const profileUser = appData.users.find(u => u.id === activeId);
            if (!profileUser) return <p>User not found.</p>;
            return (
                <div>
                    <h1 className="text-3xl font-bold text-gray-900 mb-6">Profile: {profileUser.fullName}</h1>
                    <div className="card">
                        <div className="mt-4 border-t border-gray-200">
                            {profileUser.role === 'admin' && <dl className="divide-y"><DetailItem label="Full Name" value={profileUser.fullName} /><DetailItem label="Email" value={profileUser.email} /></dl>}
                            {profileUser.role === 'worker' && profileUser.personalDetails && <dl className="divide-y"><DetailItem label="Full Name" value={profileUser.personalDetails.fullName} /><DetailItem label="Email" value={profileUser.email} /><DetailItem label="ABN" value={profileUser.personalDetails.abn} /></dl>}
                            {profileUser.role === 'participant' && profileUser.billingDetails && <dl className="divide-y"><DetailItem label="Full Name" value={profileUser.fullName} /><DetailItem label="NDIS Number" value={profileUser.ndisNumber} /><DetailItem label="Billing Email" value={profileUser.billingDetails.managerEmail} /></dl>}
                        </div>
                    </div>
                </div>
            );
        };
        const MyProfile = () => {
            const { user, updateUser, logout } = useAppContext();
            const [isEditing, setIsEditing] = useState(false);
            const handleSave = (updatedData) => { updateUser(updatedData); setIsEditing(false); alert('Profile updated!'); };
            return (
                <div>{isEditing && <EditProfileModal user={user} onSave={handleSave} onClose={() => setIsEditing(false)} />}<h1 className="text-3xl font-bold text-gray-900 mb-6">My Profile</h1><div className="card"><div className="flex justify-between items-center"><h2 className="text-xl font-bold">My Details</h2><Button onClick={() => setIsEditing(true)} variant="secondary">Edit</Button></div><div className="mt-4 border-t">{user.role === 'worker' && user.personalDetails && <dl className="divide-y"><DetailItem label="Full Name" value={user.personalDetails.fullName} /><DetailItem label="Email" value={user.email} /><DetailItem label="ABN" value={user.personalDetails.abn} /></dl>}{user.role === 'participant' && user.billingDetails && <dl className="divide-y"><DetailItem label="Full Name" value={user.fullName} /><DetailItem label="NDIS Number" value={user.ndisNumber} /><DetailItem label="Billing Email" value={user.billingDetails.managerEmail} /></dl>}</div></div></div>
            );
        };
        const EditProfileModal = ({ user, onSave, onClose }) => {
            const [formData, setFormData] = useState(user);
            const handleChange = (e) => { const { name, value } = e.target; const [section, field] = name.split('.'); if (field) { setFormData(prev => ({ ...prev, [section]: { ...prev[section], [field]: value } })); } else { setFormData(prev => ({ ...prev, [name]: value })); } };
            const handleSubmit = (e) => { e.preventDefault(); onSave(formData); };
            return (
                <Modal show={true} onClose={onClose} title="Edit Profile">
                    <form onSubmit={handleSubmit} className="space-y-4">
                        {user.role === 'worker' && user.personalDetails && <><Input id="pd.fullName" name="personalDetails.fullName" label="Full Name" value={formData.personalDetails.fullName} onChange={handleChange} /></>}
                        {user.role === 'participant' && <><Input id="name" name="fullName" label="Full Name" value={formData.fullName} onChange={handleChange} /></>}
                        <div className="flex justify-end space-x-3 pt-4"><Button onClick={onClose} variant="secondary">Cancel</Button><Button type="submit">Save Changes</Button></div>
                    </form>
                </Modal>
            );
        };
        const LogShift = () => {
            const { navigateTo, user, appData, setAppData } = useAppContext();
            const [shiftData, setShiftData] = useState({ participantId: '', shiftDate: '', startTime: '', endTime: '', notes: '', supportItemId: appData.priceGuide.find(i=>i.unit==='Hour')?.itemNumber || '', isTravelClaimed: false, startOdometer: '', endOdometer: '', });
            const handleChange = (e) => { const { name, value, type, checked } = e.target; setShiftData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value })); };
            const handleSubmit = (e) => {
                e.preventDefault();
                const startDateTime = new Date(`${shiftData.shiftDate}T${shiftData.startTime}`);
                const endDateTime = new Date(`${shiftData.shiftDate}T${shiftData.endTime}`);
                const durationHours = (endDateTime - startDateTime) / 3600000;
                const participant = appData.users.find(p => p.id === shiftData.participantId);
                const newShift = { id: `shift-${Date.now()}`, workerId: user.id, participantId: shiftData.participantId, participantName: participant.fullName, shiftDate: shiftData.shiftDate, startTime: shiftData.startTime, endTime: shiftData.endTime, notes: shiftData.notes, durationHours: durationHours.toFixed(2), supportItemId: shiftData.supportItemId, isTravelClaimed: shiftData.isTravelClaimed, travelKms: shiftData.isTravelClaimed ? (shiftData.endOdometer - shiftData.startOdometer) : 0, invoiced: false, };
                setAppData(prev => ({ ...prev, shifts: [...prev.shifts, newShift] }));
                alert('Shift logged successfully!');
                navigateTo('overview');
            };
            return (
                <div><h1 className="text-3xl font-bold text-gray-900 mb-2">Log Shift</h1><form onSubmit={handleSubmit} className="card space-y-6"><div><label htmlFor="participantId" className="block text-sm font-medium text-gray-700">Participant</label><select id="participantId" name="participantId" value={shiftData.participantId} onChange={handleChange} required className="mt-1 block w-full rounded-md"><option value="">Select a participant</option>{appData.users.filter(u => u.role === 'participant').map(p => <option key={p.id} value={p.id}>{p.fullName}</option>)}</select></div><Input id="shiftDate" name="shiftDate" type="date" label="Shift Date" value={shiftData.shiftDate} onChange={handleChange} required /><div className="grid grid-cols-1 md:grid-cols-2 gap-6"><Input id="startTime" name="startTime" type="time" label="Start Time" value={shiftData.startTime} onChange={handleChange} required /><Input id="endTime" name="endTime" type="time" label="End Time" value={shiftData.endTime} onChange={handleChange} required /></div><div><label htmlFor="supportItemId" className="block text-sm font-medium text-gray-700">Support Delivered</label><select id="supportItemId" name="supportItemId" value={shiftData.supportItemId} onChange={handleChange} className="mt-1 block w-full rounded-md">{appData.priceGuide.filter(item => item.unit === 'Hour').map(item => <option key={item.itemNumber} value={item.itemNumber}>{item.itemName} - ${item.rate}/hr</option>)}</select></div><div><label htmlFor="notes" className="block text-sm font-medium text-gray-700">Shift Notes</label><textarea id="notes" name="notes" rows="3" value={shiftData.notes} onChange={handleChange} className="mt-1 block w-full rounded-md"></textarea></div><div className="flex justify-end space-x-3"><Button onClick={() => navigateTo('overview')} variant="secondary">Cancel</Button><Button type="submit">Log Shift</Button></div></form></div>
            );
        };

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Main App Component & Router
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const App = () => {
            const { view, navigateTo, user, logout } = useAppContext();

            const renderView = () => {
                if (user && !user.profileComplete) {
                     return (
                        <div>
                            <div className="opacity-25 pointer-events-none"><AdminOverview /></div>
                            <ProfileCompletionModal />
                        </div>
                    );
                }
                
                switch (view) {
                    case 'workers': return <WorkersDashboard />;
                    case 'participants': return <ParticipantsDashboard />;
                    case 'jobs': return <JobBoard />;
                    case 'createJob': return <CreateJob />;
                    case 'invoicing': return <InvoicingHub />;
                    case 'participantInvoicing': return <ParticipantInvoicing />;
                    case 'settings': return <Settings />;
                    case 'myProfile': return <MyProfile />;
                    case 'userProfile': return <UserProfile />;
                    case 'logShift': return <LogShift />;
                    case 'overview':
                    default:
                        if (user.role === 'admin') return <AdminOverview />;
                        if (user.role === 'worker' || user.role === 'participant') return <JobBoard />;
                        return <div>Welcome</div>;
                }
            };

            const NavLink = ({ viewName, children }) => {
                const { view: currentView } = useAppContext();
                const isActive = currentView === viewName;
                const classes = isActive ? 'bg-indigo-700 text-white rounded-md px-3 py-2 text-sm font-medium' : 'text-indigo-100 hover:bg-indigo-500 hover:bg-opacity-75 rounded-md px-3 py-2 text-sm font-medium';
                return <a href="#" onClick={(e) => { e.preventDefault(); navigateTo(viewName); }} className={classes}>{children}</a>;
            };
            
            const AdminNav = () => ( <div className="hidden md:block"><div className="ml-10 flex items-baseline space-x-4"><NavLink viewName="overview">Overview</NavLink><NavLink viewName="invoicing">Invoicing</NavLink><NavLink viewName="jobs">Jobs</NavLink><NavLink viewName="workers">Workers</NavLink><NavLink viewName="participants">Participants</NavLink><NavLink viewName="settings">Settings</NavLink></div></div> );
            const WorkerNav = () => ( <div className="hidden md:block"><div className="ml-10 flex items-baseline space-x-4"><NavLink viewName="overview">Job Board</NavLink><NavLink viewName="logShift">Log Shift</NavLink><NavLink viewName="myProfile">My Profile</NavLink></div></div> );
            const ParticipantNav = () => ( <div className="hidden md:block"><div className="ml-10 flex items-baseline space-x-4"><NavLink viewName="overview">My Jobs</NavLink><NavLink viewName="myProfile">My Profile</NavLink></div></div> );

            return (
                 <div className="min-h-screen bg-gray-100">
                    <nav className="bg-indigo-600">
                        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8"><div className="flex h-16 items-center justify-between">
                            <div className="flex items-center">
                                <div className="flex-shrink-0 text-white font-bold text-lg">NDIS App</div>
                                {user?.role === 'admin' && <AdminNav />}
                                {user?.role === 'worker' && <WorkerNav />}
                                {user?.role === 'participant' && <ParticipantNav />}
                            </div>
                            <Button onClick={logout} variant="secondary">Logout</Button>
                        </div></div>
                    </nav>
                    <main><div className="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">{renderView()}</div></main>
                </div>
            );
        };

        const Root = () => {
            const { view, user } = useAppContext();
            if (!user) {
                switch(view) {
                    case 'signup': return <SignUpScreen />;
                    case 'workerSignUp': return <WorkerSignUpForm />;
                    case 'participantSignUp': return <ParticipantSignUpForm />;
                    case 'login': default: return <LoginScreen />;
                }
            }
            if (!user.profileComplete) {
                 switch(view) {
                    case 'workerOnboarding': return <WorkerOnboarding />;
                    case 'participantOnboarding': return <ParticipantOnboarding />;
                    default: return <App />;
                }
            }
            return <App />;
        };

        const AppWrapper = () => <AppProvider><Root /></AppProvider>;
        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<AppWrapper />);

    </script>
</body>
</html>

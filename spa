<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>NDIS LiteXero - Admin SPA</title>
  <!-- Tailwind CSS CDN -->
  <script src="https://cdn.tailwindcss.com"></script>
  <!-- Inter Font -->
  <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
  <style>
    /* Custom styles for Inter font and general body styling */
    body {
      font-family: 'Inter', sans-serif;
      background-color: #f4f6f9; /* Light gray background */
      min-height: 100vh; /* Ensure body takes full viewport height */
      display: flex; /* Use flexbox for centering */
      flex-direction: column; /* Stack children vertically */
      justify-content: center; /* Center content vertically */
      align-items: center; /* Center content horizontally */
      padding: 20px; /* Add some padding around the content */
    }
    /* Ensure select elements have a consistent height with inputs */
    select {
      appearance: none; /* Remove default browser styling for select */
      background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='currentColor'%3E%3Cpath fill-rule='evenodd' d='M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z' clip-rule='evenodd'/%3E%3Csvg%3E");
      background-repeat: no-repeat;
      background-position: right 0.75rem center;
      background-size: 1.5em 1.5em;
      padding-right: 2.5rem; /* Make space for the custom arrow */
    }
    /* Style for the message box */
    .message-box {
      position: fixed;
      bottom: 20px;
      left: 50%;
      transform: translateX(-50%);
      background-color: #333;
      color: white;
      padding: 12px 20px;
      border-radius: 8px;
      font-size: 14px;
      opacity: 0;
      transition: opacity 0.3s ease-in-out;
      z-index: 1000;
      box-shadow: 0 4px 10px rgba(0,0,0,0.2);
    }
    .message-box.show {
      opacity: 1;
    }
    /* Hidden class for sections - IMPORTANT: Ensures only active tab is shown */
    .hidden-section {
      display: none !important;
    }
    /* Style for individual code items in the list */
    .code-item {
      display: flex;
      justify-content: space-between;
      align-items: center;
      padding: 8px 0;
      border-bottom: 1px dashed #eee;
    }
    .code-item:last-child {
      border-bottom: none;
    }
    /* Toggle switch styling */
    input:checked ~ .dot {
      transform: translateX(100%);
      background-color: #3B82F6; /* Blue for active */
    }
    input:checked ~ .block {
      background-color: #BFDBFE; /* Light blue for active track */
    }
    /* Message Log Overlay Styling */
    .message-log-overlay {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background-color: rgba(0, 0, 0, 0.7);
      display: flex;
      justify-content: center;
      align-items: center;
      z-index: 1001; /* Above message box */
    }
    .message-log-content-box {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      box-shadow: 0 4px 10px rgba(0,0,0,0.3);
      max-width: 600px;
      width: 90%;
      max-height: 80%;
      display: flex;
      flex-direction: column;
    }
    .message-log-scrollable {
      flex-grow: 1;
      overflow-y: auto;
      border: 1px solid #eee;
      padding: 10px;
      border-radius: 4px;
      margin-top: 10px;
      background-color: #f9f9f9;
    }
  </style>

  <!-- Firebase SDKs -->
  <script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-app.js";
    import { getAuth, onAuthStateChanged, signInWithEmailAndPassword, createUserWithEmailAndPassword, signOut } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-auth.js";
    import { getFirestore, collection, addDoc, doc, updateDoc, onSnapshot, deleteDoc, query, where, getDocs } from "https://www.gstatic.com/firebasejs/11.6.1/firebase-firestore.js";

    // Your web app's Firebase configuration
    const firebaseConfig = {
      apiKey: "AIzaSyAefBe7cgSA8FNJzR7p5NHWTsbLFrRuyKY",
      authDomain: "the-foundry-by-da.firebaseapp.com",
      projectId: "the-foundry-by-da",
      storageBucket: "the-foundry-by-da.firebasestorage.app",
      messagingSenderId: "825755098252",
      appId: "1:825755098252:web:ad6e84e40be56271fbefa9",
      measurementId: "G-72Z53Z6LNR"
    };

    // IMPORTANT: Ensure "Email/Password" sign-in provider is enabled in your Firebase project's
    // Authentication settings (Firebase Console -> Authentication -> Sign-in method).
    // Also, ensure your Firebase project's API key and authDomain are correct in the firebaseConfig above.

    // Use the projectId from the provided firebaseConfig as the appId for Firestore paths
    const appId = firebaseConfig.projectId;

    // Initialize Firebase
    const app = initializeApp(firebaseConfig);
    const db = getFirestore(app);
    const auth = getAuth(app);

    // Make Firestore functions globally accessible
    window.db = db;
    window.auth = auth;
    window.appId = appId;

    // Expose Firestore functions globally
    window.collection = collection;
    window.addDoc = addDoc;
    window.doc = doc;
    window.updateDoc = updateDoc;
    window.onSnapshot = onSnapshot;
    window.deleteDoc = deleteDoc;
    window.query = query;
    window.where = where;
    window.getDocs = getDocs;

    window.currentWorkers = []; // To store fetched workers
    window.currentParticipants = []; // To store fetched participants
    window.currentJobs = []; // To store fetched jobs
    window.currentSmsRules = []; // To store fetched SMS rules
    window.currentNdisCodes = []; // To store fetched NDIS codes from Firestore
    window.currentSmsTemplates = []; // To store custom SMS templates

    // Function to show messages
    function showMessage(message, duration = 3000) {
        const messageBox = document.getElementById("messageBox");
        if (messageBox) {
            messageBox.textContent = message;
            messageBox.classList.add('show');
            setTimeout(() => {
                messageBox.classList.remove('show');
            }, duration);
        }
    }

    // Function to show/hide sections - Made globally accessible
    window.showSection = function(sectionId) {
      // Get all sections
      const allSections = [
        document.getElementById("workerOnboardingSection"),
        document.getElementById("workerListSection"),
        document.getElementById("participantSignupSection"),
        document.getElementById("participantListSection"),
        document.getElementById("ndisCodeManagementSection"),
        document.getElementById("invoiceGeneratorSection"),
        document.getElementById("jobBuilderSection"),
        document.getElementById("smsAutomationSection"),
        document.getElementById("messageLogSection") // Include new message log section
      ];

      // Hide all sections
      allSections.forEach(section => {
        // Ensure the element exists before trying to access its classList
        if (section) {
          section.classList.add('hidden-section');
        }
      });

      // Show the selected section
      const targetSection = document.getElementById(sectionId);
      if (targetSection) {
        targetSection.classList.remove('hidden-section');
      }


      // Update button styles
      document.querySelectorAll('.nav-button').forEach(button => {
        button.classList.remove('bg-blue-500', 'hover:bg-blue-600', 'text-white');
        button.classList.add('bg-gray-300', 'hover:bg-gray-400', 'text-gray-800');
      });

      const activeButton = document.querySelector(`#nav${sectionId.replace('Section', '')}`);
      if (activeButton) {
        activeButton.classList.remove('bg-gray-300', 'hover:bg-gray-400', 'text-gray-800');
        activeButton.classList.add('bg-blue-500', 'hover:bg-blue-600', 'text-white');
      }

      // Specific actions for certain sections
      if (sectionId === 'ndisCodeManagementSection') {
        renderAvailableNdisCodes(ndisCodeSearch.value); // Initial render of available codes
        loadAssignedNdisCodes(); // Load assigned codes for the currently selected participant
      }
    };


    // Authenticate and set up auth state listener
    onAuthStateChanged(auth, async (user) => {
      const authSection = document.getElementById("authSection");
      const mainAppContainer = document.getElementById("mainAppContainer");

      if (user) {
        console.log("Authenticated with UID:", user.uid);
        // Once authenticated, start listening for data
        window.setupFirestoreListeners();
        mainAppContainer.classList.remove('hidden-section');
        authSection.classList.add('hidden-section');
        showMessage(`Welcome, ${user.email || user.uid}!`, 3000);
        // Set initial section to Worker Onboarding if main app is visible
        window.showSection('workerOnboardingSection'); // Use window.showSection
      } else {
        console.log("No user logged in.");
        mainAppContainer.classList.add('hidden-section');
        authSection.classList.remove('hidden-section');
        showMessage("Please log in or sign up.", 3000);
      }
    });

    // Expose auth functions globally for login/signup buttons
    window.signInWithEmailAndPassword = signInWithEmailAndPassword;
    window.createUserWithEmailAndPassword = createUserWithEmailAndPassword;
    window.signOut = signOut;
  </script>
</head>
<body class="p-4 sm:p-6 md:p-8">

<!-- Authentication Section -->
<div id="authSection" class="section bg-white p-6 rounded-lg shadow-md mb-6 max-w-md w-full mx-auto">
  <h2 class="text-2xl font-bold mb-6 text-center text-gray-800">NDIS LiteXero Login</h2>
  <div class="mb-4">
    <label for="authEmail" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
    <input type="email" id="authEmail" placeholder="your.email@example.com" class="input-field" />
  </div>
  <div class="mb-6">
    <label for="authPassword" class="block text-sm font-medium text-gray-700 mb-1">Password</label>
    <input type="password" id="authPassword" placeholder="********" class="input-field" />
  </div>
  <button id="loginButton" class="w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md mb-3">
    Login
  </button>
  <button id="signupButton" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
    Sign Up
  </button>
</div>

<!-- Main Application Container (hidden by default until authenticated) -->
<div id="mainAppContainer" class="max-w-4xl w-full hidden-section">
  <!-- Navigation for testing -->
  <nav class="mb-6 p-4 bg-white rounded-lg shadow-md flex flex-wrap gap-4 justify-center">
    <button id="navWorkerOnboarding" class="nav-button bg-blue-500 hover:bg-blue-600 text-white font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      Worker Onboarding
    </button>
    <button id="navWorkerList" class="nav-button bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      Worker List
    </button>
    <button id="navParticipantSignup" class="nav-button bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      Participant Sign-up
    </button>
    <button id="navParticipantList" class="nav-button bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      Participant List
    </button>
    <button id="navNdisCodeManagement" class="nav-button bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      NDIS Code Management
    </button>
    <button id="navInvoiceGenerator" class="nav-button bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      Invoice Generator
    </button>
    <button id="navJobBuilder" class="nav-button bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      Job Builder
    </button>
    <button id="navSmsAutomation" class="nav-button bg-gray-300 hover:bg-gray-400 text-gray-800 font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      SMS Automation
    </button>
    <button id="signOutButton" class="nav-button bg-red-500 hover:bg-red-600 text-white font-semibold py-2 px-4 rounded-md transition-colors duration-200">
      Sign Out
    </button>
  </nav>

  <!-- Support Worker Onboarding Section -->
  <div id="workerOnboardingSection" class="section bg-white p-6 rounded-lg shadow-md mb-6">
    <h2 class="text-xl font-semibold mb-4 text-gray-800">👷 Support Worker Onboarding (Wizard)</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
      <div>
        <label for="onboardWorkerName" class="block text-sm font-medium text-gray-700 mb-1">Name</label>
        <input type="text" id="onboardWorkerName" placeholder="e.g., Jane Doe" class="input-field" />
      </div>
      <div>
        <label for="onboardWorkerPhone" class="block text-sm font-medium text-gray-700 mb-1">Phone</label>
        <input type="tel" id="onboardWorkerPhone" placeholder="e.g., +61412345678 (E.164 format)" class="input-field" />
      </div>
      <div>
        <label for="onboardWorkerEmail" class="block text-sm font-medium text-gray-700 mb-1">Email</label>
        <input type="email" id="onboardWorkerEmail" placeholder="e.g., jane.doe@example.com" class="input-field" />
      </div>
      <div>
        <label for="onboardWorkerABN" class="block text-sm font-medium text-gray-700 mb-1">ABN</label>
        <input type="text" id="onboardWorkerABN" placeholder="e.g., 12 345 678 901" class="input-field" />
      </div>
      <div>
        <label for="onboardWorkerAddress" class="block text-sm font-medium text-gray-700 mb-1">Address</label>
        <input type="text" id="onboardWorkerAddress" placeholder="e.g., 123 Main St, Anytown NSW 2000" class="input-field" />
      </div>
      <div>
        <label for="onboardWorkerBSB" class="block text-sm font-medium text-gray-700 mb-1">BSB</label>
        <input type="text" id="onboardWorkerBSB" placeholder="e.g., 062-000" class="input-field" />
      </div>
      <div>
        <label for="onboardWorkerAccount" class="block text-sm font-medium text-gray-700 mb-1">Account #</label>
        <input type="text" id="onboardWorkerAccount" placeholder="e.g., 123456789" class="input-field" />
      </div>
      <div>
        <label for="onboardWorkerInvoiceStart" class="block text-sm font-medium text-gray-700 mb-1">Starting Invoice # (e.g., 1)</label>
        <input type="number" id="onboardWorkerInvoiceStart" placeholder="e.g., 1" class="input-field" min="1" />
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label for="onboardWorkerGST" class="block text-sm font-medium text-gray-700 mb-1">GST Registered?</label>
        <select id="onboardWorkerGST" class="input-field">
          <option value="">Select an option</option>
          <option value="Yes">Yes</option>
          <option value="No">No</option>
        </select>
      </div>
    </div>
    <button id="completeOnboarding" class="mt-6 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
      Complete Onboarding & Save
    </button>

    <div class="mt-6 border-t pt-4">
      <h3 class="text-lg font-medium text-gray-800 mb-2">Send Onboarding SMS Link</h3>
      <p class="text-sm text-gray-600 mb-2">
        Enter a worker's phone number to send them a pre-built onboarding wizard link.
      </p>
      <label for="onboardingSmsPhone" class="block text-sm font-medium text-gray-700 mb-1">Worker Phone Number (E.164 format)</label>
      <input type="tel" id="onboardingSmsPhone" placeholder="e.g., +61412345678" class="input-field mb-3" />
      <button id="sendSimpleOnboardingSms" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        Send Onboarding SMS
      </button>
    </div>
  </div>

  <!-- Support Worker List Section -->
  <div id="workerListSection" class="section bg-white p-6 rounded-lg shadow-md mb-6 hidden-section">
    <h2 class="text-xl font-semibold mb-4 text-gray-800">👤 Support Worker List</h2>
    <div id="workerList" class="space-y-3">
      <p class="text-center text-gray-500">Loading workers...</p>
    </div>
  </div>

  <!-- Participant Sign-up Wizard Section -->
  <div id="participantSignupSection" class="section bg-white p-6 rounded-lg shadow-md mb-6 hidden-section">
    <h2 class="text-xl font-semibold mb-4 text-gray-800">🤝 Participant Sign-up (NDIS Plan Managed)</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
      <div class="col-span-1 sm:col-span-2">
        <label for="participantFullName" class="block text-sm font-medium text-gray-700 mb-1">Participant Full Name</label>
        <input type="text" id="participantFullName" placeholder="e.g., Alex Johnson" class="input-field" />
      </div>
      <div>
        <label for="participantNDISNumber" class="block text-sm font-medium text-gray-700 mb-1">NDIS Number</label>
        <input type="text" id="participantNDISNumber" placeholder="e.g., 430 123 456" class="input-field" />
      </div>
      <div>
        <label for="participantEmail" class="block text-sm font-medium text-gray-700 mb-1">Participant Email</label>
        <input type="email" id="participantEmail" placeholder="e.g., alex.j@example.com" class="input-field" />
      </div>
      <div>
        <label for="participantPhone" class="block text-sm font-medium text-gray-700 mb-1">Participant Phone (Optional)</label>
        <input type="tel" id="participantPhone" placeholder="e.g., +61412345678 (E.164 format)" class="input-field" />
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label for="participantAddress" class="block text-sm font-medium text-gray-700 mb-1">Participant Address</label>
        <input type="text" id="participantAddress" placeholder="e.g., 456 Oak Ave, Suburb VIC 3000" class="input-field" />
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label class="block text-sm font-medium text-gray-700 mb-1">Payment Type</label>
        <select id="participantPaymentType" class="input-field">
          <option value="">Select Payment Type</option>
          <option value="Plan Managed">Plan Managed</option>
          <option value="Self Managed">Self Managed</option>
          <option value="NDIA Managed">NDIA Managed</option>
        </select>
      </div>
      <div class="col-span-1 sm:col-span-2">
        <h3 class="text-lg font-medium text-gray-800 mt-4 mb-2">Plan Manager Details (if Plan Managed)</h3>
      </div>
      <div>
        <label for="planManagerName" class="block text-sm font-medium text-gray-700 mb-1">Plan Manager Name</label>
        <input type="text" id="planManagerName" placeholder="e.g., NDIS Solutions Pty Ltd" class="input-field" />
      </div>
      <div>
        <label for="planManagerEmail" class="block text-sm font-medium text-gray-700 mb-1">Plan Manager Email</label>
        <input type="email" id="planManagerEmail" placeholder="e.g., claims@ndissolutions.com.au" class="input-field" />
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label for="planManagerPhone" class="block text-sm font-medium text-gray-700 mb-1">Plan Manager Phone (Optional)</label>
        <input type="tel" id="planManagerPhone" placeholder="e.g., 1300 123 456" class="input-field" />
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label for="participantNotes" class="block text-sm font-medium text-gray-700 mb-1">Additional Notes (e.g., specific support categories, funding details)</label>
        <textarea id="participantNotes" placeholder="Any other relevant details for invoicing or support" class="input-field h-24 resize-y"></textarea>
      </div>
    </div>
    <button id="completeParticipantSignup" class="mt-6 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
      Complete Participant Sign-up & Save
    </button>
  </div>

  <!-- Participant List Section -->
  <div id="participantListSection" class="section bg-white p-6 rounded-lg shadow-md mb-6 hidden-section">
    <h2 class="text-xl font-semibold mb-4 text-gray-800">🧍 Participant List</h2>
    <div id="participantList" class="space-y-3">
      <p class="text-center text-gray-500">Loading participants...</p>
    </div>
  </div>

  <!-- NDIS Code Management Section -->
  <div id="ndisCodeManagementSection" class="section bg-white p-6 rounded-lg shadow-md mb-6 hidden-section">
    <h2 class="text-xl font-semibold mb-4 text-gray-800">🏷️ NDIS Code Management</h2>

    <div class="mb-6 border-b pb-4">
      <h3 class="text-lg font-medium text-gray-800 mb-2">Upload NDIS Codes (CSV)</h3>
      <p class="text-sm text-gray-600 mb-2">Upload a CSV file with 'code', 'description', and 'rate' columns.</p>
      <input type="file" id="ndisCodeCsvUpload" accept=".csv" class="input-field mb-3" />
      <button id="uploadNdisCodesButton" class="w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        Upload Codes
      </button>
    </div>

    <h3 class="text-lg font-medium text-gray-800 mt-6 mb-2">Assign NDIS Codes to Participant</h3>
    <div class="mb-4">
      <label for="selectParticipantForCodes" class="block text-sm font-medium text-gray-700 mb-1">Select Participant</label>
      <select id="selectParticipantForCodes" class="input-field">
        <option value="">-- Select a Participant --</option>
      </select>
    </div>

    <h3 class="text-lg font-medium text-gray-800 mt-6 mb-2">Available NDIS Support Items</h3>
    <input type="text" id="ndisCodeSearch" placeholder="Search by code or description..." class="input-field mb-4" />
    <div id="availableNdisCodes" class="h-64 overflow-y-auto border border-gray-200 rounded-md p-3 bg-gray-50">
      <p class="text-center text-gray-500">Upload codes or select a participant to load codes.</p>
    </div>

    <h3 class="text-lg font-medium text-gray-800 mt-6 mb-2">Assigned Codes for Selected Participant</h3>
    <div id="assignedNdisCodes" class="min-h-[100px] h-auto overflow-y-auto border border-gray-200 rounded-md p-3 bg-gray-50 mb-4">
      <p class="text-center text-gray-500">No codes assigned yet.</p>
    </div>

    <button id="saveAssignedCodes" class="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
      Save Assigned Codes
    </button>
  </div>

  <!-- Invoice Generator Section -->
  <div id="invoiceGeneratorSection" class="section bg-white p-6 rounded-lg shadow-md mb-6 hidden-section">
    <h2 class="text-xl font-semibold mb-4 text-gray-800">🧾 Invoice Generator</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
      <div>
        <label for="invoiceWorkerSelect" class="block text-sm font-medium text-gray-700 mb-1">Select Worker</label>
        <select id="invoiceWorkerSelect" class="input-field">
          <option value="">-- Select a Worker --</option>
        </select>
      </div>
      <div>
        <label for="invoiceParticipantSelect" class="block text-sm font-medium text-gray-700 mb-1">Select Participant</label>
        <select id="invoiceParticipantSelect" class="input-field">
          <option value="">-- Select a Participant --</option>
        </select>
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label for="invoiceJobSelect" class="block text-sm font-medium text-gray-700 mb-1">Select Job (Optional)</label>
        <select id="invoiceJobSelect" class="input-field">
          <option value="">-- Select a Job (or enter details below) --</option>
        </select>
      </div>
      <div class="col-span-1 sm:col-span-2">
        <h3 class="text-lg font-medium text-gray-800 mt-4 mb-2">Manual Job Details (if no job selected)</h3>
      </div>
      <div>
        <label for="invoiceSupportCode" class="block text-sm font-medium text-gray-700 mb-1">Support Code</label>
        <input type="text" id="invoiceSupportCode" placeholder="e.g., 01_011_0107_1_1" class="input-field" />
      </div>
      <div>
        <label for="invoiceHourlyRate" class="block text-sm font-medium text-gray-700 mb-1">Hourly Rate ($)</label>
        <input type="number" id="invoiceHourlyRate" placeholder="e.g., 62.17" class="input-field" />
      </div>
      <div>
        <label for="invoiceHoursWorked" class="block text-sm font-medium text-gray-700 mb-1">Hours Worked</label>
        <input type="number" id="invoiceHoursWorked" placeholder="e.g., 3.5" class="input-field" />
      </div>
      <div>
        <label for="invoiceJobDate" class="block text-sm font-medium text-gray-700 mb-1">Job Date</label>
        <input type="date" id="invoiceJobDate" class="input-field" />
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label for="invoiceJobNotes" class="block text-sm font-medium text-gray-700 mb-1">Job Notes</label>
        <textarea id="invoiceJobNotes" placeholder="Brief description of services provided" class="input-field h-24 resize-y"></textarea>
      </div>
    </div>

    <div class="mt-6 mb-4">
      <h3 class="text-lg font-medium text-gray-800 mb-2">Email Settings</h3>
      <label for="invoiceRecipientEmail" class="block text-sm font-medium text-gray-700 mb-1">Recipient Email (defaults to Participant/Plan Manager)</label>
      <input type="email" id="invoiceRecipientEmail" placeholder="e.g., claims@example.com" class="input-field mb-3" />
      <label for="invoiceEmailSubject" class="block text-sm font-medium text-gray-700 mb-1">Email Subject</label>
      <input type="text" id="invoiceEmailSubject" placeholder="NDIS Invoice for [Participant Name]" class="input-field mb-3" />
      <label for="invoiceEmailBody" class="block text-sm font-medium text-gray-700 mb-1">Custom Email Body</label>
      <textarea id="invoiceEmailBody" placeholder="Hi [Recipient Name],\n\nPlease find attached the invoice for services provided.\n\nRegards,\n[Your Name]" class="input-field h-32 resize-y"></textarea>
    </div>

    <div class="flex items-center justify-between mb-4">
      <label for="invoiceAutomationToggle" class="flex items-center cursor-pointer">
        <div class="relative">
          <input type="checkbox" id="invoiceAutomationToggle" class="sr-only" />
          <div class="block bg-gray-600 w-14 h-8 rounded-full"></div>
          <div class="dot absolute left-1 top-1 bg-white w-6 h-6 rounded-full transition"></div>
        </div>
        <div class="ml-3 text-gray-700 font-medium">
          Enable Invoice Automation (after first invoice)
        </div>
      </label>
    </div>

    <div class="flex flex-col sm:flex-row gap-4 mt-6">
      <button id="generateInvoiceButton" class="w-full sm:w-1/2 bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        Generate Invoice Preview
      </button>
      <button id="sendInvoiceButton" class="w-full sm:w-1/2 bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        Send Invoice Email (via Extension)
      </button>
      <button id="sendMockInvoiceButton" class="w-full sm:w-1/2 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        DEV: Send Mock Invoice
      </button>
    </div>
    <pre id="invoiceOutput" class="bg-blue-50 text-blue-900 p-4 rounded-md overflow-auto text-sm leading-relaxed shadow-inner border border-blue-200 mt-6 min-h-[200px]">Select a worker, participant, and job (or enter manual details) to preview invoice.</pre>
    <p class="text-sm text-gray-600 mt-2">
      * The invoice preview above is a text representation. The actual PDF is generated by your Firebase email extension.
    </p>
  </div>

  <!-- Participant Job Builder Section -->
  <div id="jobBuilderSection" class="section bg-white p-6 rounded-lg shadow-md mb-6 hidden-section">
    <h2 class="text-xl font-semibold mb-4 text-gray-800">📋 Create New Job</h2>
    <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
      <div class="col-span-1 sm:col-span-2">
        <label for="jobTitle" class="block text-sm font-medium text-gray-700 mb-1">Job Title</label>
        <input type="text" id="jobTitle" placeholder="e.g., Weekend Community Access" class="input-field" />
      </div>
      <div>
        <label for="jobDate" class="block text-sm font-medium text-gray-700 mb-1">Job Date</label>
        <input type="date" id="jobDate" class="input-field" />
      </div>
      <div class="grid grid-cols-2 gap-4">
        <div>
          <label for="jobStartTime" class="block text-sm font-medium text-gray-700 mb-1">Start Time (Optional)</label>
          <input type="time" id="jobStartTime" class="input-field" />
        </div>
        <div>
          <label for="jobEndTime" class="block text-sm font-medium text-gray-700 mb-1">End Time (Optional)</label>
          <input type="time" id="jobEndTime" class="input-field" />
        </div>
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label for="jobLocation" class="block text-sm font-medium text-gray-700 mb-1">Location of Job</label>
        <input type="text" id="jobLocation" placeholder="e.g., Local park, Client's home" class="input-field" />
      </div>
      <div>
        <label for="jobWorkerSelect" class="block text-sm font-medium text-gray-700 mb-1">Assign Worker</label>
        <select id="jobWorkerSelect" class="input-field">
          <option value="">-- Select a Worker --</option>
        </select>
      </div>
      <div>
        <label for="jobParticipantSelect" class="block text-sm font-medium text-gray-700 mb-1">Assign Participant</label>
        <select id="jobParticipantSelect" class="input-field">
          <option value="">-- Select a Participant --</option>
        </select>
      </div>
      <div class="col-span-1 sm:col-span-2">
        <label for="jobDetails" class="block text-sm font-medium text-gray-700 mb-1">Other Details</label>
        <textarea id="jobDetails" placeholder="e.g., specific tasks, support needs, preferences, transport required" class="input-field h-32 resize-y"></textarea>
      </div>
    </div>
    <button id="createJobButton" class="mt-6 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
      Create Job & Save
    </button>
  </div>

  <!-- SMS Automation Engine Section -->
  <div id="smsAutomationSection" class="section bg-white p-6 rounded-lg shadow-md mb-6 hidden-section">
    <h2 class="text-xl font-semibold mb-4 text-gray-800">💬 SMS Automation Engine</h2>

    <div class="mb-6 border-b pb-4">
      <h3 class="text-lg font-medium text-gray-800 mb-2">Custom SMS Templates</h3>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label for="templateName" class="block text-sm font-medium text-gray-700 mb-1">Template Name</label>
          <input type="text" id="templateName" placeholder="e.g., Shift Start Instructions" class="input-field" />
        </div>
        <div class="col-span-1 sm:col-span-2">
          <label for="templateContent" class="block text-sm font-medium text-gray-700 mb-1">Template Content</label>
          <textarea id="templateContent" placeholder="Use {workerName}, {participantName}, {jobTitle}, {jobDate}, {onboardingLink} as placeholders." class="input-field h-24 resize-y"></textarea>
        </div>
      </div>
      <button id="addTemplateButton" class="mt-4 w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        Add Custom Template
      </button>
      <div id="customTemplatesList" class="mt-4 space-y-2">
        <p class="text-center text-gray-500">No custom templates added yet.</p>
      </div>
    </div>

    <div class="mb-6">
      <h3 class="text-lg font-medium text-gray-800 mb-2">Define New Rule</h3>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label for="smsIfCondition" class="block text-sm font-medium text-gray-700 mb-1">IF SMS Contains (Keyword/Phrase)</label>
          <input type="text" id="smsIfCondition" placeholder="e.g., start km" class="input-field" />
        </div>
        <div>
          <label for="smsThenAction" class="block text-sm font-medium text-gray-700 mb-1">THEN Action (e.g., log_shift_start, log_shift_end, log_start_odo, log_end_odo)</label>
          <input type="text" id="smsThenAction" placeholder="e.g., log_start_odo" class="input-field" />
        </div>
        <div class="col-span-1 sm:col-span-2">
          <label for="smsRuleJobSelect" class="block text-sm font-medium text-gray-700 mb-1">Link to Job (Optional)</label>
          <select id="smsRuleJobSelect" class="input-field">
            <option value="">-- Select a Job to link this rule to --</option>
          </select>
        </div>
      </div>
      <button id="addSmsRuleButton" class="mt-4 w-full bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        Add Rule
      </button>
    </div>

    <div class="mb-6">
      <h3 class="text-lg font-medium text-gray-800 mb-2">Current SMS Rules</h3>
      <div id="smsRulesList" class="min-h-[100px] h-auto overflow-y-auto border border-gray-200 rounded-md p-3 bg-gray-50">
        <p class="text-center text-gray-500">No rules defined yet.</p>
      </div>
    </div>

    <div class="mb-6 border-t pt-4 mt-4">
      <h3 class="text-lg font-medium text-gray-800 mb-2">Send Outbound SMS</h3>
      <div class="grid grid-cols-1 sm:grid-cols-2 gap-4">
        <div>
          <label for="outboundSmsRecipientType" class="block text-sm font-medium text-gray-700 mb-1">Recipient Type</label>
          <select id="outboundSmsRecipientType" class="input-field">
            <option value="none">-- Select Recipient Type --</option>
            <option value="worker">Worker</option>
            <option value="participant">Participant</option>
            <option value="custom">Custom Number</option>
          </select>
        </div>
        <div>
          <label for="outboundSmsRecipientSelect" class="block text-sm font-medium text-gray-700 mb-1">Select Recipient</label>
          <select id="outboundSmsRecipientSelect" class="input-field" disabled>
            <option value="">-- Select from list --</option>
          </select>
        </div>
        <div class="col-span-1 sm:col-span-2">
          <label for="outboundSmsCustomNumber" class="block text-sm font-medium text-gray-700 mb-1">Custom Phone Number (E.164 format)</label>
          <input type="tel" id="outboundSmsCustomNumber" placeholder="e.g., +61412345678" class="input-field" disabled />
        </div>
        <div class="col-span-1 sm:col-span-2">
          <label for="outboundSmsTemplateDropdown" class="block text-sm font-medium text-gray-700 mb-1">SMS Template</label>
          <select id="outboundSmsTemplateDropdown" class="input-field">
            <option value="none">-- Select a Template (Optional) --</option>
            <!-- Custom templates will be loaded here -->
          </select>
        </div>
        <div class="col-span-1 sm:col-span-2">
          <label for="outboundSmsBody" class="block text-sm font-medium text-gray-700 mb-1">Message Content</label>
          <textarea id="outboundSmsBody" placeholder="Type your message here..." class="input-field h-24 resize-y"></textarea>
        </div>
      </div>
      <button id="sendOutboundSmsButton" class="mt-4 w-full bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        Send SMS
      </button>
    </div>

    <div class="mb-6 border-t pt-4 mt-4">
      <h3 class="text-lg font-medium text-gray-800 mb-2">Test Inbound SMS</h3>
      <p class="text-sm text-gray-600 mb-2">
        This will write a test inbound message to Firestore, triggering your rules.
      </p>
      <label for="testInboundSmsFrom" class="block text-sm font-medium text-gray-700 mb-1">From Phone Number (e.164 format, e.g., +61412345678)</label>
      <input type="tel" id="testInboundSmsFrom" placeholder="Sender's phone number (E.164)" class="input-field mb-3" />
      <label for="testInboundSmsContent" class="block text-sm font-medium text-gray-700 mb-1">Message Content</label>
      <input type="text" id="testInboundSmsContent" placeholder="Type a message to test..." class="input-field mb-4" />
      <button id="sendTestInboundSmsButton" class="w-full bg-purple-600 hover:bg-purple-700 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
        Send Test Inbound SMS
      </button>
      <div id="smsTriggerLog" class="bg-yellow-50 text-yellow-900 p-4 rounded-md overflow-auto text-sm leading-relaxed shadow-inner border border-yellow-200 mt-4 min-h-[80px]">
        <p class="text-center text-gray-500">Simulated SMS trigger log will appear here.</p>
      </div>
    </div>
  </div>
</div>

<!-- Message box for user feedback -->
<div id="messageBox" class="message-box"></div>

<!-- Message Log Overlay -->
<div id="messageLogSection" class="message-log-overlay hidden-section">
  <div class="message-log-content-box">
    <h2 id="messageLogTitle" class="text-xl font-semibold mb-3 text-gray-800">Message Log</h2>
    <div id="messageLogContent" class="message-log-scrollable">
      <p class="text-center text-gray-500">Loading messages...</p>
    </div>
    <button id="closeMessageLog" class="mt-4 bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded-md transition-colors duration-200 ease-in-out shadow-sm hover:shadow-md">
      Close Log
    </button>
  </div>
</div>

<script type="module">
  // Ensure Firebase variables are accessible globally after module import
  const db = window.db;
  const auth = window.auth;
  const appId = window.appId;

  // --- Global State Variables (populated by Firestore listeners) ---
  window.currentWorkers = [];
  window.currentParticipants = [];
  window.currentJobs = [];
  window.currentSmsRules = [];
  window.currentNdisCodes = []; // To store fetched NDIS codes from Firestore
  window.currentSmsTemplates = []; // To store custom SMS templates

  // Global variable to track if we are editing a participant
  let editingParticipantId = null;
  let editingWorkerId = null;

  // --- DOM Elements ---
  // Auth Section
  const authSection = document.getElementById("authSection");
  const authEmail = document.getElementById("authEmail");
  const authPassword = document.getElementById("authPassword");
  const loginButton = document.getElementById("loginButton");
  const signupButton = document.getElementById("signupButton");

  // Main App Container
  const mainAppContainer = document.getElementById("mainAppContainer");

  // Navigation
  const navWorkerOnboarding = document.getElementById("navWorkerOnboarding");
  const navWorkerList = document.getElementById("navWorkerList");
  const navParticipantSignup = document.getElementById("navParticipantSignup");
  const navParticipantList = document.getElementById("navParticipantList");
  const navNdisCodeManagement = document.getElementById("navNdisCodeManagement");
  const navInvoiceGenerator = document.getElementById("navInvoiceGenerator");
  const navJobBuilder = document.getElementById("navJobBuilder");
  const navSmsAutomation = document.getElementById("navSmsAutomation");
  const signOutButton = document.getElementById("signOutButton");

  // Sections
  const workerOnboardingSection = document.getElementById("workerOnboardingSection");
  const workerListSection = document.getElementById("workerListSection");
  const participantSignupSection = document.getElementById("participantSignupSection");
  const participantListSection = document.getElementById("participantListSection");
  const ndisCodeManagementSection = document.getElementById("ndisCodeManagementSection");
  const invoiceGeneratorSection = document.getElementById("invoiceGeneratorSection");
  const jobBuilderSection = document.getElementById("jobBuilderSection");
  const smsAutomationSection = document.getElementById("smsAutomationSection");
  const messageLogSection = document.getElementById("messageLogSection"); // New message log section

  // Worker Onboarding
  const onboardWorkerName = document.getElementById("onboardWorkerName");
  const onboardWorkerPhone = document.getElementById("onboardWorkerPhone");
  const onboardWorkerEmail = document.getElementById("onboardWorkerEmail");
  const onboardWorkerABN = document.getElementById("onboardWorkerABN");
  const onboardWorkerAddress = document.getElementById("onboardWorkerAddress");
  const onboardWorkerBSB = document.getElementById("onboardWorkerBSB");
  const onboardWorkerAccount = document.getElementById("onboardWorkerAccount");
  const onboardWorkerInvoiceStart = document.getElementById("onboardWorkerInvoiceStart");
  const onboardWorkerGST = document.getElementById("onboardWorkerGST");
  const completeOnboardingButton = document.getElementById("completeOnboarding");
  const sendOnboardingSmsButton = document.getElementById("sendOnboardingSms");

  // Worker List
  const workerListDiv = document.getElementById("workerList");

  // Participant Sign-up
  const participantFullName = document.getElementById("participantFullName");
  const participantNDISNumber = document.getElementById("participantNDISNumber");
  const participantEmail = document.getElementById("participantEmail");
  const participantPhone = document.getElementById("participantPhone"); // New participant phone
  const participantAddress = document.getElementById("participantAddress");
  const participantPaymentType = document.getElementById("participantPaymentType");
  const planManagerName = document.getElementById("planManagerName");
  const planManagerEmail = document.getElementById("planManagerEmail");
  const planManagerPhone = document.getElementById("planManagerPhone");
  const participantNotes = document.getElementById("participantNotes");
  const completeParticipantSignup = document.getElementById("completeParticipantSignup");

  // Participant List
  const participantListDiv = document.getElementById("participantList");

  // NDIS Code Management
  const ndisCodeCsvUpload = document.getElementById("ndisCodeCsvUpload");
  const uploadNdisCodesButton = document.getElementById("uploadNdisCodesButton");
  const selectParticipantForCodes = document.getElementById("selectParticipantForCodes");
  const ndisCodeSearch = document.getElementById("ndisCodeSearch");
  const availableNdisCodesDiv = document.getElementById("availableNdisCodes");
  const assignedNdisCodesDiv = document.getElementById("assignedNdisCodes");
  const saveAssignedCodesButton = document.getElementById("saveAssignedCodes");

  // Invoice Generator
  const invoiceWorkerSelect = document.getElementById("invoiceWorkerSelect");
  const invoiceParticipantSelect = document.getElementById("invoiceParticipantSelect");
  const invoiceJobSelect = document.getElementById("invoiceJobSelect");
  const invoiceSupportCode = document.getElementById("invoiceSupportCode");
  const invoiceHourlyRate = document.getElementById("invoiceHourlyRate");
  const invoiceHoursWorked = document.getElementById("invoiceHoursWorked");
  const invoiceJobDate = document.getElementById("invoiceJobDate");
  const invoiceJobNotes = document.getElementById("invoiceJobNotes");
  const invoiceRecipientEmail = document.getElementById("invoiceRecipientEmail");
  const invoiceEmailSubject = document.getElementById("invoiceEmailSubject");
  const invoiceEmailBody = document.getElementById("invoiceEmailBody");
  const invoiceAutomationToggle = document.getElementById("invoiceAutomationToggle");
  const generateInvoiceButton = document.getElementById("generateInvoiceButton");
  const sendInvoiceButton = document.getElementById("sendInvoiceButton");
  const sendMockInvoiceButton = document.getElementById("sendMockInvoiceButton"); // New DEV button
  const invoiceOutput = document.getElementById("invoiceOutput");

  // Job Builder
  const jobTitle = document.getElementById("jobTitle");
  const jobDate = document.getElementById("jobDate");
  const jobStartTime = document.getElementById("jobStartTime");
  const jobEndTime = document.getElementById("jobEndTime");
  const jobLocation = document.getElementById("jobLocation");
  const jobWorkerSelect = document.getElementById("jobWorkerSelect");
  const jobParticipantSelect = document.getElementById("jobParticipantSelect");
  const jobDetails = document.getElementById("jobDetails");
  const createJobButton = document.getElementById("createJobButton");

  // SMS Automation
  const smsIfCondition = document.getElementById("smsIfCondition");
  const smsThenAction = document.getElementById("smsThenAction");
  const smsRuleJobSelect = document.getElementById("smsRuleJobSelect");
  const addSmsRuleButton = document.getElementById("addSmsRuleButton");
  const smsRulesListDiv = document.getElementById("smsRulesList");
  
  // Custom SMS Templates UI elements
  const templateName = document.getElementById("templateName");
  const templateContent = document.getElementById("templateContent");
  const addTemplateButton = document.getElementById("addTemplateButton");
  const customTemplatesList = document.getElementById("customTemplatesList");

  // Outbound SMS UI elements
  const outboundSmsRecipientType = document.getElementById("outboundSmsRecipientType");
  const outboundSmsRecipientSelect = document.getElementById("outboundSmsRecipientSelect");
  const outboundSmsCustomNumber = document.getElementById("outboundSmsCustomNumber");
  const outboundSmsTemplateDropdown = document.getElementById("outboundSmsTemplateDropdown"); // Changed ID
  const outboundSmsBody = document.getElementById("outboundSmsBody");
  const sendOutboundSmsButton = document.getElementById("sendOutboundSmsButton");

  // Test Inbound SMS UI elements
  const testInboundSmsFrom = document.getElementById("testInboundSmsFrom");
  const testInboundSmsContent = document.getElementById("testInboundSmsContent");
  const sendTestInboundSmsButton = document.getElementById("sendTestInboundSmsButton");
  const smsTriggerLog = document.getElementById("smsTriggerLog");

  // Message Log
  const messageLogTitle = document.getElementById("messageLogTitle");
  const messageLogContent = document.getElementById("messageLogContent");
  const closeMessageLogButton = document.getElementById("closeMessageLog");

  // Message box element
  const messageBox = document.getElementById("messageBox");

  // --- Utility Functions ---

  // Function to show messages
  function showMessage(message, duration = 3000) {
        const messageBox = document.getElementById("messageBox");
        if (messageBox) {
            messageBox.textContent = message;
            messageBox.classList.add('show');
            setTimeout(() => {
                messageBox.classList.remove('show');
            }, duration);
        }
    }

    // Function to clear form fields
    function clearForm(formElements) {
        formElements.forEach(element => {
            if (element.type === 'text' || element.type === 'email' || element.type === 'tel' || element.type === 'number' || element.type === 'date' || element.type === 'time' || element.tagName === 'TEXTAREA') {
                element.value = '';
            } else if (element.tagName === 'SELECT') {
                element.selectedIndex = 0; // Select the first option
            } else if (element.type === 'checkbox') {
                element.checked = false;
            }
        });
    }

    // Helper to normalize phone numbers to E.164 format (basic)
    function normalizePhoneNumber(phone) {
        if (!phone) return '';
        // Remove all non-digit characters
        let cleaned = phone.replace(/\D/g, '');
        // Basic check for Australian mobile numbers (+614)
        if (cleaned.startsWith('0')) {
            cleaned = '61' + cleaned.substring(1);
        }
        if (!cleaned.startsWith('+')) {
            cleaned = '+' + cleaned;
        }
        return cleaned;
    }

  // --- Firestore Data Handling ---

  // Setup Firestore Real-time Listeners
  window.setupFirestoreListeners = function() {
    // Ensure auth.currentUser exists before setting up listeners
    if (!auth.currentUser) {
      console.warn("Auth user not available. Listeners will not be set up yet.");
      return;
    }
    const currentUserId = auth.currentUser.uid;
    console.log(`Setting up Firestore listeners for user: ${currentUserId} in app: ${appId}`);

    // Listen for Workers
    onSnapshot(window.collection(db, `artifacts/${appId}/users/${currentUserId}/workers`), (snapshot) => {
      window.currentWorkers = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log(`Workers updated. Count: ${window.currentWorkers.length}`, window.currentWorkers);
      renderWorkerList();
      populateWorkerSelects();
      populateOutboundSmsRecipients(); // Update outbound SMS recipient list
    }, (error) => {
      console.error("Error fetching workers:", error);
      showMessage("Error loading workers.", 3000);
    });

    // Listen for Participants
    onSnapshot(window.collection(db, `artifacts/${appId}/users/${currentUserId}/participants`), (snapshot) => {
      window.currentParticipants = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log(`Participants updated. Count: ${window.currentParticipants.length}`, window.currentParticipants);
      renderParticipantList();
      populateParticipantSelects();
      loadAssignedNdisCodes(); // Reload assigned codes when participants update
      populateOutboundSmsRecipients(); // Update outbound SMS recipient list
    }, (error) => {
      console.error("Error fetching participants:", error);
      showMessage("Error loading participants.", 3000);
    });

    // Listen for Jobs
    onSnapshot(window.collection(db, `artifacts/${appId}/users/${currentUserId}/jobs`), (snapshot) => {
      window.currentJobs = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log(`Jobs updated. Count: ${window.currentJobs.length}`, window.currentJobs);
      populateJobSelects();
    }, (error) => {
      console.error("Error fetching jobs:", error);
      showMessage("Error loading jobs.", 3000);
    });

    // Listen for SMS Rules
    onSnapshot(window.collection(db, `artifacts/${appId}/users/${currentUserId}/smsRules`), (snapshot) => {
      window.currentSmsRules = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log(`SMS Rules updated. Count: ${window.currentSmsRules.length}`, window.currentSmsRules);
      renderSmsRulesList();
    }, (error) => {
      console.error("Error fetching SMS rules:", error);
      showMessage("Error loading SMS rules.", 3000);
    });

    // Listen for NDIS Codes (from CSV upload)
    onSnapshot(window.collection(db, `artifacts/${appId}/users/${currentUserId}/ndisCodes`), (snapshot) => {
      window.currentNdisCodes = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log(`NDIS Codes updated. Count: ${window.currentNdisCodes.length}`, window.currentNdisCodes);
      renderAvailableNdisCodes(ndisCodeSearch.value);
    }, (error) => {
      console.error("Error fetching NDIS codes:", error);
      showMessage("Error loading NDIS codes.", 3000);
    });

    // Listen for Custom SMS Templates
    onSnapshot(window.collection(db, `artifacts/${appId}/users/${currentUserId}/smsTemplates`), (snapshot) => {
      window.currentSmsTemplates = snapshot.docs.map(doc => ({ id: doc.id, ...doc.data() }));
      console.log(`SMS Templates updated. Count: ${window.currentSmsTemplates.length}`, window.currentSmsTemplates);
      populateSmsTemplateDropdown();
      renderCustomTemplatesList();
    }, (error) => {
      console.error("Error fetching SMS templates:", error);
      showMessage("Error loading SMS templates.", 3000);
    });

    // Listen for all messages (inbound and outbound)
    onSnapshot(window.collection(db, `messages`), (snapshot) => {
      snapshot.docChanges().forEach(change => {
        if (change.type === "added") {
          const message = change.doc.data();
          // Process inbound messages via client-side logic
          if (message.direction === "inbound") {
            console.log("New inbound SMS detected from Firestore:", message);
            processInboundSms(message);
          }
        }
      });
    }, (error) => {
      console.error("Error listening to messages collection:", error);
    });
  };

  // --- Render Functions ---

  function renderWorkerList() {
    workerListDiv.innerHTML = '';
    if (window.currentWorkers.length === 0) {
      workerListDiv.innerHTML = '<p class="text-center text-gray-500">No support workers added yet.</p>';
      return;
    }
    window.currentWorkers.forEach(worker => {
      const workerCard = document.createElement('div');
      workerCard.className = "card bg-gray-50 p-3 rounded-md border border-gray-200 text-sm flex flex-col sm:flex-row justify-between items-start sm:items-center";
      // Format invoiceStart with INV- prefix and leading zeros
      const displayInvoiceNum = String(worker.invoiceStart || 0).padStart(3, '0');
      workerCard.innerHTML = `
        <div class="flex-grow">
          <p><strong class="font-semibold">Name:</strong> ${worker.name}</p>
          <p><strong class="font-semibold">Phone:</strong> ${worker.phone}</p>
          <p><strong class="font-semibold">Email:</strong> ${worker.email}</p>
          <p><strong class="font-semibold">ABN:</strong> ${worker.abn}</p>
          <p><strong class="font-semibold">Next Invoice #:</strong> INV-${displayInvoiceNum}</p>
          <p class="text-xs text-gray-500 mt-1">ID: ${worker.id}</p>
        </div>
        <div class="mt-2 sm:mt-0 sm:ml-4 flex flex-col sm:flex-row gap-2">
            <button data-id="${worker.id}" class="edit-worker-button bg-yellow-500 hover:bg-yellow-600 text-white text-xs px-3 py-1 rounded-md">Edit</button>
            <button data-id="${worker.id}" data-phone="${worker.phone}" data-name="${worker.name}" data-type="worker" class="view-messages-button bg-indigo-500 hover:bg-indigo-600 text-white text-xs px-3 py-1 rounded-md">View Messages</button>
        </div>
      `;
      workerListDiv.appendChild(workerCard);
    });
    attachWorkerListListeners();
  }

  function attachWorkerListListeners() {
    workerListDiv.querySelectorAll('.edit-worker-button').forEach(button => {
        button.addEventListener('click', (event) => editWorker(event.target.dataset.id));
    });
    workerListDiv.querySelectorAll('.view-messages-button').forEach(button => {
        button.addEventListener('click', (event) => viewMessageLog(event.target.dataset.type, event.target.dataset.id, event.target.dataset.phone, event.target.dataset.name));
    });
  }

  function renderParticipantList() {
    participantListDiv.innerHTML = '';
    if (window.currentParticipants.length === 0) {
      participantListDiv.innerHTML = '<p class="text-center text-gray-500">No participants signed up yet.</p>';
      return;
    }
    window.currentParticipants.forEach(participant => {
      const participantCard = document.createElement('div');
      participantCard.className = "card bg-gray-50 p-3 rounded-md border border-gray-200 text-sm flex flex-col sm:flex-row justify-between items-start sm:items-center";
      participantCard.innerHTML = `
        <div class="flex-grow">
          <p><strong class="font-semibold">Name:</strong> ${participant.fullName}</p>
          <p><strong class="font-semibold">NDIS #:</strong> ${participant.ndisNumber}</p>
          <p><strong class="font-semibold">Email:</strong> ${participant.email}</p>
          ${participant.phone ? `<p><strong class="font-semibold">Phone:</strong> ${participant.phone}</p>` : ''}
          <p><strong class="font-semibold">Payment Type:</strong> ${participant.paymentType}</p>
          ${participant.paymentType === 'Plan Managed' ? `<p><strong class="font-semibold">Plan Manager:</strong> ${participant.planManagerName}</p>` : ''}
          <p class="text-xs text-gray-500 mt-1">ID: ${participant.id}</p>
        </div>
        <div class="mt-2 sm:mt-0 sm:ml-4 flex flex-col sm:flex-row gap-2">
            <button data-id="${participant.id}" class="edit-participant-button bg-yellow-500 hover:bg-yellow-600 text-white text-xs px-3 py-1 rounded-md">Edit</button>
            <button data-id="${participant.id}" data-phone="${participant.phone}" data-name="${participant.fullName}" data-type="participant" class="view-messages-button bg-indigo-500 hover:bg-indigo-600 text-white text-xs px-3 py-1 rounded-md">View Messages</button>
        </div>
      `;
      participantListDiv.appendChild(participantCard);
    });
    attachParticipantListListeners();
  }

  function attachParticipantListListeners() {
    participantListDiv.querySelectorAll('.edit-participant-button').forEach(button => {
        button.addEventListener('click', (event) => editParticipant(event.target.dataset.id));
    });
    participantListDiv.querySelectorAll('.view-messages-button').forEach(button => {
        button.addEventListener('click', (event) => viewMessageLog(event.target.dataset.type, event.target.dataset.id, event.target.dataset.phone, event.target.dataset.name));
    });
  }

  function populateWorkerSelects() {
    // Clear existing options, keeping the first default one
    Array.from(invoiceWorkerSelect.options).forEach((option, index) => {
      if (index > 0) invoiceWorkerSelect.removeChild(option);
    });
    Array.from(jobWorkerSelect.options).forEach((option, index) => { // New job worker select
      if (index > 0) jobWorkerSelect.removeChild(option);
    });

    window.currentWorkers.forEach(worker => {
      const option1 = document.createElement('option');
      option1.value = worker.id;
      option1.textContent = worker.name;
      invoiceWorkerSelect.appendChild(option1);

      const option2 = document.createElement('option');
      option2.value = worker.id;
      option2.textContent = worker.name;
      jobWorkerSelect.appendChild(option2);
    });
  }

  function populateParticipantSelects() {
    // Clear existing options, keeping the first default one
    Array.from(selectParticipantForCodes.options).forEach((option, index) => {
      if (index > 0) selectParticipantForCodes.removeChild(option);
    });
    Array.from(invoiceParticipantSelect.options).forEach((option, index) => {
      if (index > 0) invoiceParticipantSelect.removeChild(option);
    });
    Array.from(jobParticipantSelect.options).forEach((option, index) => { // New job participant select
      if (index > 0) jobParticipantSelect.removeChild(option);
    });

    window.currentParticipants.forEach(participant => {
      const option1 = document.createElement('option');
      option1.value = participant.id;
      option1.textContent = participant.fullName;
      selectParticipantForCodes.appendChild(option1);

      const option2 = document.createElement('option');
      option2.value = participant.id;
      option2.textContent = participant.fullName;
      invoiceParticipantSelect.appendChild(option2);

      const option3 = document.createElement('option');
      option3.value = participant.id;
      option3.textContent = participant.fullName;
      jobParticipantSelect.appendChild(option3);
    });
  }

  function populateJobSelects() {
    // Clear existing options, keeping the first default one
    Array.from(invoiceJobSelect.options).forEach((option, index) => {
      if (index > 0) invoiceJobSelect.removeChild(option);
    });
    Array.from(smsRuleJobSelect.options).forEach((option, index) => { // New SMS rule job select
      if (index > 0) smsRuleJobSelect.removeChild(option);
    });

    window.currentJobs.forEach(job => {
      const participant = window.currentParticipants.find(p => p.id === job.participantId);
      const worker = window.currentWorkers.find(w => w.id === job.workerId);
      // Only show jobs that have both worker and participant linked for now
      if (participant && worker) {
        const option1 = document.createElement('option');
        option1.value = job.id;
        option1.textContent = `${job.title} (${participant.fullName} - ${worker.name} on ${job.date})`;
        invoiceJobSelect.appendChild(option1);

        const option2 = document.createElement('option');
        option2.value = job.id;
        option2.textContent = `${job.title} (${participant.fullName} - ${worker.name} on ${job.date})`;
        smsRuleJobSelect.appendChild(option2);
      }
    });
  }

  function renderAvailableNdisCodes(searchTerm = '') {
    availableNdisCodesDiv.innerHTML = '';
    const filteredCodes = window.currentNdisCodes.filter(code =>
      code.code.toLowerCase().includes(searchTerm.toLowerCase()) ||
      code.description.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (filteredCodes.length === 0) {
      availableNdisCodesDiv.innerHTML = '<p class="text-center text-gray-500">No matching codes found. Upload codes via CSV.</p>';
      return;
    }

    filteredCodes.forEach(code => {
      const codeItem = document.createElement('div');
      codeItem.className = "code-item text-gray-800";
      codeItem.innerHTML = `
        <span><strong class="font-mono text-blue-700">${code.code}</strong> - ${code.description} ($${parseFloat(code.rate).toFixed(2)})</span>
        <button data-code='${JSON.stringify(code)}' class="add-code-button bg-green-500 hover:bg-green-600 text-white text-xs px-2 py-1 rounded-md">Add</button>
      `;
      availableNdisCodesDiv.appendChild(codeItem);
    });

    // Add event listeners to "Add" buttons
    availableNdisCodesDiv.querySelectorAll('.add-code-button').forEach(button => {
      button.addEventListener('click', (event) => {
        const selectedParticipantId = selectParticipantForCodes.value;
        if (!selectedParticipantId) {
          showMessage("Please select a participant first.", 3000);
          return;
        }
        const codeToAdd = JSON.parse(event.target.dataset.code);
        const participant = window.currentParticipants.find(p => p.id === selectedParticipantId);
        if (participant) {
          if (!participant.assignedCodes) {
            participant.assignedCodes = [];
          }
          // Check if code already exists to prevent duplicates
          if (!participant.assignedCodes.some(c => c.code === codeToAdd.code)) {
            participant.assignedCodes.push(codeToAdd);
            renderAssignedNdisCodes(participant.assignedCodes);
            showMessage(`Added ${codeToAdd.code} to ${participant.fullName}. Remember to Save!`, 3000);
          } else {
            showMessage(`${codeToAdd.code} is already assigned to this participant.`, 3000);
          }
        }
      });
    });
  }

  function renderAssignedNdisCodes(assignedCodes) {
    assignedNdisCodesDiv.innerHTML = '';
    if (!assignedCodes || assignedCodes.length === 0) {
      assignedNdisCodesDiv.innerHTML = '<p class="text-center text-gray-500">No codes assigned yet.</p>';
      return;
    }
    assignedCodes.forEach(code => {
      const codeItem = document.createElement('div');
      codeItem.className = "code-item text-gray-800";
      codeItem.innerHTML = `
        <span><strong class="font-mono text-purple-700">${code.code}</strong> - ${code.description} ($${parseFloat(code.rate).toFixed(2)})</span>
        <button data-code='${JSON.stringify(code)}' class="remove-code-button bg-red-500 hover:bg-red-600 text-white text-xs px-2 py-1 rounded-md">Remove</button>
      `;
      assignedNdisCodesDiv.appendChild(codeItem);
    });

    // Add event listeners to "Remove" buttons
    assignedNdisCodesDiv.querySelectorAll('.remove-code-button').forEach(button => {
      button.addEventListener('click', (event) => {
        const selectedParticipantId = selectParticipantForCodes.value;
        if (!selectedParticipantId) return; // Should not happen if button is visible
        const codeToRemove = JSON.parse(event.target.dataset.code);
        const participant = window.currentParticipants.find(p => p.id === selectedParticipantId);
        if (participant && participant.assignedCodes) {
          participant.assignedCodes = participant.assignedCodes.filter(c => c.code !== codeToRemove.code);
          renderAssignedNdisCodes(participant.assignedCodes);
          showMessage(`Removed ${codeToRemove.code} from ${participant.fullName}. Remember to Save!`, 3000);
        }
      });
    });
  }

  function loadAssignedNdisCodes() {
    const selectedParticipantId = selectParticipantForCodes.value;
    if (selectedParticipantId) {
      const participant = window.currentParticipants.find(p => p.id === selectedParticipantId);
      if (participant) {
        renderAssignedNdisCodes(participant.assignedCodes);
      } else {
        assignedNdisCodesDiv.innerHTML = '<p class="text-center text-gray-500">Participant not found.</p>';
      }
    } else {
      assignedNdisCodesDiv.innerHTML = '<p class="text-center text-gray-500">Select a participant to view assigned codes.</p>';
    }
  }

  function renderSmsRulesList() {
    smsRulesListDiv.innerHTML = '';
    if (window.currentSmsRules.length === 0) {
      smsRulesListDiv.innerHTML = '<p class="text-center text-gray-500">No rules defined yet.</p>';
      return;
    }
    window.currentSmsRules.forEach(rule => {
      const linkedJob = rule.jobId ? window.currentJobs.find(job => job.id === rule.jobId) : null;
      const jobDisplay = linkedJob ? ` (Linked to Job: ${linkedJob.title})` : '';
      const ruleItem = document.createElement('div');
      ruleItem.className = "card bg-gray-50 p-3 rounded-md border border-gray-200 text-sm flex justify-between items-center";
      ruleItem.innerHTML = `
        <span><strong class="text-gray-700">IF</strong> "${rule.ifCondition}" &rarr; <strong class="text-gray-700">THEN</strong> <span class="font-mono text-green-700">${rule.thenAction}</span>${jobDisplay}</span>
        <button data-id="${rule.id}" class="remove-rule-button bg-red-500 hover:bg-red-600 text-white text-xs px-2 py-1 rounded-md">Remove</button>
      `;
      smsRulesListDiv.appendChild(ruleItem);
    });

    // Add event listeners to "Remove" buttons for SMS rules
    smsRulesListDiv.querySelectorAll('.remove-rule-button').forEach(button => {
      button.addEventListener('click', async (event) => {
        if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
        const ruleIdToRemove = event.target.dataset.id;
        try {
          await window.deleteDoc(window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/smsRules`, ruleIdToRemove));
          showMessage("Rule removed successfully!", 3000);
        } catch (e) {
          console.error("Error removing rule:", e);
          showMessage("Error removing rule. See console for details.", 5000);
        }
      });
    });
  }

  // --- Event Listeners ---

  // Add Tailwind classes for common input elements
  document.querySelectorAll('input, select, textarea').forEach(element => {
    element.classList.add('input-field', 'block', 'w-full', 'p-2', 'border', 'border-gray-300', 'rounded-md', 'focus:ring', 'focus:ring-blue-200', 'focus:border-blue-500', 'transition-colors', 'duration-200', 'ease-in-out');
  });

  // Auth Login
  loginButton.addEventListener("click", async () => {
    const email = authEmail.value;
    const password = authPassword.value;

    if (!email || !password) {
      showMessage("Please enter both email and password.", 3000);
      return;
    }

    try {
      await window.signInWithEmailAndPassword(auth, email, password);
      // onAuthStateChanged will handle UI update
    } catch (error) {
      console.error("Login failed:", error);
      let errorMessage = "Login failed. Please check your email and password.";
      if (error.code === 'auth/invalid-credential' || error.code === 'auth/user-not-found' || error.code === 'auth/wrong-password') {
        errorMessage = "Invalid email or password. Please try again. If you don't have an account, please Sign Up.";
      } else if (error.code === 'auth/invalid-email') {
        errorMessage = "Invalid email format. Please enter a valid email address.";
      } else if (error.code === 'auth/user-disabled') {
        errorMessage = "Your account has been disabled. Please contact support.";
      }
      showMessage(errorMessage, 5000);
    }
  });

  // Auth Sign Up
  signupButton.addEventListener("click", async () => {
    const email = authEmail.value;
    const password = authPassword.value;

    if (!email || !password) {
      showMessage("Please enter both email and password.", 3000);
      return;
    }
    if (password.length < 6) {
      showMessage("Password should be at least 6 characters.", 3000);
      return;
    }

    try {
      await window.createUserWithEmailAndPassword(auth, email, password);
      // onAuthStateChanged will handle UI update
      showMessage("Account created successfully! You are now logged in.", 3000);
    } catch (error) {
      console.error("Sign up failed:", error);
      let errorMessage = "Sign up failed. Please try again.";
      if (error.code === 'auth/email-already-in-use') {
        errorMessage = "This email is already in use. Please log in instead, or use a different email.";
      } else if (error.code === 'auth/invalid-email') {
        errorMessage = "Invalid email format. Please enter a valid email address.";
      } else if (error.code === 'auth/weak-password') {
        errorMessage = "Weak password. Please choose a stronger password (at least 6 characters).";
      }
      showMessage(errorMessage, 5000);
    }
  });

  // Sign Out
  signOutButton.addEventListener("click", async () => {
    try {
      await window.signOut(auth);
      // onAuthStateChanged will handle UI update
      showMessage("Signed out successfully.", 3000);
      // Clear auth fields after sign out
      clearForm([authEmail, authPassword]);
    } catch (error) {
      console.error("Sign out failed:", error);
      showMessage(`Sign out failed: ${error.message}`, 5000);
    }
  });

  // Edit Worker Function
  function editWorker(workerId) {
    const worker = window.currentWorkers.find(w => w.id === workerId);
    if (!worker) {
      showMessage("Worker not found for editing.", 3000);
      return;
    }
    editingWorkerId = workerId; // Set global editing flag

    // Populate form fields
    onboardWorkerName.value = worker.name || '';
    onboardWorkerPhone.value = worker.phone || '';
    onboardWorkerEmail.value = worker.email || '';
    onboardWorkerABN.value = worker.abn || '';
    onboardWorkerAddress.value = worker.address || '';
    onboardWorkerBSB.value = worker.bsb || '';
    onboardWorkerAccount.value = worker.acc || '';
    onboardWorkerInvoiceStart.value = worker.invoiceStart || 1;
    onboardWorkerGST.value = worker.gst ? 'Yes' : 'No';

    completeOnboardingButton.textContent = "Save Worker Changes";
    window.showSection('workerOnboardingSection'); // Navigate to the form
    showMessage(`Editing worker: ${worker.name}`, 3000);
  }

  // Worker Onboarding Save / Update
  completeOnboardingButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
    
    let invoiceStartNum = parseInt(onboardWorkerInvoiceStart.value);
    if (isNaN(invoiceStartNum) || invoiceStartNum < 1) {
      invoiceStartNum = 1; // Default to 1 if empty or invalid
    }

    const workerData = {
      name: onboardWorkerName.value,
      phone: normalizePhoneNumber(onboardWorkerPhone.value),
      email: onboardWorkerEmail.value,
      abn: onboardWorkerABN.value,
      address: onboardWorkerAddress.value,
      bsb: onboardWorkerBSB.value,
      acc: onboardWorkerAccount.value,
      invoiceStart: invoiceStartNum,
      gst: onboardWorkerGST.value === 'Yes'
    };

    try {
      if (editingWorkerId) {
        // Update existing worker
        const workerRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/workers`, editingWorkerId);
        await window.updateDoc(workerRef, workerData);
        console.log("Worker updated with ID:", editingWorkerId);
        showMessage("Support Worker updated successfully!", 3000);
        editingWorkerId = null; // Clear editing flag
        completeOnboardingButton.textContent = "Complete Onboarding & Save"; // Reset button text
      } else {
        // Add new worker
        const docRef = await window.addDoc(window.collection(db, `artifacts/${appId}/users/${auth.currentUser.uid}/workers`), workerData);
        console.log("Worker saved with ID:", docRef.id);
        showMessage("Support Worker saved successfully!", 3000);
      }
      clearForm([onboardWorkerName, onboardWorkerPhone, onboardWorkerEmail, onboardWorkerABN, onboardWorkerAddress, onboardWorkerBSB, onboardWorkerAccount, onboardWorkerInvoiceStart, onboardWorkerGST]);
    } catch (e) {
      console.error("Error adding worker document: ", e);
      showMessage("Error saving/updating Support Worker. See console for details.", 5000);
    }
  });

  // Send Worker Onboarding SMS Link (Simplified UI)
  document.getElementById("sendSimpleOnboardingSms").addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }

    const onboardingSmsPhoneInput = document.getElementById("onboardingSmsPhone");
    const onboardingSmsPhone = onboardingSmsPhoneInput.value.trim();
    if (!onboardingSmsPhone) {
      showMessage("Please enter a worker's phone number to send the onboarding SMS.", 5000);
      return;
    }

    const normalizedPhone = normalizePhoneNumber(onboardingSmsPhone);

    // Pre-built onboarding template content
    const onboardingMessage = `Hi there! Welcome to NDIS LiteXero. Please complete your onboarding and set up your shift and odometer tracking via SMS by visiting this link: https://your-app-domain.com/worker-onboarding-wizard?phone=${encodeURIComponent(normalizedPhone)}.`;

    try {
      await sendOutboundSms(normalizedPhone, onboardingMessage);
      showMessage(`Onboarding SMS queued to ${normalizedPhone}.`, 3000);
      onboardingSmsPhoneInput.value = ''; // Clear input
    } catch (e) {
      console.error("Error sending onboarding SMS:", e);
      showMessage("Failed to queue onboarding SMS. See console.", 5000);
    }
  });


  // Edit Participant Function
  function editParticipant(participantId) {
    const participant = window.currentParticipants.find(p => p.id === participantId);
    if (!participant) {
      showMessage("Participant not found for editing.", 3000);
      return;
    }
    editingParticipantId = participantId; // Set global editing flag

    // Populate form fields
    participantFullName.value = participant.fullName || '';
    participantNDISNumber.value = participant.ndisNumber || '';
    participantEmail.value = participant.email || '';
    participantPhone.value = participant.phone || ''; // New phone field
    participantAddress.value = participant.address || '';
    participantPaymentType.value = participant.paymentType || '';
    planManagerName.value = participant.planManagerName || '';
    planManagerEmail.value = participant.planManagerEmail || '';
    planManagerPhone.value = participant.planManagerPhone || '';
    participantNotes.value = participant.notes || '';

    completeParticipantSignup.textContent = "Save Participant Changes";
    window.showSection('participantSignupSection'); // Navigate to the form
    showMessage(`Editing participant: ${participant.fullName}`, 3000);
  }

  // Participant Sign-up / Update Save
  completeParticipantSignup.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
    
    const participantData = {
      fullName: participantFullName.value,
      ndisNumber: participantNDISNumber.value,
      email: participantEmail.value,
      phone: normalizePhoneNumber(participantPhone.value), // Normalize phone number
      address: participantAddress.value,
      paymentType: participantPaymentType.value,
      planManagerName: planManagerName.value,
      planManagerEmail: planManagerEmail.value,
      planManagerPhone: planManagerPhone.value,
      notes: participantNotes.value,
      assignedCodes: [] // Assigned codes are handled separately
    };

    try {
      if (editingParticipantId) {
        // Update existing participant
        const participantRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/participants`, editingParticipantId);
        // Merge with existing assignedCodes to avoid overwriting if not handled in form
        const existingParticipant = window.currentParticipants.find(p => p.id === editingParticipantId);
        participantData.assignedCodes = existingParticipant ? existingParticipant.assignedCodes : [];
        await window.updateDoc(participantRef, participantData);
        console.log("Participant updated with ID:", editingParticipantId);
        showMessage("Participant updated successfully!", 3000);
        editingParticipantId = null; // Clear editing flag
        completeParticipantSignup.textContent = "Complete Participant Sign-up & Save"; // Reset button text
      } else {
        // Add new participant
        const docRef = await window.addDoc(window.collection(db, `artifacts/${appId}/users/${auth.currentUser.uid}/participants`), participantData);
        console.log("Participant saved with ID:", docRef.id);
        showMessage("Participant signed up successfully!", 3000);
      }
      clearForm([participantFullName, participantNDISNumber, participantEmail, participantPhone, participantAddress, participantPaymentType, planManagerName, planManagerEmail, planManagerPhone, participantNotes]);
    } catch (e) {
      console.error("Error saving/updating participant document: ", e);
      showMessage("Error signing up/updating participant. See console for details.", 5000);
    }
  });

  // NDIS Code Management - CSV Upload
  uploadNdisCodesButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
    const file = ndisCodeCsvUpload.files[0];
    if (!file) {
      showMessage("Please select a CSV file to upload.", 3000);
      return;
    }

    const reader = new FileReader();
    reader.onload = async (e) => {
      const text = e.target.result;
      const lines = text.split('\n').filter(line => line.trim() !== '');
      if (lines.length === 0) {
        showMessage("CSV file is empty.", 3000);
        return;
      }

      const headers = lines[0].split(',').map(h => h.trim().toLowerCase());
      const expectedHeaders = ['code', 'description', 'rate'];
      if (!expectedHeaders.every(h => headers.includes(h))) {
        showMessage(`CSV headers must include: ${expectedHeaders.join(', ')}. Found: ${headers.join(', ')}`, 7000);
        return;
      }

      let uploadedCount = 0;
      const ndisCodesCollectionRef = window.collection(db, `artifacts/${appId}/users/${auth.currentUser.uid}/ndisCodes`);

      for (let i = 1; i < lines.length; i++) {
        const values = lines[i].split(',');
        if (values.length !== headers.length) {
          console.warn(`Skipping malformed row ${i + 1}: ${lines[i]}`);
          continue;
        }

        const codeData = {};
        headers.forEach((header, index) => {
          codeData[header] = values[index].trim();
        });

        // Basic validation
        if (codeData.code && codeData.description && !isNaN(parseFloat(codeData.rate))) {
          try {
            // Check if code already exists to prevent duplicates
            const q = window.query(ndisCodesCollectionRef, window.where("code", "==", codeData.code));
            const querySnapshot = await window.getDocs(q);

            if (querySnapshot.empty) {
              await window.addDoc(ndisCodesCollectionRef, {
                code: codeData.code,
                description: codeData.description,
                rate: parseFloat(codeData.rate)
              });
              uploadedCount++;
            } else {
              console.log(`NDIS Code ${codeData.code} already exists, skipping.`);
            }
          } catch (e) {
            console.error("Error adding NDIS code:", e);
          }
        } else {
          console.warn(`Skipping invalid NDIS code data: ${JSON.stringify(codeData)}`);
        }
      }
      showMessage(`Uploaded ${uploadedCount} new NDIS codes from CSV.`, 5000);
      ndisCodeCsvUpload.value = ''; // Clear file input
    };
    reader.readAsText(file);
  });

  // Assign NDIS Codes - Select Participant Change
  selectParticipantForCodes.addEventListener('change', () => {
    loadAssignedNdisCodes();
    renderAvailableNdisCodes(ndisCodeSearch.value); // Re-render available codes based on current search
  });

  // Assign NDIS Codes - Search Input
  ndisCodeSearch.addEventListener('input', () => {
    renderAvailableNdisCodes(ndisCodeSearch.value);
  });

  // Assign NDIS Codes - Save Assigned Codes
  saveAssignedCodesButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
    const selectedParticipantId = selectParticipantForCodes.value;
    if (!selectedParticipantId) {
      showMessage("Please select a participant to save codes.", 3000);
      return;
    }

    const participant = window.currentParticipants.find(p => p.id === selectedParticipantId);
    if (participant) {
      try {
        const participantRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/participants`, selectedParticipantId);
        // Ensure assignedCodes is an array before saving
        await window.updateDoc(participantRef, {
          assignedCodes: participant.assignedCodes || []
        });
        console.log(`Assigned codes updated for participant: ${selectedParticipantId}`);
        showMessage("Assigned NDIS codes saved successfully!", 3000);
      } catch (e) {
        console.error("Error updating participant codes: ", e);
        showMessage("Error saving assigned codes. See console for details.", 5000);
      }
    } else {
      showMessage("Selected participant not found.", 3000);
    }
  });

  // Job Builder - Create Job & Save
  createJobButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
    console.log("Attempting to save job for userId:", auth.currentUser.uid);

    const jobData = {
      title: jobTitle.value,
      date: jobDate.value,
      startTime: jobStartTime.value || null,
      endTime: jobEndTime.value || null,
      location: jobLocation.value,
      workerId: jobWorkerSelect.value || null, // Linked worker
      participantId: jobParticipantSelect.value || null, // Linked participant
      details: jobDetails.value,
      status: 'pending', // Initial status
      actualStartTime: null,
      actualEndTime: null,
      startKm: null,
      endKm: null
    };

    try {
      const docRef = await window.addDoc(window.collection(db, `artifacts/${appId}/users/${auth.currentUser.uid}/jobs`), jobData);
      console.log("Job saved with ID:", docRef.id);
      showMessage("Job created and saved successfully!", 3000);
      clearForm([jobTitle, jobDate, jobStartTime, jobEndTime, jobLocation, jobWorkerSelect, jobParticipantSelect, jobDetails]);
    } catch (e) {
      console.error("Error adding job document: ", e);
      showMessage("Error creating job. See console for details.", 5000);
    }
  });

  // Function to generate the invoice text (reusable for preview and email)
  function generateInvoiceText() {
    const workerId = invoiceWorkerSelect.value;
    const participantId = invoiceParticipantSelect.value;
    const jobId = invoiceJobSelect.value;

    let worker = null;
    let participant = null;
    let job = null;

    if (workerId) {
      worker = window.currentWorkers.find(w => w.id === workerId);
    }
    if (participantId) {
      participant = window.currentParticipants.find(p => p.id === participantId);
    }
    if (jobId) {
      job = window.currentJobs.find(j => j.id === jobId);
    }

    if (!worker || !participant) {
      return "Please select both a worker and a participant to generate an invoice.";
    }

    let supportCode = invoiceSupportCode.value;
    let hourlyRate = parseFloat(invoiceHourlyRate.value);
    let hours = parseFloat(invoiceHoursWorked.value);
    let jobDateVal = invoiceJobDate.value;
    let jobNotesVal = invoiceJobNotes.value;

    if (job) {
      // Use job details if a job is selected
      // Prioritize manual input if provided, otherwise use job data
      supportCode = supportCode || job.code || "N/A"; // Assuming job might have a default code
      hourlyRate = isNaN(hourlyRate) ? (parseFloat(job.rate) || 0) : hourlyRate; // Assuming job might have a rate
      hours = isNaN(hours) ? (job.actualEndTime && job.actualStartTime ? ((new Date(job.actualEndTime) - new Date(job.actualStartTime)) / (1000 * 60 * 60)).toFixed(2) : (parseFloat(job.hours) || 0)) : hours;
      jobDateVal = jobDateVal || job.date || "N/A";
      jobNotesVal = jobNotesVal || job.details || "N/A";

      // Include KM if available in job
      if (job.startKm && job.endKm) {
        jobNotesVal += `\nKilometers: ${job.startKm} - ${job.endKm} = ${job.endKm - job.startKm}km`;
      }
    }

    if (!supportCode || isNaN(hourlyRate) || isNaN(hours) || !jobDateVal) {
      return "Please ensure Support Code, Hourly Rate, Hours Worked, and Job Date are provided (either from selected job or manually).";
    }

    const total = (hourlyRate * hours).toFixed(2);
    // Format invoice number with INV- prefix and leading zeros
    const formattedInvoiceNumber = `INV-${String(worker.invoiceStart || 0).padStart(3, '0')}`;

    const invoiceContent = `
INVOICE #: ${formattedInvoiceNumber}
Issue Date: ${new Date().toISOString().split("T")[0]}

Provider Details:
  Name: ${worker.name}
  ABN: ${worker.abn}
  Address: ${worker.address}
  Email: ${worker.email}
  Bank: BSB ${worker.bsb} / Acc ${worker.acc}
  GST Registered: ${worker.gst ? 'Yes' : 'No'}

Bill To (Participant):
  Name: ${participant.fullName}
  NDIS #: ${participant.ndisNumber}
  Address: ${participant.address}
  Email: ${participant.email}
  Payment Type: ${participant.paymentType}
  ${participant.paymentType === 'Plan Managed' ? `
  Plan Manager: ${participant.planManagerName || 'N/A'}
  Manager Email: ${participant.planManagerEmail || 'N/A'}
  Manager Phone: ${participant.planManagerPhone || 'N/A'}
  ` : ''}

Service Details:
  Job Title: ${job ? job.title : 'Manual Entry'}
  Support Code: ${supportCode}
  Description: ${jobNotesVal}
  Date: ${jobDateVal}
  Hours: ${hours}
  Hourly Rate: $${hourlyRate.toFixed(2)}

Total Amount: $${total} ${worker.gst ? "(incl. GST)" : "(no GST)"}
---------------------------------------------------
    `;
    return invoiceContent.trim();
  }


  // Invoice Generator - Generate Invoice Preview
  generateInvoiceButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }

    const invoiceText = generateInvoiceText();
    invoiceOutput.textContent = invoiceText;

    // Only attempt to increment if a valid worker is selected and invoice was generated successfully
    const workerId = invoiceWorkerSelect.value;
    const worker = window.currentWorkers.find(w => w.id === workerId);

    if (worker && !invoiceText.startsWith("Please")) { // Check if it's not an error message
      try {
        // Note: The invoice number is incremented only when the invoice is *generated* for preview,
        // to reflect the "next invoice number" accurately. It's then used for sending.
        const workerRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/workers`, workerId);
        await window.updateDoc(workerRef, {
          invoiceStart: (worker.invoiceStart || 0) + 1
        });
        console.log(`Invoice number for ${worker.name} incremented to ${worker.invoiceStart + 1}`);
        showMessage(`Invoice generated. Next invoice for ${worker.name} will be INV-${String((worker.invoiceStart || 0) + 1).padStart(3, '0')}.`, 4000);
      } catch (e) {
        console.error("Error incrementing worker invoice number: ", e);
        showMessage("Error updating worker invoice number in Firestore.", 5000);
      }
    } else if (!worker) {
      showMessage("Please select a worker to generate and track invoice numbers.", 3000);
    }
  });

  // Invoice Generator - Send Invoice Email (via Extension)
  sendInvoiceButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }

    const workerId = invoiceWorkerSelect.value;
    const participantId = invoiceParticipantSelect.value;

    const worker = window.currentWorkers.find(w => w.id === workerId);
    const participant = window.currentParticipants.find(p => p.id === participantId);

    if (!worker || !participant) {
      showMessage("Please select both a worker and a participant to send an invoice.", 3000);
      return;
    }

    const invoiceText = generateInvoiceText();
    if (invoiceText.startsWith("Please")) { // Check if generateInvoiceText returned an error
      showMessage("Cannot send invoice: " + invoiceText, 5000);
      return;
    }

    let recipientEmail = invoiceRecipientEmail.value.trim();
    if (!recipientEmail) {
      recipientEmail = participant.paymentType === 'Plan Managed' && participant.planManagerEmail ? participant.planManagerEmail : participant.email;
    }

    let emailSubject = invoiceEmailSubject.value.trim();
    if (!emailSubject) {
      emailSubject = `NDIS Invoice from ${worker.name} for ${participant.fullName}`;
      if (participant.paymentType === 'Plan Managed' && participant.planManagerName) {
        emailSubject = `NDIS Invoice for ${participant.fullName} (Managed by ${participant.planManagerName})`;
      }
    }

    let emailBody = invoiceEmailBody.value.trim();
    if (!emailBody) {
      emailBody = `Hi ${participant.paymentType === 'Plan Managed' ? (participant.planManagerName || 'Plan Manager') : participant.fullName},\n\nPlease find attached the invoice for services provided by ${worker.name}.\n\nRegards,\n${auth.currentUser.email || 'Admin'}`;
    }

    // Convert invoice text to a Blob and then to Base64 for attachment
    const invoiceBlob = new Blob([invoiceText], { type: 'application/pdf' });
    const reader = new FileReader();

    reader.onloadend = async function() {
      const base64Pdf = reader.result.split(',')[1]; // Get base64 string without data: URL prefix

      const invoiceData = {
        invoiceNumber: `INV-${String(worker.invoiceStart - 1).padStart(3, '0')}`, // Use the number *before* increment
        workerId: worker.id,
        participantId: participant.id,
        jobId: invoiceJobSelect.value || null,
        invoiceDate: new Date().toISOString().split("T")[0],
        totalAmount: parseFloat((parseFloat(invoiceHourlyRate.value) * parseFloat(invoiceHoursWorked.value)).toFixed(2)),
        invoiceContent: invoiceText,
        recipientEmail: recipientEmail,
        emailSubject: emailSubject,
        emailBody: emailBody,
        timestamp: new Date()
      };

      try {
        // Save invoice data to Firestore
        const invoiceDocRef = await window.addDoc(window.collection(db, `artifacts/${appId}/users/${auth.currentUser.uid}/invoices`), invoiceData);
        console.log("Invoice saved to Firestore with ID:", invoiceDocRef.id);

        // Queue email via Firebase Extension (e.g., SendGrid)
        await window.addDoc(window.collection(db, `messages`), { // Corrected path to root 'messages'
          to: recipientEmail,
          subject: emailSubject,
          text: emailBody,
          html: `<pre>${invoiceText}</pre>`, // For a more structured email body if desired
          attachments: [{
            filename: `Invoice_${invoiceData.invoiceNumber}.pdf`,
            content: base64Pdf,
            type: 'application/pdf'
          }],
          type: 'email' // Indicate this is an email for the extension
        });

        showMessage(`Invoice email queued to: ${recipientEmail}. Invoice saved.`, 5000);

        // Update worker's invoice automation status
        if (!worker.invoiceAutomationEnabled) { // Only set to true if it was false
          const workerRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/workers`, workerId);
          await window.updateDoc(workerRef, {
            invoiceAutomationEnabled: true
          });
          console.log(`Worker ${worker.name} invoice automation enabled.`);
        }

      } catch (e) {
        console.error("Error sending invoice email or saving invoice:", e);
        showMessage("Error sending invoice. See console for details.", 5000);
      }
    };
    reader.readAsDataURL(invoiceBlob); // Read as Data URL to get Base64
  });

  // DEV: Send Mock Invoice Button
  sendMockInvoiceButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }

    const mockInvoiceText = `
    MOCK INVOICE #DEV-001
    Date: ${new Date().toISOString().split('T')[0]}
    
    This is a mock invoice for testing purposes only.
    
    Service: Mock Support Service
    Rate: $50.00/hour
    Hours: 2.0
    Total: $100.00
    
    Please disregard. This is not a real invoice.
    `;

    const mockRecipientEmail = 'test@example.com'; // Use a test email
    const mockSubject = 'DEV: Mock NDIS Invoice Test';
    const mockBody = 'Hi,\n\nThis is a mock invoice for development testing. Please do not reply.\n\nRegards,\nDev Team';

    const mockInvoiceBlob = new Blob([mockInvoiceText], { type: 'application/pdf' });
    const reader = new FileReader();

    reader.onloadend = async function() {
      const base64Pdf = reader.result.split(',')[1];

      try {
        await window.addDoc(window.collection(db, `messages`), {
          to: mockRecipientEmail,
          subject: mockSubject,
          text: mockBody,
          html: `<pre>${mockInvoiceText}</pre>`,
          attachments: [{
            filename: `Mock_Invoice_DEV-001.pdf`,
            content: base64Pdf,
            type: 'application/pdf'
          }],
          type: 'email'
        });
        showMessage(`DEV: Mock invoice email queued to: ${mockRecipientEmail}.`, 5000);
      } catch (e) {
        console.error("DEV: Error sending mock invoice email:", e);
        showMessage("DEV: Error sending mock invoice. See console for details.", 5000);
      }
    };
    reader.readAsDataURL(mockInvoiceBlob);
  });


  // Handle changes in worker/participant selection for invoice email settings
  invoiceWorkerSelect.addEventListener('change', updateInvoiceEmailSettings);
  invoiceParticipantSelect.addEventListener('change', updateInvoiceEmailSettings);

  function updateInvoiceEmailSettings() {
    const worker = window.currentWorkers.find(w => w.id === invoiceWorkerSelect.value);
    const participant = window.currentParticipants.find(p => p.id === invoiceParticipantSelect.value);

    let recipientName = '';
    let recipientEmail = '';
    let subject = '';
    let body = '';

    if (participant) {
      recipientName = participant.fullName;
      if (participant.paymentType === 'Plan Managed' && participant.planManagerEmail) {
        recipientEmail = participant.planManagerEmail;
        subject = `NDIS Invoice for ${participant.fullName} (Managed by ${participant.planManagerName || 'Plan Manager'})`;
        body = `Hi ${participant.planManagerName || 'Plan Manager'},\n\nPlease find attached the invoice for services provided to ${participant.fullName} by ${worker ? worker.name : 'our support worker'}.\n\nRegards,\n${auth.currentUser.email || 'Admin'}`;
      } else {
        recipientEmail = participant.email;
        subject = `NDIS Invoice for ${participant.fullName}`;
        body = `Hi ${participant.fullName},\n\nPlease find attached the invoice for services provided by ${worker ? worker.name : 'our support worker'}.\n\nRegards,\n${auth.currentUser.email || 'Admin'}`;
      }
    } else {
      // Clear if no participant selected
      recipientEmail = '';
      subject = '';
      body = '';
    }

    invoiceRecipientEmail.value = recipientEmail;
    invoiceEmailSubject.value = subject;
    invoiceEmailBody.value = body;
  }


  // SMS Automation - Add Rule
  addSmsRuleButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
    const ifCondition = smsIfCondition.value.trim();
    const thenAction = smsThenAction.value.trim();
    const jobId = smsRuleJobSelect.value || null;

    if (!ifCondition || !thenAction) {
      showMessage("Please fill in both 'IF' and 'THEN' fields for the rule.", 3000);
      return;
    }

    const ruleData = {
      ifCondition: ifCondition,
      thenAction: thenAction,
      jobId: jobId
    };

    try {
      await window.addDoc(window.collection(db, `artifacts/${appId}/users/${auth.currentUser.uid}/smsRules`), ruleData);
      showMessage("SMS rule added successfully!", 3000);
      clearForm([smsIfCondition, smsThenAction, smsRuleJobSelect]);
    } catch (e) {
      console.error("Error adding SMS rule:", e);
      showMessage("Error adding SMS rule. See console for details.", 5000);
    }
  });

  // Custom SMS Templates - Add Template
  addTemplateButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
    const name = templateName.value.trim();
    const content = templateContent.value.trim();

    if (!name || !content) {
      showMessage("Please enter both template name and content.", 3000);
      return;
    }

    const templateData = {
      name: name,
      content: content
    };

    try {
      await window.addDoc(window.collection(db, `artifacts/${appId}/users/${auth.currentUser.uid}/smsTemplates`), templateData);
      showMessage("Custom SMS template added successfully!", 3000);
      clearForm([templateName, templateContent]);
    } catch (e) {
      console.error("Error adding SMS template:", e);
      showMessage("Error adding SMS template. See console for details.", 5000);
    }
  });

  // Render Custom SMS Templates List
  function renderCustomTemplatesList() {
    customTemplatesList.innerHTML = '';
    if (window.currentSmsTemplates.length === 0) {
      customTemplatesList.innerHTML = '<p class="text-center text-gray-500">No custom templates added yet.</p>';
      return;
    }
    window.currentSmsTemplates.forEach(template => {
      const templateItem = document.createElement('div');
      templateItem.className = "card bg-gray-50 p-3 rounded-md border border-gray-200 text-sm flex justify-between items-center";
      templateItem.innerHTML = `
        <span><strong class="text-gray-700">Name:</strong> ${template.name}</span>
        <button data-id="${template.id}" class="remove-template-button bg-red-500 hover:bg-red-600 text-white text-xs px-2 py-1 rounded-md">Remove</button>
      `;
      customTemplatesList.appendChild(templateItem);
    });

    customTemplatesList.querySelectorAll('.remove-template-button').forEach(button => {
      button.addEventListener('click', async (event) => {
        if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }
        const templateIdToRemove = event.target.dataset.id;
        try {
          await window.deleteDoc(window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/smsTemplates`, templateIdToRemove));
          showMessage("Template removed successfully!", 3000);
        } catch (e) {
          console.error("Error removing template:", e);
          showMessage("Error removing template. See console for details.", 5000);
        }
      });
    });
  }

  // Populate SMS Template Dropdown
  function populateSmsTemplateDropdown() {
    outboundSmsTemplateDropdown.innerHTML = '<option value="none">-- Select a Template (Optional) --</option>';
    // Add built-in templates first
    const builtInTemplates = [
        { name: "Shift Confirmation", value: "shift_confirmation" },
        { name: "Worker Onboarding Link", value: "onboarding_link" },
        { name: "Job Reminder", value: "job_reminder" }
    ];
    builtInTemplates.forEach(template => {
        const option = document.createElement('option');
        option.value = template.value;
        option.textContent = template.name;
        outboundSmsTemplateDropdown.appendChild(option);
    });

    // Add custom templates
    window.currentSmsTemplates.forEach(template => {
        const option = document.createElement('option');
        option.value = template.id; // Use ID as value to retrieve content
        option.textContent = `Custom: ${template.name}`;
        outboundSmsTemplateDropdown.appendChild(option);
    });
  }

  // Outbound SMS Recipient Type Change Listener
  outboundSmsRecipientType.addEventListener('change', () => {
    const selectedType = outboundSmsRecipientType.value;
    outboundSmsRecipientSelect.innerHTML = '<option value="">-- Select from list --</option>';
    outboundSmsRecipientSelect.disabled = true;
    outboundSmsCustomNumber.disabled = true;
    outboundSmsCustomNumber.value = '';
    outboundSmsBody.value = ''; // Clear message body when recipient type changes
    outboundSmsTemplateDropdown.value = 'none'; // Reset template selection

    if (selectedType === 'worker') {
      window.currentWorkers.forEach(worker => {
        const option = document.createElement('option');
        option.value = worker.phone;
        option.textContent = worker.name + (worker.phone ? ` (${worker.phone})` : '');
        outboundSmsRecipientSelect.appendChild(option);
      });
      outboundSmsRecipientSelect.disabled = false;
    } else if (selectedType === 'participant') {
      window.currentParticipants.forEach(participant => {
        const option = document.createElement('option');
        option.value = participant.phone;
        option.textContent = participant.fullName + (participant.phone ? ` (${participant.phone})` : '');
        outboundSmsRecipientSelect.appendChild(option);
      });
      outboundSmsRecipientSelect.disabled = false;
    } else if (selectedType === 'custom') {
      outboundSmsCustomNumber.disabled = false;
    }
  });

  // Outbound SMS Template Change Listener
  outboundSmsTemplateDropdown.addEventListener('change', () => {
    const selectedTemplateValue = outboundSmsTemplateDropdown.value;
    const recipientPhone = outboundSmsRecipientSelect.value || outboundSmsCustomNumber.value;
    let recipientName = '';
    let selectedEntity = null;

    if (outboundSmsRecipientType.value === 'worker') {
        selectedEntity = window.currentWorkers.find(w => w.phone === recipientPhone);
        recipientName = selectedEntity ? selectedEntity.name : '';
    } else if (outboundSmsRecipientType.value === 'participant') {
        selectedEntity = window.currentParticipants.find(p => p.phone === recipientPhone);
        recipientName = selectedEntity ? selectedEntity.fullName : '';
    }

    let templateText = '';
    if (selectedTemplateValue === 'shift_confirmation') {
      templateText = `Hi ${recipientName || 'there'},\nYour shift has been confirmed. Please remember to log your start and end times and kilometers.`;
    } else if (selectedTemplateValue === 'onboarding_link') {
      // Placeholder for a real onboarding link.
      // IMPORTANT: Replace this with your actual, live, and preferably branded/shortened URL.
      // Generic placeholders like 'your-app-domain.com' might be flagged by carriers.
      const onboardingLink = `https://your-app-domain.com/worker-onboarding-wizard?phone=${encodeURIComponent(recipientPhone)}`;
      templateText = `Hi ${recipientName || 'there'},\nWelcome to NDIS LiteXero! Please complete your onboarding and setup your shift logging by visiting this link: ${onboardingLink}. Follow the instructions to set up your shift and odometer tracking via SMS.`;
    } else if (selectedTemplateValue === 'job_reminder') {
        // Find a relevant job if possible, or make it generic
        const relevantJob = window.currentJobs.find(job => 
            (selectedEntity && (job.workerId === selectedEntity.id || job.participantId === selectedEntity.id))
        ) || { title: 'your upcoming job', date: 'soon' };
        templateText = `Hi ${recipientName || 'there'},\nJust a reminder about ${relevantJob.title} on ${relevantJob.date}.`;
    } else {
        // Check custom templates
        const customTemplate = window.currentSmsTemplates.find(t => t.id === selectedTemplateValue);
        if (customTemplate) {
            templateText = customTemplate.content;
            // Replace placeholders in custom templates
            templateText = templateText.replace(/{workerName}/g, selectedEntity && selectedEntity.name ? selectedEntity.name : 'worker');
            templateText = templateText.replace(/{participantName}/g, selectedEntity && selectedEntity.fullName ? selectedEntity.fullName : 'participant');
            templateText = templateText.replace(/{jobTitle}/g, selectedEntity && selectedEntity.jobTitle ? selectedEntity.jobTitle : 'the job');
            templateText = templateText.replace(/{jobDate}/g, selectedEntity && selectedEntity.jobDate ? selectedEntity.jobDate : 'a date');
            templateText = templateText.replace(/{onboardingLink}/g, 'https://your-app-domain.com/worker-onboarding-wizard'); // Generic link for custom templates
        }
    }

    outboundSmsBody.value = templateText;
  });


  // Send Outbound SMS Button Click Listener
  sendOutboundSmsButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }

    const recipientType = outboundSmsRecipientType.value;
    let recipientPhone = '';

    if (recipientType === 'worker' || recipientType === 'participant') {
      recipientPhone = outboundSmsRecipientSelect.value;
    } else if (recipientType === 'custom') {
      recipientPhone = outboundSmsCustomNumber.value;
    }

    const messageBody = outboundSmsBody.value.trim();

    if (!recipientPhone || !messageBody) {
      showMessage("Please select a recipient or enter a custom number, and type a message.", 5000);
      return;
    }

    const normalizedRecipientPhone = normalizePhoneNumber(recipientPhone);

    try {
      await sendOutboundSms(normalizedRecipientPhone, messageBody);
      showMessage(`Outbound SMS queued to ${normalizedRecipientPhone}.`, 3000);
      clearForm([outboundSmsRecipientType, outboundSmsRecipientSelect, outboundSmsCustomNumber, outboundSmsBody, outboundSmsTemplateDropdown]);
      outboundSmsRecipientSelect.disabled = true;
      outboundSmsCustomNumber.disabled = true;
      outboundSmsRecipientType.value = 'none'; // Reset recipient type
    } catch (e) {
      console.error("Error sending outbound SMS:", e);
      showMessage("Failed to queue outbound SMS. See console.", 5000);
    }
  });

  // Populate outbound SMS recipient dropdowns (called on data load)
  function populateOutboundSmsRecipients() {
      // This function is called when workers/participants data changes
      // The logic for updating the `outboundSmsRecipientSelect` is now handled by the `change` event listener
      // on `outboundSmsRecipientType`, which will be triggered by user interaction.
      // We just need to ensure the initial state is reset if needed.
      outboundSmsRecipientType.value = 'none';
      outboundSmsRecipientSelect.innerHTML = '<option value="">-- Select from list --</option>';
      outboundSmsRecipientSelect.disabled = true;
      outboundSmsCustomNumber.disabled = true;
      outboundSmsCustomNumber.value = '';
  }


  // Send Test Inbound SMS
  sendTestInboundSmsButton.addEventListener("click", async () => {
    if (!auth.currentUser) { showMessage("User not authenticated. Please wait.", 3000); return; }

    const testSmsContent = testInboundSmsContent.value.trim();
    const testSmsFrom = normalizePhoneNumber(testInboundSmsFrom.value); // Normalize phone number
    
    if (!testSmsContent || !testSmsFrom) {
      showMessage("Please enter both sender phone (E.164) and message content for the test SMS.", 5000);
      return;
    }

    try {
      // Directly write to the 'messages' collection with 'inbound' direction
      await window.addDoc(window.collection(db, `messages`), { // Corrected path to root 'messages'
        from: testSmsFrom,
        body: testSmsContent,
        timestamp: new Date(),
        direction: "inbound", // Explicitly mark as inbound
        type: "sms" // Indicate type for clarity
      });
      showMessage("Test inbound SMS successfully sent to Firestore. Check log for rule processing.", 4000);
      clearForm([testInboundSmsFrom, testInboundSmsContent]);
    } catch (e) {
      console.error("Error sending test inbound SMS to Firestore:", e);
      showMessage("Error sending test inbound SMS. See console for details.", 5000);
    }
  });

  // Function to send an outbound SMS (writes to Firestore 'messages' collection for Twilio extension)
  async function sendOutboundSms(to, body) {
    if (!auth.currentUser) {
      console.error("Cannot send SMS: User not authenticated.");
      showMessage("Cannot send SMS: Please log in.", 3000);
      return;
    }
    try {
      // Do NOT include 'from' field here; Twilio Messaging Service will handle it
      await window.addDoc(window.collection(db, `messages`), { // Corrected path to root 'messages'
        to: to,
        body: body,
        timestamp: new Date(),
        type: 'sms', // Indicate this is an SMS for the extension
        direction: 'outbound' // Mark as outbound
      });
      console.log(`Outbound SMS queued to ${to}: "${body}"`);
    } catch (e) {
      console.error("Error queuing outbound SMS:", e);
      throw new Error("Failed to queue outbound SMS.");
    }
  }

  // Function to process inbound SMS messages
  async function processInboundSms(inboundMessage) {
    const senderPhone = normalizePhoneNumber(inboundMessage.from);
    const messageBody = inboundMessage.body.toLowerCase();
    const timestamp = inboundMessage.timestamp ? (inboundMessage.timestamp.toDate ? inboundMessage.timestamp.toDate() : new Date(inboundMessage.timestamp)) : new Date(); // Convert Firestore Timestamp to Date

    smsTriggerLog.innerHTML += `<p class="text-sm text-yellow-900"><strong>Processing SMS from ${senderPhone}:</strong> "${inboundMessage.body}"</p>`;

    // 1. Identify Worker by phone number
    const worker = window.currentWorkers.find(w => normalizePhoneNumber(w.phone) === senderPhone);
    if (!worker) {
      smsTriggerLog.innerHTML += `<p class="text-sm text-red-700">No worker found for phone number: ${senderPhone}</p>`;
      // Optionally, send an SMS back to the sender if they are not recognized
      // await sendOutboundSms(senderPhone, "Sorry, your number is not recognized. Please contact admin.");
      return;
    }
    smsTriggerLog.innerHTML += `<p class="text-sm text-green-700">Identified worker: ${worker.name}</p>`;

    let triggeredCount = 0;
    for (const rule of window.currentSmsRules) {
      if (messageBody.includes(rule.ifCondition.toLowerCase())) {
        smsTriggerLog.innerHTML += `<p class="text-sm text-yellow-900"><strong>RULE MATCH:</strong> IF "${rule.ifCondition}" THEN "${rule.thenAction}"</p>`;
        triggeredCount++;

        // Execute action based on rule
        if (rule.thenAction === 'log_shift_start') {
          const jobId = rule.jobId;
          if (jobId) {
            const jobRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/jobs`, jobId);
            await window.updateDoc(jobRef, {
              actualStartTime: timestamp.toISOString(),
              status: 'in-progress'
            });
            smsTriggerLog.innerHTML += `<p class="text-sm text-blue-700">Job ${jobId} status updated to 'in-progress', actual start time logged: ${timestamp.toLocaleString()}.</p>`;
            showMessage(`Shift started for ${worker.name} on job ${jobId}.`, 3000);
            await sendOutboundSms(senderPhone, `Shift started for job ${jobId}.`);
          } else {
            smsTriggerLog.innerHTML += `<p class="text-sm text-red-700">Rule 'log_shift_start' requires a linked job.</p>`;
            await sendOutboundSms(senderPhone, `Failed to log shift start: Rule requires a linked job.`);
          }
        } else if (rule.thenAction === 'log_shift_end') {
          const jobId = rule.jobId;
          if (jobId) {
            const jobRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/jobs`, jobId);
            await window.updateDoc(jobRef, {
              actualEndTime: timestamp.toISOString(),
              status: 'completed'
            });
            smsTriggerLog.innerHTML += `<p class="text-sm text-blue-700">Job ${jobId} status updated to 'completed', actual end time logged: ${timestamp.toLocaleString()}.</p>`;
            showMessage(`Shift ended for ${worker.name} on job ${jobId}.`, 3000);
            await sendOutboundSms(senderPhone, `Shift ended for job ${jobId}.`);

            // Check for invoice automation
            if (worker.invoiceAutomationEnabled) {
              const job = window.currentJobs.find(j => j.id === jobId);
              if (job && job.actualStartTime && job.actualEndTime) {
                const participant = window.currentParticipants.find(p => p.id === job.participantId);
                if (participant) {
                  const hoursWorked = ((new Date(job.actualEndTime) - new Date(job.actualStartTime)) / (1000 * 60 * 60)).toFixed(2);
                  // Find an NDIS code for the job, or use a default
                  const supportCodeObj = window.currentNdisCodes.find(c => c.code === job.code) || { code: "AUTOMATED_CODE", description: "Automated Service", rate: 60.00 };
                  const hourlyRate = supportCodeObj.rate;
                  const totalAmount = (hourlyRate * hoursWorked).toFixed(2);

                  const automatedInvoiceText = `
AUTOMATED INVOICE FOR JOB: ${job.title}
Worker: ${worker.name}
Participant: ${participant.fullName}
Date: ${new Date().toISOString().split("T")[0]}
Support Code: ${supportCodeObj.code} - ${supportCodeObj.description}
Hours: ${hoursWorked}
Hourly Rate: $${hourlyRate.toFixed(2)}
Total Amount: $${totalAmount}
${job.startKm && job.endKm ? `Kilometers: ${job.startKm} - ${job.endKm} = ${job.endKm - job.startKm}km` : ''}
                  `.trim();

                  // Convert invoice text to a Blob and then to Base64 for attachment
                  const invoiceBlob = new Blob([automatedInvoiceText], { type: 'application/pdf' });
                  const pdfReader = new FileReader();
                  pdfReader.onloadend = async function() {
                    const base64Pdf = pdfReader.result.split(',')[1];

                    const invoiceNumber = `INV-AUTO-${Date.now()}`;
                    const recipientEmail = participant.planManagerEmail || participant.email;
                    const emailSubject = `Automated NDIS Invoice for ${participant.fullName}`;
                    const emailBody = `Dear ${participant.fullName},\n\nYour automated invoice for services provided by ${worker.name} on job "${job.title}" is attached.\n\nRegards,\nNDIS LiteXero Automation`;

                    // Save invoice to Firestore
                    await window.addDoc(window.collection(db, `artifacts/${appId}/users/${auth.currentUser.uid}/invoices`), {
                      invoiceNumber: invoiceNumber,
                      workerId: worker.id,
                      participantId: participant.id,
                      jobId: jobId,
                      invoiceDate: new Date().toISOString().split("T")[0],
                      totalAmount: parseFloat(totalAmount),
                      invoiceContent: automatedInvoiceText,
                      recipientEmail: recipientEmail,
                      emailSubject: emailSubject,
                      emailBody: emailBody,
                      timestamp: new Date(),
                      automated: true
                    });

                    // Queue email via Firebase Extension (e.g., SendGrid)
                    await window.addDoc(window.collection(db, `messages`), { // Corrected path to root 'messages'
                      to: recipientEmail,
                      subject: emailSubject,
                      text: emailBody,
                      html: `<pre>${automatedInvoiceText}</pre>`,
                      attachments: [{
                        filename: `Automated_Invoice_${invoiceNumber}.pdf`,
                        content: base64Pdf,
                        type: 'application/pdf'
                      }],
                      type: 'email'
                    });
                    showMessage(`Automated invoice generated and queued for ${worker.name} and ${participant.fullName}.`, 5000);
                    await sendOutboundSms(senderPhone, `Automated invoice for job ${job.title} has been generated and sent.`);
                  };
                  pdfReader.readAsDataURL(invoiceBlob);
                }
              } else {
                smsTriggerLog.innerHTML += `<p class="text-sm text-orange-700">Automated invoice skipped: Job details (start/end time) missing or participant not found.</p>`;
                await sendOutboundSms(senderPhone, `Automated invoice skipped for job ${jobId}: Missing job details.`);
              }
            }
          } else {
            smsTriggerLog.innerHTML += `<p class="text-sm text-red-700">Rule 'log_shift_end' requires a linked job.</p>`;
            await sendOutboundSms(senderPhone, `Failed to log shift end: Rule requires a linked job.`);
          }
        } else if (rule.thenAction === 'log_start_odo') { // New action for start odometer
          const jobId = rule.jobId;
          const odoMatch = messageBody.match(/(\d+(\.\d+)?)/); // Capture any number
          const odoValue = odoMatch ? parseFloat(odoMatch[1]) : NaN;

          if (jobId && !isNaN(odoValue)) {
            const jobRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/jobs`, jobId);
            const jobDoc = window.currentJobs.find(j => j.id === jobId);

            if (jobDoc && (jobDoc.startKm === null || jobDoc.startKm === undefined)) {
              await window.updateDoc(jobRef, { startKm: odoValue });
              smsTriggerLog.innerHTML += `<p class="text-sm text-blue-700">Job ${jobId}: Start Odometer logged as ${odoValue} at ${timestamp.toLocaleString()}.</p>`;
              showMessage(`Start Odometer logged as ${odoValue} for ${worker.name}.`, 3000);
              await sendOutboundSms(senderPhone, `Start Odometer logged: ${odoValue} for job ${jobId}.`);
            } else {
              smsTriggerLog.innerHTML += `<p class="text-sm text-orange-700">Job ${jobId}: Start Odometer already logged or invalid value. Ignoring.</p>`;
              await sendOutboundSms(senderPhone, `Start Odometer update failed for job ${jobId}: Already logged or invalid value. Send "start odo [value]".`);
            }
          } else {
            smsTriggerLog.innerHTML += `<p class="text-sm text-red-700">Rule 'log_start_odo' requires a linked job and a valid odometer value.</p>`;
            await sendOutboundSms(senderPhone, `Failed to log Start Odometer: Rule requires a linked job and a valid number. Send "start odo [value]".`);
          }
        } else if (rule.thenAction === 'log_end_odo') { // New action for end odometer and calculation
          const jobId = rule.jobId;
          const odoMatch = messageBody.match(/(\d+(\.\d+)?)/); // Capture any number
          const odoValue = odoMatch ? parseFloat(odoMatch[1]) : NaN;

          if (jobId && !isNaN(odoValue)) {
            const jobRef = window.doc(db, `artifacts/${appId}/users/${auth.currentUser.uid}/jobs`, jobId);
            const jobDoc = window.currentJobs.find(j => j.id === jobId);

            if (jobDoc && (jobDoc.endKm === null || jobDoc.endKm === undefined)) {
              await window.updateDoc(jobRef, { endKm: odoValue });
              smsTriggerLog.innerHTML += `<p class="text-sm text-blue-700">Job ${jobId}: End Odometer logged as ${odoValue} at ${timestamp.toLocaleString()}.</p>`;
              showMessage(`End Odometer logged as ${odoValue} for ${worker.name}.`, 3000);
              await sendOutboundSms(senderPhone, `End Odometer logged: ${odoValue} for job ${jobId}.`);

              // Calculate km travelled if both start and end odo are present
              if (jobDoc.startKm !== null && jobDoc.startKm !== undefined) {
                  const kmTravelled = odoValue - jobDoc.startKm;
                  smsTriggerLog.innerHTML += `<p class="text-sm text-blue-700">Job ${jobId}: Kilometers travelled: ${kmTravelled.toFixed(2)} km.</p>`;
                  // Optionally update job with kmTravelled
                  await window.updateDoc(jobRef, { kmTravelled: kmTravelled.toFixed(2) });
              }

            } else {
              smsTriggerLog.innerHTML += `<p class="text-sm text-orange-700">Job ${jobId}: End Odometer already logged or invalid value. Ignoring.</p>`;
              await sendOutboundSms(senderPhone, `End Odometer update failed for job ${jobId}: Already logged or invalid value. Send "end odo [value]".`);
            }
          } else {
            smsTriggerLog.innerHTML += `<p class="text-sm text-red-700">Rule 'log_end_odo' requires a linked job and a valid odometer value.</p>`;
            await sendOutboundSms(senderPhone, `Failed to log End Odometer: Rule requires a linked job and a valid number. Send "end odo [value]".`);
          }
        }
        // Add more actions here as needed
      }
    }

    if (triggeredCount === 0) {
      smsTriggerLog.innerHTML += '<p class="text-center text-gray-500">No rules triggered by this SMS.</p>';
      // Consider sending a generic "unrecognized command" SMS back
      // await sendOutboundSms(senderPhone, "Your message was not understood. Please use defined commands.");
    }
  }

  // --- Navigation Logic ---
  // showSection function is now defined globally at the top of the script
  // to ensure it's available when onAuthStateChanged calls it.

  // Event listeners for navigation buttons
  navWorkerOnboarding.addEventListener("click", () => window.showSection('workerOnboardingSection'));
  navWorkerList.addEventListener("click", () => window.showSection('workerListSection'));
  navParticipantSignup.addEventListener("click", () => window.showSection('participantSignupSection'));
  navParticipantList.addEventListener("click", () => window.showSection('participantListSection'));
  navNdisCodeManagement.addEventListener("click", () => window.showSection('ndisCodeManagementSection'));
  navInvoiceGenerator.addEventListener("click", () => window.showSection('invoiceGeneratorSection'));
  navJobBuilder.addEventListener("click", () => window.showSection('jobBuilderSection'));
  navSmsAutomation.addEventListener("click", () => window.showSection('smsAutomationSection'));

  // Message Log Overlay Close Button
  closeMessageLogButton.addEventListener("click", () => {
    messageLogSection.classList.add('hidden-section');
  });

  // Invoice Automation Toggle Styling
  invoiceAutomationToggle.addEventListener('change', function() {
    // The dot and block are siblings to the hidden checkbox input
    const dot = this.nextElementSibling.nextElementSibling;
    const block = this.nextElementSibling; // The block element is the immediate next sibling

    if (this.checked) {
      dot.classList.remove('left-1', 'bg-white');
      dot.classList.add('translate-x-full', 'bg-blue-500');
      block.classList.remove('bg-gray-600');
      block.classList.add('bg-blue-300'); // Lighter blue when active
    } else {
      dot.classList.remove('translate-x-full', 'bg-blue-500');
      dot.classList.add('left-1', 'bg-white');
      block.classList.remove('bg-blue-300');
    }
  });

  // Function to display message log for a worker/participant
  async function viewMessageLog(entityType, entityId, entityPhone, entityName) {
    if (!auth.currentUser) {
      showMessage("User not authenticated. Please log in to view message logs.", 3000);
      return;
    }
    if (!entityPhone) {
      showMessage(`No phone number found for ${entityName}. Cannot view message log.`, 3000);
      return;
    }

    messageLogTitle.textContent = `Message Log for ${entityName}`;
    messageLogContent.innerHTML = '<p class="text-center text-gray-500">Loading messages...</p>';
    messageLogSection.classList.remove('hidden-section'); // Show the overlay

    const normalizedEntityPhone = normalizePhoneNumber(entityPhone);
    // Directly query the root 'messages' collection as per your Twilio setup
    const messagesRef = window.collection(db, `messages`); 

    try {
      // Query for messages where 'from' or 'to' matches the entity's phone number
      const q1 = window.query(messagesRef, window.where('from', '==', normalizedEntityPhone));
      const q2 = window.query(messagesRef, window.where('to', '==', normalizedEntityPhone));

      const [snapshot1, snapshot2] = await Promise.all([window.getDocs(q1), window.getDocs(q2)]);

      let allMessages = [];
      snapshot1.forEach(doc => allMessages.push({ id: doc.id, ...doc.data() }));
      snapshot2.forEach(doc => allMessages.push({ id: doc.id, ...doc.data() }));

      // Filter out duplicate messages if they appear in both queries (e.g., if Twilio number is also a worker's phone)
      const uniqueMessages = Array.from(new Map(allMessages.map(item => [item['messageSid'] || item.id, item])).values());

      // Sort messages by timestamp (newest first)
      uniqueMessages.sort((a, b) => {
        const timeA = a.timestamp ? (a.timestamp.toDate ? a.timestamp.toDate() : a.timestamp) : new Date(0);
        const timeB = b.timestamp ? (b.timestamp.toDate ? b.timestamp.toDate() : b.timestamp) : new Date(0);
        return timeB - timeA;
      });

      messageLogContent.innerHTML = ''; // Clear loading message

      if (uniqueMessages.length === 0) {
        messageLogContent.innerHTML = '<p class="text-center text-gray-500">No messages found for this contact.</p>';
        return;
      }

      uniqueMessages.forEach(msg => {
        const msgElement = document.createElement('div');
        // Determine if the message is inbound or outbound relative to the entity being viewed
        // If the message's 'from' number matches the entity's phone, it's inbound to the app (from entity)
        // If the message's 'to' number matches the entity's phone, it's outbound from the app (to entity)
        const isOutboundToEntity = normalizePhoneNumber(msg.to) === normalizedEntityPhone; 
        
        msgElement.className = `p-2 my-1 rounded-md text-sm ${isOutboundToEntity ? 'bg-green-100 text-green-800 self-end' : 'bg-blue-100 text-blue-800 self-start'} `;
        
        const timestampDate = msg.timestamp ? (msg.timestamp.toDate ? msg.timestamp.toDate() : new Date(msg.timestamp)) : new Date();
        const formattedTime = timestampDate.toLocaleString();

        // Determine who sent/received the message for display
        let fromToText = '';
        if (msg.direction === 'inbound') {
            fromToText = `From: ${msg.from}`;
        } else if (msg.direction === 'outbound') {
            fromToText = `To: ${msg.to}`;
        } else {
            // Fallback for messages without a clear 'direction' or other types
            fromToText = `From: ${msg.from || 'N/A'} To: ${msg.to || 'N/A'}`; 
        }

        msgElement.innerHTML = `
          <p class="font-bold">${fromToText}</p>
          <p>${msg.body}</p>
          <p class="text-xs text-gray-500 mt-1">${formattedTime} - Status: ${msg.status || 'N/A'}</p>
          ${msg.errorMessage ? `<p class="text-xs text-red-600">Error: ${msg.errorMessage}</p>` : ''}
        `;
        messageLogContent.appendChild(msgElement);
      });

    } catch (e) {
      console.error("Error fetching message log:", e);
      messageLogContent.innerHTML = '<p class="text-center text-red-500">Error loading messages.</p>';
      showMessage("Error loading message log. See console for details.", 5000);
    }
  }

</script>
</body>
</html>

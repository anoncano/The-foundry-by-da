<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>NDIS Invoicing & Shift Logger</title>

    <!-- Tailwind CSS for styling -->
    <script src="https://cdn.tailwindcss.com"></script>

    <!-- React Libraries -->
    <script src="https://unpkg.com/react@18/umd/react.development.js"></script>
    <script src="https://unpkg.com/react-dom@18/umd/react-dom.development.js"></script>

    <!-- Babel to transpile JSX in the browser -->
    <script src="https://unpkg.com/@babel/standalone/babel.min.js"></script>

    <!-- PDF Generation Libraries -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.8.2/jspdf.plugin.autotable.min.js"></script>

    <!-- Excel/CSV Parsing Library (SheetJS) -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    
    <!-- JSZip for creating ZIP files -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jszip/3.10.1/jszip.min.js"></script>


    <!-- Google Fonts: Inter -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">

    <style>
        body { font-family: 'Inter', sans-serif; }
        .card { background-color: white; border-radius: 0.75rem; box-shadow: 0 4px 6px -1px rgb(0 0 0 / 0.1), 0 2px 4px -2px rgb(0 0 0 / 0.1); padding: 1.5rem; }
        .wizard-step, .fade-in { animation: fadeIn 0.5s; }
        @keyframes fadeIn { from { opacity: 0; transform: translateY(10px); } to { opacity: 1; transform: translateY(0); } }
        .toast-container { position: fixed; top: 1.5rem; right: 1.5rem; z-index: 100; }
        .toast {
            background-color: #1f2937; /* Darker gray for better contrast */
            color: white;
            padding: 1rem 1.5rem;
            border-radius: 0.5rem;
            box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);
            animation: slideIn 0.3s ease-out forwards;
            margin-bottom: 1rem;
        }
        @keyframes slideIn {
            from { opacity: 0; transform: translateX(100%); }
            to { opacity: 1; transform: translateX(0); }
        }
        .automation-node {
            border: 1px solid #e5e7eb;
            border-radius: 0.5rem;
            background-color: white;
            box-shadow: 0 1px 3px 0 rgba(0,0,0,0.1), 0 1px 2px 0 rgba(0,0,0,0.06);
            width: 280px;
        }
    </style>
</head>
<body class="bg-slate-100">

    <div id="root"></div>

    <script type="text/babel">
        const { useState, createContext, useContext, useEffect, useCallback, useRef, useMemo } = React;
        const { jsPDF } = window.jspdf;
        const { XLSX } = window;
        const { JSZip } = window;

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Mock Data Store
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const initialDataStore = {
            users: [
                { id: 'admin-1', email: 'admin@test.com', password: 'password123', role: 'admin', fullName: 'Admin User', profileComplete: true },
                { id: 'worker-1', email: 'worker@test.com', password: 'password123', role: 'worker', fullName: 'John Doe', profileComplete: true, personalDetails: { fullName: 'John Doe', email: 'worker@test.com', phoneNumber: '0412345678', abn: '55 123 456 789', street: '123 Fake St', suburb: 'Sydney', state: 'NSW', postcode: '2000' }, invoicing: { accountName: 'John Doe', bsb: '012-345', accountNumber: '12345678', startingInvoiceNumber: '101' } },
                { id: 'worker-2', email: 'new-worker@test.com', password: 'password123', role: 'worker', fullName: 'Jane Smith', profileComplete: false, personalDetails: { phoneNumber: '0487654321' } },
                { id: 'participant-1', email: 'participant@test.com', password: 'password123', role: 'participant', fullName: 'Peter Pan', profileComplete: true, ndisNumber: '123456789', address: '1 Neverland Ave, Fantasia, NSW 2888', billingDetails: { type: 'Plan Managed', managerEmail: 'invoices@planmanager.com.au' }, planEndDate: '2026-06-30', linkedServices: ['01_011_0107_1_1', '01_799_0104_1_1'] },
                { id: 'participant-2', email: 'new-participant@test.com', password: 'password123', role: 'participant', fullName: 'Wendy Darling', profileComplete: false, ndisNumber: '987654321', address: '22 London Way, Bloomsbury, VIC 3000', billingDetails: { type: 'Self Managed', selfEmail: 'wendy@example.com' }, planEndDate: '2024-01-01', linkedServices: ['04_104_0125_6_1'] },
                { id: 'participant-3', email: 'hook@test.com', password: 'password123', role: 'participant', fullName: 'Captain Hook', profileComplete: true, ndisNumber: '555555555', address: 'The Jolly Roger, At Sea', billingDetails: { type: 'Plan Managed', managerEmail: 'hook.invoices@managers.com' }, planEndDate: '2025-12-31', linkedServices: ['01_015_0107_1_1', '01_799_0104_1_1'] },
            ],
            shifts: [
                { id: 'shift-1', workerId: 'worker-1', participantId: 'participant-1', participantName: 'Peter Pan', shiftDate: '2025-07-21', startTime: '09:00', endTime: '11:00', durationHours: '2.00', supportItemId: '01_011_0107_1_1', isTravelClaimed: true, travelKms: 15, notes: 'Assisted with morning routine and meal prep.', invoiced: false },
                { id: 'shift-2', workerId: 'worker-1', participantId: 'participant-2', participantName: 'Wendy Darling', shiftDate: '2025-07-22', startTime: '13:00', endTime: '15:00', durationHours: '2.00', supportItemId: '04_104_0125_6_1', isTravelClaimed: false, travelKms: 0, notes: '', invoiced: false },
                { id: 'shift-4', workerId: 'worker-1', participantId: 'participant-1', participantName: 'Peter Pan', shiftDate: '2025-07-23', startTime: '09:00', endTime: '12:00', durationHours: '3.00', supportItemId: '01_011_0107_1_1', isTravelClaimed: false, travelKms: 0, notes: 'Community access to the library.', invoiced: false },
                { id: 'shift-3', workerId: 'worker-2', participantId: 'participant-3', participantName: 'Captain Hook', shiftDate: '2025-07-24', startTime: '10:00', endTime: '14:00', durationHours: '4.00', supportItemId: '01_015_0107_1_1', isTravelClaimed: true, travelKms: 25, notes: 'High intensity support.', invoiced: false }
            ],
            draftShifts: [ { id: 'draft-1', workerId: 'worker-1', participantId: 'participant-1', jobId: 'job-1', startTime: new Date().toISOString(), startOdo: '12345' } ],
            jobs: [
                { id: 'job-1', participantId: 'participant-1', serviceId: '01_011_0107_1_1', rate: 67.56, date: '2025-07-21', time: '09:00', duration: 2, location: '123 Neverland Ave', details: 'Morning routine assistance.', status: 'Pending', repeats: 'weekly', repeatDays: [1, 3, 5], repeatEndDate: '2025-08-15', assignedWorkerId: null },
                { id: 'job-2', participantId: 'participant-2', serviceId: '04_104_0125_6_1', rate: 70.00, date: '2025-07-22', time: '14:00', duration: 3, location: 'Community Park', details: 'Social outing and community access.', status: 'Assigned', repeats: 'none', assignedWorkerId: 'worker-1' }
            ],
            invoices: [
                {id: 'inv-1', workerId: 'worker-1', participantId: 'participant-1', invoiceNumber: '100', date: '2025-07-20', total: 150.50, status: 'Paid'},
                {id: 'inv-2', workerId: 'worker-1', participantId: 'participant-3', invoiceNumber: '101', date: '2025-07-21', total: 250.00, status: 'Sent'},
            ],
            priceGuide: [
                { itemNumber: '01_011_0107_1_1', itemName: 'Self-Care - Standard', unit: 'Hour', rate: 67.56, travelItemNumber: '01_799_0104_1_1' },
                { itemNumber: '01_015_0107_1_1', itemName: 'Self-Care - High Intensity', unit: 'Hour', rate: 74.44, travelItemNumber: '01_799_0104_1_1' },
                { itemNumber: '04_104_0125_6_1', itemName: 'Community Access - Standard', unit: 'Hour', rate: 67.56, travelItemNumber: '04_799_0104_6_1' },
                { itemNumber: '01_799_0104_1_1', itemName: 'Provider Travel - Self Care', unit: 'km', rate: 0.99 },
                { itemNumber: '04_799_0104_6_1', itemName: 'Provider Travel - Community', unit: 'km', rate: 0.99 },
            ],
            smsAutomations: [
                { id: 'auto-1', trigger: 'shift start', action: 'create_draft_shift', enabled: true },
                { id: 'auto-2', trigger: 'shift end', action: 'complete_draft_shift', enabled: true },
                { id: 'auto-3', trigger: 'claim', action: 'claim_job', enabled: true },
            ]
        };

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  App Context
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const AppContext = createContext();

        const AppProvider = ({ children }) => {
            const [view, setView] = useState('login');
            const [user, setUser] = useState(null);
            const [appData, setAppData] = useState(initialDataStore);
            const [activeId, setActiveId] = useState(null);
            const [notifications, setNotifications] = useState([]);
            const notificationId = useRef(0);

            // Load data from localStorage on initial render
            useEffect(() => {
                const savedData = localStorage.getItem('ndis_app_data');
                if (savedData) {
                    try {
                        const parsedData = JSON.parse(savedData);
                        // Ensure all keys from initialDataStore exist in parsedData
                        const mergedData = { ...initialDataStore, ...parsedData };
                        setAppData(mergedData);
                    } catch (e) {
                        console.error("Failed to parse localStorage data", e);
                        setAppData(initialDataStore);
                    }
                }
            }, []);

            // Save data to localStorage whenever it changes
            useEffect(() => {
                localStorage.setItem('ndis_app_data', JSON.stringify(appData));
            }, [appData]);
            
            // --- Notification System ---
            const addNotification = useCallback((message, type = 'success') => {
                const id = notificationId.current++;
                setNotifications(prev => [...prev, { id, message, type }]);
                setTimeout(() => {
                    setNotifications(prev => prev.filter(n => n.id !== id));
                }, 4000);
            }, []);

            // --- Auth Functions ---
            const login = (email, password) => {
                const foundUser = appData.users.find(u => u.email === email && u.password === password);
                if (foundUser) {
                    setUser(foundUser);
                    setActiveId(foundUser.id);
                    if (!foundUser.profileComplete) {
                        setView(foundUser.role === 'worker' ? 'workerOnboarding' : 'participantOnboarding');
                    } else {
                        setView('overview');
                    }
                    addNotification("Successfully logged in!");
                    return true;
                }
                return false;
            };

            const logout = () => {
                setUser(null);
                setView('login');
                setActiveId(null);
                addNotification("You have been logged out.");
            };

            const register = (userData) => {
                if (appData.users.some(u => u.email === userData.email)) {
                    addNotification('An account with this email already exists.');
                    return;
                }
                const newUser = { id: `user-${Date.now()}`, ...userData, profileComplete: false };
                setAppData(prev => ({ ...prev, users: [...prev.users, newUser] }));
                setUser(newUser);
                setActiveId(newUser.id);
                setView(newUser.role === 'worker' ? 'workerOnboarding' : 'participantOnboarding');
                addNotification("Account created successfully!");
            };

            const updateUser = (updatedUserData) => {
                setUser(updatedUserData);
                setAppData(prev => ({ ...prev, users: prev.users.map(u => u.id === updatedUserData.id ? updatedUserData : u) }));
                addNotification("Profile updated successfully!");
            };

            const navigateTo = (newView, id = null) => {
                setActiveId(id || (user ? user.id : null));
                setView(newView);
            };

            const value = {
                view, navigateTo, user, login, logout, register, updateUser,
                appData, setAppData, activeId, addNotification,
            };

            return (
                <AppContext.Provider value={value}>
                    {children}
                    <ToastContainer notifications={notifications} />
                </AppContext.Provider>
            );
        };

        const useAppContext = () => useContext(AppContext);

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Reusable Components
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const Input = ({ id, label, ...props }) => (
            <div><label htmlFor={id} className="block text-sm font-medium text-slate-700 mb-1">{label}</label><input id={id} {...props} className="mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md shadow-sm placeholder-slate-400 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm" /></div>
        );
        const Button = ({ children, onClick, type = "button", variant = "primary", disabled = false, fullWidth = false, isLoading = false }) => {
            const base = "inline-flex justify-center items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-offset-2 transition-colors";
            const variants = { primary: "text-white bg-indigo-600 hover:bg-indigo-700 focus:ring-indigo-500", secondary: "text-indigo-700 bg-indigo-100 hover:bg-indigo-200 focus:ring-indigo-500", danger: "text-white bg-red-600 hover:bg-red-700 focus:ring-red-500" };
            const width = fullWidth ? "w-full" : "";
            const disabledState = "disabled:opacity-50 disabled:cursor-not-allowed";
            return <button type={type} onClick={onClick} className={`${base} ${variants[variant]} ${width} ${disabledState}`} disabled={disabled || isLoading}>{isLoading ? <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div> : children}</button>;
        };
        const Spinner = () => <div className="flex justify-center items-center p-8"><div className="animate-spin rounded-full h-12 w-12 border-b-2 border-indigo-600"></div></div>;
        const Modal = ({ show, onClose, title, children }) => {
            if (!show) return null;
            return (
                <div className="fixed inset-0 bg-slate-600 bg-opacity-75 overflow-y-auto h-full w-full z-50 flex items-center justify-center p-4" onClick={onClose}>
                    <div className="relative mx-auto p-5 border w-full max-w-lg shadow-lg rounded-md bg-white" onClick={e => e.stopPropagation()}>
                        <div className="flex justify-between items-center pb-3 border-b"><h3 className="text-2xl font-bold text-slate-800">{title}</h3>{onClose && <button onClick={onClose} className="text-slate-400 hover:text-slate-600 text-3xl font-light">&times;</button>}</div>
                        <div className="mt-4">{children}</div>
                    </div>
                </div>
            );
        };
        const DetailItem = ({label, value}) => <div className="py-3 sm:grid sm:grid-cols-3 sm:gap-4"><dt className="text-sm font-medium text-slate-500">{label}</dt><dd className="mt-1 text-sm text-slate-900 sm:col-span-2 sm:mt-0">{value || 'N/A'}</dd></div>;
        const StatCard = ({ title, value, icon, onClick }) => (
            <div className="card flex items-center cursor-pointer transition-transform transform hover:-translate-y-1 hover:shadow-xl" onClick={onClick}>
                <div className="p-3 rounded-full bg-indigo-100 text-indigo-600">{icon}</div>
                <div className="ml-4"><p className="text-sm font-medium text-slate-500 truncate">{title}</p><p className="text-2xl font-semibold text-slate-900">{value}</p></div>
            </div>
        );
        const ToastContainer = ({ notifications }) => (
            <div className="toast-container">
                {notifications.map(n => <div key={n.id} className="toast">{n.message}</div>)}
            </div>
        );
        const TrashIcon = () => (
            <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor" strokeWidth={2}>
                <path strokeLinecap="round" strokeLinejoin="round" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
        );

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Authentication & Onboarding Views
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const LoginScreen = () => {
            const { login, navigateTo } = useAppContext();
            const [email, setEmail] = useState('');
            const [password, setPassword] = useState('');
            const [error, setError] = useState('');
            const handleSubmit = (e) => { e.preventDefault(); setError(''); if (!login(email, password)) { setError('Invalid email or password.'); } };
            return (
                <div className="flex items-center justify-center min-h-screen bg-slate-50 p-4">
                    <div className="w-full max-w-md">
                        <div className="bg-white shadow-md rounded-lg p-8">
                            <h1 className="text-3xl font-bold text-center text-slate-800 mb-6">Welcome Back</h1>
                            <div className="mb-4 bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4 rounded-md">
                                <p className="font-bold">Dev Login Info</p>
                                <ul className="list-disc list-inside text-sm mt-1">
                                    <li><b>Admin:</b> admin@test.com</li>
                                    <li><b>Worker (Done):</b> worker@test.com</li>
                                    <li><b>Worker (New):</b> new-worker@test.com</li>
                                    <li><b>Participant (Done):</b> participant@test.com</li>
                                    <li><b>Password (all):</b> password123</li>
                                </ul>
                            </div>
                            {error && <p className="bg-red-100 text-red-700 p-3 rounded-md mb-4 text-center">{error}</p>}
                            <form onSubmit={handleSubmit} className="space-y-6">
                                <Input id="email" label="Email Address" type="email" value={email} onChange={e => setEmail(e.target.value)} required placeholder="you@example.com" />
                                <Input id="password" label="Password" type="password" value={password} onChange={e => setPassword(e.target.value)} required placeholder="••••••••" />
                                <Button type="submit" fullWidth>Sign In</Button>
                            </form>
                            <p className="text-center text-sm text-slate-600 mt-8">Don't have an account?{' '}<a href="#" onClick={(e) => { e.preventDefault(); navigateTo('signup'); }} className="font-medium text-indigo-600 hover:text-indigo-500">Sign up</a></p>
                        </div>
                    </div>
                </div>
            );
        };
        
        const SignUpScreen = () => {
            const { navigateTo } = useAppContext();
            return (
                <div className="flex items-center justify-center min-h-screen bg-slate-50 p-4">
                    <div className="w-full max-w-md text-center">
                        <div className="bg-white shadow-md rounded-lg p-8">
                            <h1 className="text-3xl font-bold text-slate-800 mb-2">Create Your Account</h1><p className="text-slate-600 mb-8">First, tell us who you are.</p>
                            <div className="space-y-4"><Button onClick={() => navigateTo('workerSignUp')} fullWidth>I am a Support Worker</Button><Button onClick={() => navigateTo('participantSignUp')} fullWidth variant="secondary">I am a Participant</Button></div>
                            <p className="text-center text-sm text-slate-600 mt-8">Already have an account?{' '}<a href="#" onClick={(e) => { e.preventDefault(); navigateTo('login'); }} className="font-medium text-indigo-600 hover:text-indigo-500">Sign In</a></p>
                        </div>
                    </div>
                </div>
            );
        };

        const GenericSignUpForm = ({ role }) => {
            const { register, navigateTo } = useAppContext();
            const [formData, setFormData] = useState({ fullName: '', email: '', password: '' });
            const handleChange = (e) => setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            const handleSubmit = (e) => { e.preventDefault(); register({ ...formData, role }); };
            const roleTitle = role.charAt(0).toUpperCase() + role.slice(1);
            return (
                <div className="flex items-center justify-center min-h-screen bg-slate-50 p-4">
                    <div className="w-full max-w-md">
                        <div className="bg-white shadow-md rounded-lg p-8">
                            <h1 className="text-3xl font-bold text-center text-slate-800 mb-6">{roleTitle} Sign Up</h1>
                            <form onSubmit={handleSubmit} className="space-y-6">
                                <Input id="fullName" name="fullName" label="Full Name" value={formData.fullName} onChange={handleChange} required />
                                <Input id="email" name="email" label="Email Address" type="email" value={formData.email} onChange={handleChange} required />
                                <Input id="password" name="password" label="Password" type="password" value={formData.password} onChange={handleChange} required minLength="6" />
                                <Button type="submit" fullWidth>Create Account</Button>
                            </form>
                            <p className="text-center text-sm text-slate-600 mt-8"><a href="#" onClick={(e) => { e.preventDefault(); navigateTo('signup'); }} className="font-medium text-indigo-600 hover:text-indigo-500">&larr; Back</a></p>
                        </div>
                    </div>
                </div>
            );
        };

        const WorkerOnboarding = () => {
            const { user, updateUser, navigateTo } = useAppContext();
            const [step, setStep] = useState(1);
            const [formData, setFormData] = useState({ abn: '', street: '', suburb: '', state: 'NSW', postcode: '', accountName: '', bsb: '', accountNumber: '', startingInvoiceNumber: '101' });
            const handleChange = (e) => setFormData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            const handleNext = () => setStep(s => s + 1);
            const handleBack = () => setStep(s => s - 1);
            const handleSubmit = (e) => {
                e.preventDefault();
                const updatedUser = {
                    ...user,
                    personalDetails: { fullName: user.fullName, email: user.email, ...formData },
                    invoicing: { accountName: formData.accountName, bsb: formData.bsb, accountNumber: formData.accountNumber, startingInvoiceNumber: formData.startingInvoiceNumber },
                    profileComplete: true,
                };
                updateUser(updatedUser);
                navigateTo('overview');
            };
            return (
                 <div className="flex items-center justify-center min-h-screen bg-slate-50 p-4">
                    <div className="w-full max-w-2xl"><div className="bg-white shadow-md rounded-lg p-8">
                        <h1 className="text-3xl font-bold text-center text-slate-800 mb-2">Complete Your Worker Profile</h1><p className="text-center text-slate-600 mb-8">We need a few more details to get you set up.</p>
                        <div className="relative pt-1 mb-8"><div className="overflow-hidden h-2 mb-4 text-xs flex rounded bg-indigo-200"><div style={{ width: `${(step / 2) * 100}%` }} className="shadow-none flex flex-col text-center whitespace-nowrap text-white justify-center bg-indigo-500 transition-all duration-500"></div></div></div>
                        <form onSubmit={handleSubmit}>
                            {step === 1 && ( <div className="wizard-step space-y-6"> <h2 className="text-xl font-semibold text-slate-700">Personal & Business Details</h2> <Input id="abn" name="abn" label="ABN" value={formData.abn} onChange={handleChange} required /> <Input id="street" name="street" label="Street Address" value={formData.street} onChange={handleChange} required /> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <Input id="suburb" name="suburb" label="Suburb" value={formData.suburb} onChange={handleChange} required /> <Input id="postcode" name="postcode" label="Postcode" value={formData.postcode} onChange={handleChange} required /> <div><label htmlFor="state" className="block text-sm font-medium text-slate-700">State</label><select id="state" name="state" value={formData.state} onChange={handleChange} className="mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm"><option>NSW</option><option>VIC</option><option>QLD</option><option>WA</option><option>SA</option><option>TAS</option><option>ACT</option><option>NT</option></select></div> </div> <div className="flex justify-end pt-4"><Button onClick={handleNext}>Next &rarr;</Button></div> </div> )}
                            {step === 2 && ( <div className="wizard-step space-y-6"> <h2 className="text-xl font-semibold text-slate-700">Invoicing & Bank Details</h2> <Input id="accountName" name="accountName" label="Account Name" value={formData.accountName} onChange={handleChange} required /> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"><Input id="bsb" name="bsb" label="BSB" value={formData.bsb} onChange={handleChange} required /><Input id="accountNumber" name="accountNumber" label="Account Number" value={formData.accountNumber} onChange={handleChange} required /></div> <Input id="startingInvoiceNumber" name="startingInvoiceNumber" label="Starting Invoice Number" type="number" value={formData.startingInvoiceNumber} onChange={handleChange} required /> <div className="flex justify-between pt-4"><Button onClick={handleBack} variant="secondary">&larr; Back</Button><Button type="submit">Finish Setup</Button></div> </div> )}
                        </form>
                    </div></div>
                </div>
            );
        };

        const ParticipantOnboarding = () => {
            const { user, updateUser, navigateTo, addNotification } = useAppContext();
            const [choice, setChoice] = useState(null);
            const [formData, setFormData] = useState({ ndisNumber: '', address: '', billingDetails: { type: 'Plan Managed', managerEmail: '' }, linkedServices: [] });
            const [shareLink, setShareLink] = useState('');
            const handleChange = (e) => { const { name, value } = e.target; if (name === 'managerEmail' || name === 'type') { setFormData(prev => ({ ...prev, billingDetails: { ...prev.billingDetails, [name]: value } })); } else { setFormData(prev => ({ ...prev, [name]: value })); } };
            const handleSubmit = (e) => { e.preventDefault(); const updatedUser = { ...user, ...formData, profileComplete: true }; updateUser(updatedUser); navigateTo('overview'); };
            const handleShare = () => { setShareLink(`${window.location.origin}?setup_token=${user.id}`); setChoice('share'); };
            const handleCopyLink = () => {
                const dummy = document.createElement('textarea');
                document.body.appendChild(dummy);
                dummy.value = shareLink;
                dummy.select();
                document.execCommand('copy');
                document.body.removeChild(dummy);
                addNotification('Link copied to clipboard!');
            };

            if (choice === 'self') {
                return (
                    <div className="flex items-center justify-center min-h-screen bg-slate-50 p-4">
                        <div className="w-full max-w-2xl"><div className="bg-white shadow-md rounded-lg p-8 wizard-step">
                            <h1 className="text-3xl font-bold text-center text-slate-800 mb-6">Your NDIS Details</h1>
                            <form onSubmit={handleSubmit} className="space-y-6"><Input id="ndisNumber" name="ndisNumber" label="NDIS Number" value={formData.ndisNumber} onChange={handleChange} required /><Input id="address" name="address" label="Home Address" value={formData.address} onChange={handleChange} required /><div><label className="block text-sm font-medium text-slate-700">Billing Type</label><select name="type" value={formData.billingDetails.type} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-slate-300 focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm rounded-md"><option>Plan Managed</option><option>Self Managed</option></select></div><Input id="managerEmail" name="managerEmail" label={formData.billingDetails.type === 'Plan Managed' ? 'Plan Manager Email' : 'Your Billing Email'} type="email" value={formData.billingDetails.managerEmail} onChange={handleChange} required /><div className="flex justify-between pt-4"><Button onClick={() => setChoice(null)} variant="secondary">&larr; Back</Button><Button type="submit">Save & Continue</Button></div></form>
                        </div></div>
                    </div>
                );
            }
            if (choice === 'share') { return ( <div className="flex items-center justify-center min-h-screen bg-slate-50 p-4"><div className="w-full max-w-2xl text-center"><div className="bg-white shadow-md rounded-lg p-8 wizard-step"><h1 className="text-3xl font-bold text-slate-800 mb-4">Share for Assistance</h1><p className="text-slate-600 mb-6">Send this secure link to your support coordinator, plan manager, or trusted person to help set up your account.</p><div className="bg-slate-100 p-4 rounded-md flex items-center justify-between"><span className="text-sm text-slate-700 break-all">{shareLink}</span><Button onClick={handleCopyLink} variant="secondary">Copy</Button></div><p className="text-xs text-slate-500 mt-4">For security, this link is unique to you. Your dashboard will be unlocked once your details are completed.</p><div className="mt-8"><Button onClick={() => setChoice(null)} variant="secondary">&larr; Back</Button></div></div></div></div> ); }
            return ( <div className="flex items-center justify-center min-h-screen bg-slate-50 p-4"><div className="w-full max-w-2xl text-center"><div className="bg-white shadow-md rounded-lg p-8"><h1 className="text-3xl font-bold text-slate-800 mb-2">Complete Your Profile</h1><p className="text-slate-600 mb-8">Let's add your NDIS details to get started.</p><div className="space-y-4 md:space-y-0 md:flex md:space-x-4"><Button onClick={() => setChoice('self')} fullWidth>Set Up My NDIS Details Now</Button><Button onClick={handleShare} fullWidth variant="secondary">Share Link for Assistance</Button></div></div></div></div> );
        };

        const ProfileCompletionModal = () => {
            const { user, navigateTo } = useAppContext();
            const handleGoToSetup = () => { navigateTo(user.role === 'worker' ? 'workerOnboarding' : 'participantOnboarding'); };
            return ( <Modal show={true} title="Complete Your Profile"><p className="text-slate-700 mb-6">Welcome! To unlock your dashboard and access all features, you need to complete your profile first.</p><Button onClick={handleGoToSetup} fullWidth>Go to Profile Setup</Button></Modal> );
        };

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Application Views
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const AdminOverview = () => {
            const { navigateTo, appData } = useAppContext();
            const uninvoicedShifts = appData.shifts.filter(s => !s.invoiced).length;
            const workers = appData.users.filter(u => u.role === 'worker');
            const participants = appData.users.filter(u => u.role === 'participant');
            
            return (
                <div>
                    <h1 className="text-3xl font-bold text-slate-900 mb-6">Admin Overview</h1>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
                        <StatCard title="Total Workers" value={workers.length} icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path d="M17 20h5v-2a3 3 0 0 0-5.356-1.857M17 20H7m10 0v-2c0-.653-.224-1.26-.62-1.751M17 20h-2M7 20H2v-2a3 3 0 0 1 5.356-1.857M7 20v-2c0-.653.224-1.26.62-1.751M7 20h2m-4 3h4m-4-3v-2m4 3v-2m4-11a4 4 0 1 1-8 0 4 4 0 0 1 8 0Z" /></svg>} onClick={() => navigateTo('workers')} />
                        <StatCard title="Total Participants" value={participants.length} icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path d="M15 19.128a9.38 9.38 0 0 0 2.625.372 9.337 9.337 0 0 0 4.121-2.308M15 19.128v-3.86a2.25 2.25 0 0 1 3.86-1.732M15 19.128v-3.86a2.25 2.25 0 0 0-3.86-1.732M15 19.128c-3.112 0-5.625-2.513-5.625-5.625S11.888 7.878 15 7.878s5.625 2.513 5.625 5.625a5.632 5.632 0 0 1-1.125 3.375M6.375 11.25a2.25 2.25 0 0 1 4.5 0m4.5 0a2.25 2.25 0 0 1 4.5 0m-13.5 0a2.25 2.25 0 0 1 4.5 0" /></svg>} onClick={() => navigateTo('participants')} />
                        <StatCard title="Uninvoiced Shifts" value={uninvoicedShifts} icon={<svg xmlns="http://www.w3.org/2000/svg" className="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor"><path d="M12 6v6h4.5m4.5 0a9 9 0 1 1-18 0 9 9 0 0 1 18 0Z" /></svg>} onClick={() => navigateTo('invoicing')} />
                    </div>
                </div>
            );
        };
        
        const WorkersDashboard = () => {
            const { navigateTo, appData } = useAppContext();
            const workers = appData.users.filter(u => u.role === 'worker');
            return (
                <div><h1 className="text-3xl font-bold text-slate-900 mb-6">Workers</h1><div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">{workers.map(worker => (<div key={worker.id} className="card flex flex-col justify-between"><div><h2 className="text-xl font-bold text-slate-800">{worker.fullName}</h2><p className="text-sm text-slate-500">{worker.email}</p></div><div className="mt-4 flex space-x-2"><Button onClick={() => navigateTo('userProfile', worker.id)}>View Profile</Button><Button onClick={() => navigateTo('logShift', worker.id)} variant="secondary">Log Shift</Button></div></div>))}</div></div>
            );
        };
        
        const ParticipantsDashboard = () => {
            const { navigateTo, appData } = useAppContext();
            const participants = appData.users.filter(u => u.role === 'participant');
            const isPlanExpired = (endDate) => new Date(endDate) < new Date();

            return (
                <div>
                    <h1 className="text-3xl font-bold text-slate-900 mb-6">Participants</h1>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {participants.map(p => (
                            <div key={p.id} className="card">
                                <div className="flex justify-between items-start">
                                    <div>
                                        <h2 className="text-xl font-bold text-slate-800">{p.fullName}</h2>
                                        <p className="text-sm text-slate-500">NDIS #: {p.ndisNumber || 'N/A'}</p>
                                    </div>
                                    {isPlanExpired(p.planEndDate) && (
                                        <span className="px-2 py-1 text-xs font-semibold text-red-800 bg-red-100 rounded-full">Expired Plan</span>
                                    )}
                                </div>
                                <div className="mt-4">
                                    <Button onClick={() => navigateTo('userProfile', p.id)} variant="secondary">View Details</Button>
                                </div>
                            </div>
                        ))}
                    </div>
                </div>
            );
        };

        const JobBoard = () => {
            const { user, appData, setAppData, addNotification, navigateTo } = useAppContext();
            const [editingJob, setEditingJob] = useState(null);
            const [expandedJobId, setExpandedJobId] = useState(null);

            const handleSaveJob = (updatedJob) => {
                setAppData(prev => ({ ...prev, jobs: prev.jobs.map(j => j.id === updatedJob.id ? updatedJob : j) }));
                addNotification("Job updated!");
                setEditingJob(null);
            };

            const handleAcceptJob = (jobId) => {
                setAppData(prev => ({ ...prev, jobs: prev.jobs.map(j => j.id === jobId ? { ...j, status: 'Assigned', assignedWorkerId: user.id } : j) }));
                addNotification('Job accepted!');
            };

            const handleBroadcastJob = (job) => {
                const message = `New Job Available: ${job.details} for ${appData.users.find(p => p.id === job.participantId)?.fullName}. Reply "claim, ${job.id}" to accept.`;
                addNotification(`Job broadcasted (simulation): "${message}"`);
            };
            
            const getStatusColor = (status) => ({ Pending: 'bg-yellow-100 text-yellow-800', Assigned: 'bg-blue-100 text-blue-800', Completed: 'bg-green-100 text-green-800' }[status] || 'bg-slate-100 text-slate-800');
            
            const JobCard = ({ job }) => {
                const participant = appData.users.find(p => p.id === job.participantId);
                const isExpanded = expandedJobId === job.id;
                const repeatText = job.repeats === 'weekly' ? `Repeats on ${['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'].filter((_,i) => job.repeatDays.includes(i)).join(', ')}` : 'Does not repeat';
                return (
                    <div className="card cursor-pointer" onClick={() => setExpandedJobId(isExpanded ? null : job.id)}>
                        <div className="flex justify-between items-start"><div><h2 className="text-lg font-bold text-slate-800">{participant?.fullName}</h2><p className="text-sm text-slate-600 mt-1">{new Date(job.date + 'T' + job.time).toLocaleString('en-AU')}</p></div><span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${getStatusColor(job.status)}`}>{job.status}</span></div>
                        {isExpanded && (<div className="mt-4 pt-4 border-t fade-in"><p className="text-sm text-slate-700"><strong>Details:</strong> {job.details}</p><p className="text-sm text-slate-700 mt-1"><strong>Location:</strong> {job.location}</p><p className="text-sm text-slate-700 mt-1"><strong>Recurrence:</strong> {repeatText}</p><div className="mt-4 flex justify-end space-x-2">{user.role === 'admin' && job.status === 'Pending' && <Button onClick={(e) => { e.stopPropagation(); handleBroadcastJob(job); }} variant="secondary">Broadcast</Button>}{user.role === 'admin' && <Button onClick={(e) => { e.stopPropagation(); setEditingJob(job); }} variant="secondary">Edit</Button>}{user.role === 'worker' && job.status === 'Pending' && <Button onClick={(e) => { e.stopPropagation(); handleAcceptJob(job.id); }}>Accept</Button>}</div></div>)}
                    </div>
                );
            };

            const availableJobs = appData.jobs.filter(j => j.status === 'Pending');
            const myJobs = user.role === 'worker' ? appData.jobs.filter(j => j.assignedWorkerId === user.id) : appData.jobs.filter(j => j.participantId === user.id);
            
            return (
                <div>{editingJob && <EditJobModal job={editingJob} onSave={handleSaveJob} onClose={() => setEditingJob(null)} />}<div className="flex justify-between items-center mb-6"><h1 className="text-3xl font-bold text-slate-900">{user.role === 'admin' ? 'Job Management' : (user.role === 'worker' ? 'Job Board' : 'My Jobs')}</h1>{(user.role === 'admin' || user.role === 'participant') && <Button onClick={() => navigateTo('createJob')}>Create Job</Button>}</div>
                {user.role !== 'admin' && <div className="mb-8"><h2 className="text-xl font-bold text-slate-800 mb-4">{user.role === 'worker' ? 'My Accepted Jobs' : 'My Requested Jobs'}</h2><div className="space-y-4">{myJobs.length > 0 ? myJobs.map(job => <JobCard key={job.id} job={job} />) : <p className="text-slate-500 card">You have no jobs in this category.</p>}</div></div>}
                {(user.role === 'admin' || user.role === 'worker') && <div><h2 className="text-xl font-bold text-slate-800 mb-4">{user.role === 'admin' ? 'All Jobs' : 'Available Jobs'}</h2><div className="space-y-4">{(user.role === 'admin' ? appData.jobs : availableJobs).map(job => <JobCard key={job.id} job={job} />)}</div></div>}
                </div>
            );
        };

        const EditJobModal = ({ job, onSave, onClose }) => {
            const [jobData, setJobData] = useState(job);
            const handleChange = (e) => setJobData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            const handleSubmit = (e) => { e.preventDefault(); onSave(jobData); };
            return ( <Modal show={true} onClose={onClose} title="Edit Job"><form onSubmit={handleSubmit} className="space-y-4"><Input id="location" name="location" label="Job Location" value={jobData.location} onChange={handleChange} required /><Input id="details" name="details" label="Job Details" value={jobData.details} onChange={handleChange} required /><div><label className="block text-sm font-medium text-slate-700">Status</label><select name="status" value={jobData.status} onChange={handleChange} className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-slate-300 rounded-md"><option>Pending</option><option>Assigned</option><option>Completed</option></select></div><div className="flex justify-end space-x-3 pt-4"><Button onClick={onClose} variant="secondary">Cancel</Button><Button type="submit">Save Changes</Button></div></form></Modal> );
        };

        const CreateJob = () => {
            const { navigateTo, appData, user, setAppData, addNotification } = useAppContext();
            const [jobData, setJobData] = useState({ participantId: user.role === 'participant' ? user.id : '', serviceId: '', date: '', time: '', endTime: '', minDuration: '', location: '', details: '' });
            
            const selectedParticipant = appData.users.find(p => p.id === jobData.participantId);
            const availableServices = selectedParticipant ? appData.priceGuide.filter(item => selectedParticipant.linkedServices.includes(item.itemNumber)) : [];

            const handleChange = (e) => setJobData(prev => ({ ...prev, [e.target.name]: e.target.value }));
            
            const handleSubmit = (e) => {
                e.preventDefault();
                const newJob = { id: `job-${Date.now()}`, ...jobData, status: 'Pending' };
                setAppData(prev => ({...prev, jobs: [...prev.jobs, newJob]}));
                addNotification('Job created successfully!');
                navigateTo('jobs');
            };
            const participants = appData.users.filter(u => u.role === 'participant');
            return (
                <div>
                    <h1 className="text-3xl font-bold text-slate-900 mb-6">{user.role === 'participant' ? 'Request New Support' : 'Create New Job'}</h1>
                    <form onSubmit={handleSubmit} className="card space-y-6">
                        {user.role === 'admin' && (<div><label htmlFor="participantId" className="block text-sm font-medium text-slate-700">Participant</label><select id="participantId" name="participantId" value={jobData.participantId} onChange={handleChange} required className="mt-1 block w-full rounded-md"><option value="">Select participant</option>{participants.map(p => <option key={p.id} value={p.id}>{p.fullName}</option>)}</select></div>)}
                        
                        {jobData.participantId && (
                            <div>
                                <label htmlFor="serviceId" className="block text-sm font-medium text-slate-700">Support Service</label>
                                <select id="serviceId" name="serviceId" value={jobData.serviceId} onChange={handleChange} className="mt-1 block w-full rounded-md">
                                    <option value="">Select a service</option>
                                    {availableServices.map(s => <option key={s.itemNumber} value={s.itemNumber}>{s.itemName}</option>)}
                                </select>
                            </div>
                        )}

                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <Input id="date" name="date" type="date" label="Start Date" value={jobData.date} onChange={handleChange} required />
                            <Input id="time" name="time" type="time" label="Start Time" value={jobData.time} onChange={handleChange} required />
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <Input id="endTime" name="endTime" type="time" label="End Time (Optional)" value={jobData.endTime} onChange={handleChange} />
                            <Input id="minDuration" name="minDuration" type="number" label="Min. Duration (hours, Optional)" value={jobData.minDuration} onChange={handleChange} />
                        </div>
                        <Input id="details" name="details" label="Job Details" value={jobData.details} onChange={handleChange} />
                        <div className="flex justify-end space-x-3">
                            <Button onClick={() => navigateTo('jobs')} variant="secondary">Cancel</Button>
                            <Button type="submit">Create Job</Button>
                        </div>
                    </form>
                </div>
            );
        };
        
        const InvoicingHub = () => {
            const { navigateTo, appData } = useAppContext();
            const uninvoicedShifts = appData.shifts.filter(s => !s.invoiced);
            const participantsWithUninvoicedShifts = [...new Set(uninvoicedShifts.map(s => s.participantId))].map(id => appData.users.find(u => u.id === id)).filter(Boolean);
            return (
                <div><h1 className="text-3xl font-bold text-slate-900 mb-6">Invoicing</h1><div className="card"><h2 className="text-xl font-bold text-slate-800">Participants with Uninvoiced Shifts</h2>{participantsWithUninvoicedShifts.length > 0 ? (<ul className="divide-y divide-slate-200 mt-4">{participantsWithUninvoicedShifts.map(p => (<li key={p.id} className="flex justify-between items-center py-5"><div><p className="font-semibold">{p.fullName}</p><p className="text-sm text-slate-500">NDIS #: {p.ndisNumber}</p></div><Button onClick={() => navigateTo('participantInvoicing', p.id)}>Create Invoice</Button></li>))}</ul>) : (<p className="mt-4 text-slate-500">No participants have uninvoiced shifts.</p>)}</div></div>
            );
        };

        const InvoicePreviewModal = ({ show, onClose, onConfirm, onOpen, invoiceData }) => {
            if (!show) return null;
            const { tableBody, grandTotal, participant, worker } = invoiceData;
            return (
                <Modal show={show} onClose={onClose} title="Invoice Preview">
                    <div className="text-sm text-slate-700 p-4 border rounded-md">
                        <div className="grid grid-cols-2 gap-4 mb-6">
                            <div><strong className="block">From:</strong>{worker.personalDetails.fullName}<br/>ABN: {worker.personalDetails.abn}</div>
                            <div className="text-right"><strong>To:</strong><br/>{participant.fullName}<br/>NDIS: {participant.ndisNumber}<br/>{participant.address}</div>
                        </div>
                        <table className="w-full text-left table-auto">
                            <thead><tr className="bg-slate-100"><th className="p-2 font-semibold">Date</th><th className="p-2 font-semibold">Support</th><th className="p-2 font-semibold">Duration/KM</th><th className="p-2 font-semibold text-right">Total</th></tr></thead>
                            <tbody>
                                {tableBody.map((row, i) => (
                                    <tr className="border-b" key={i}><td className="p-2">{row.date}</td><td className="p-2">{row.support}</td><td className="p-2">{row.qty}</td><td className="p-2 text-right">{row.total}</td></tr>
                                ))}
                            </tbody>
                            <tfoot><tr className="font-bold"><td colSpan="3" className="p-2 text-right">Grand Total:</td><td className="p-2 text-right">${grandTotal.toFixed(2)}</td></tr></tfoot>
                        </table>
                    </div>
                    <div className="flex justify-end space-x-3 mt-6">
                        <Button onClick={onClose} variant="secondary">Cancel</Button>
                        <Button onClick={onOpen} variant="secondary">Open PDF</Button>
                        {onConfirm && <Button onClick={onConfirm}>Confirm & Queue</Button>}
                    </div>
                </Modal>
            );
        };

        const ParticipantInvoicing = () => {
            const { appData, setAppData, activeId, navigateTo, addNotification } = useAppContext();
            const [invoiceData, setInvoiceData] = useState(null);
            const [showPreview, setShowPreview] = useState(false);
            const participant = appData.users.find(p => p.id === activeId);
            const shiftsToInvoice = appData.shifts.filter(s => s.participantId === activeId && !s.invoiced);

            const generateInvoiceData = () => {
                const firstShiftWorker = appData.users.find(w => w.id === shiftsToInvoice[0]?.workerId);
                if (!firstShiftWorker || !firstShiftWorker.profileComplete) { addNotification("Error: Worker profile is incomplete."); return null; }
                const tableBody = []; let grandTotal = 0;
                shiftsToInvoice.forEach(shift => {
                    const supportItem = appData.priceGuide.find(item => item.itemNumber === shift.supportItemId);
                    if (!supportItem) return;
                    const total = shift.durationHours * supportItem.rate; grandTotal += total;
                    tableBody.push({ date: new Date(shift.shiftDate).toLocaleDateString('en-AU'), support: `${supportItem.itemName} (${supportItem.itemNumber})`, qty: `${shift.durationHours} hrs`, rate: supportItem.rate, total: `$${total.toFixed(2)}` });
                    if (shift.isTravelClaimed && shift.travelKms > 0) {
                        const travelItem = appData.priceGuide.find(item => item.itemNumber === supportItem.travelItemNumber);
                        if (travelItem) {
                            const travelTotal = shift.travelKms * travelItem.rate; grandTotal += travelTotal;
                            tableBody.push({ date: new Date(shift.shiftDate).toLocaleDateString('en-AU'), support: `${travelItem.itemName} (${travelItem.itemNumber})`, qty: `${shift.travelKms} km`, rate: travelItem.rate, total: `$${travelTotal.toFixed(2)}` });
                        }
                    }
                });
                return { tableBody, grandTotal, participant, worker: firstShiftWorker, shiftsToInvoice };
            };

            const handleGenerateInvoice = () => { if (shiftsToInvoice.length === 0) return; const data = generateInvoiceData(); if (data) { setInvoiceData(data); setShowPreview(true); } };
            
            const handleConfirmInvoice = () => {
                setAppData(prev => {
                    const newInvoices = [...prev.invoices, { id: `inv-${Date.now()}`, participantId: activeId, shiftIds: invoiceData.shiftsToInvoice.map(s => s.id), status: 'queued' }];
                    const updatedShifts = prev.shifts.map(s => invoiceData.shiftsToInvoice.some(is => is.id === s.id) ? { ...s, invoiced: true } : s);
                    const updatedUsers = prev.users.map(u => u.id === invoiceData.worker.id ? { ...u, invoicing: { ...u.invoicing, startingInvoiceNumber: (parseInt(u.invoicing.startingInvoiceNumber) + 1).toString() } } : u);
                    return { ...prev, invoices: newInvoices, shifts: updatedShifts, users: updatedUsers };
                });
                addNotification(`Invoice for ${participant.fullName} has been queued.`);
                setShowPreview(false);
                setInvoiceData(null);
                navigateTo('invoicing');
            };

            const generateAndOpenPDF = () => {
                const { tableBody, grandTotal, participant, worker } = invoiceData;
                const doc = new jsPDF();
                doc.setFontSize(20); doc.text("Tax Invoice", 14, 22);
                doc.setFontSize(12); doc.text(`Invoice #${worker.invoicing.startingInvoiceNumber}`, 14, 30);
                doc.text(`Date: ${new Date().toLocaleDateString('en-AU')}`, 14, 36);
                doc.setFontSize(10);
                doc.text("From:", 14, 50);
                doc.text(worker.personalDetails.fullName, 14, 55);
                doc.text(`ABN: ${worker.personalDetails.abn}`, 14, 60);
                doc.text(`${worker.personalDetails.street}, ${worker.personalDetails.suburb}, ${worker.personalDetails.state} ${worker.personalDetails.postcode}`, 14, 65);
                doc.text("Bill To:", 130, 50);
                doc.text(participant.fullName, 130, 55);
                doc.text(`NDIS: ${participant.ndisNumber}`, 130, 60);
                doc.text(participant.address, 130, 65);
                const head = [['Date', 'Support Item', 'Item Code', 'Quantity', 'Rate', 'Total']];
                const body = tableBody.map(row => {
                    const match = row.support.match(/(.*) \((.*)\)/);
                    const itemName = match ? match[1] : row.support;
                    const itemCode = match ? match[2] : '';
                    return [row.date, itemName, itemCode, row.qty, `$${row.rate.toFixed(2)}`, row.total];
                });
                doc.autoTable({ head, body, startY: 75 });
                const finalY = doc.lastAutoTable.finalY || 100;
                doc.setFontSize(14); doc.text(`Total: $${grandTotal.toFixed(2)}`, 14, finalY + 15);
                doc.setFontSize(10); doc.text("Payment Details:", 14, finalY + 30);
                doc.text(`Account Name: ${worker.invoicing.accountName}`, 14, finalY + 35);
                doc.text(`BSB: ${worker.invoicing.bsb}`, 14, finalY + 40);
                doc.text(`Account Number: ${worker.invoicing.accountNumber}`, 14, finalY + 45);
                doc.output('dataurlnewwindow');
            };
            
            if (!participant) return <Spinner />;
            return (
                <div>
                    <InvoicePreviewModal show={showPreview} onClose={() => setShowPreview(false)} onConfirm={handleConfirmInvoice} onOpen={generateAndOpenPDF} invoiceData={invoiceData} />
                    <h1 className="text-3xl font-bold text-slate-900">Invoicing for {participant.fullName}</h1>
                    <div className="card mt-6">
                        <div className="flex justify-between items-center"><h2 className="text-xl font-bold">Uninvoiced Shifts</h2><Button onClick={handleGenerateInvoice} disabled={shiftsToInvoice.length === 0}>Generate Invoice</Button></div>
                        <div className="mt-4 flow-root"><table className="min-w-full divide-y divide-slate-300"><thead><tr><th className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-slate-900 sm:pl-0">Worker</th><th className="px-3 py-3.5 text-left text-sm font-semibold text-slate-900">Date</th><th className="px-3 py-3.5 text-left text-sm font-semibold text-slate-900">Duration</th></tr></thead><tbody className="divide-y divide-slate-200">{shiftsToInvoice.length > 0 ? shiftsToInvoice.map(shift => { const worker = appData.users.find(w => w.id === shift.workerId); return (<tr key={shift.id}><td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-slate-900 sm:pl-0">{worker?.fullName}</td><td className="whitespace-nowrap px-3 py-4 text-sm text-slate-500">{new Date(shift.shiftDate).toLocaleDateString('en-AU')}</td><td className="whitespace-nowrap px-3 py-4 text-sm text-slate-500">{shift.durationHours} hrs</td></tr>) }) : (<tr><td colSpan="3" className="text-center py-4 text-slate-500">No uninvoiced shifts.</td></tr>)}</tbody></table></div>
                    </div>
                </div>
            );
        };

        const Settings = () => {
            const { appData, setAppData, addNotification } = useAppContext();
            const [fileName, setFileName] = useState('');
            const [editingItem, setEditingItem] = useState(null);

            const handleFileUpload = (e) => {
                const file = e.target.files[0]; if (!file) return; setFileName(file.name); const reader = new FileReader();
                reader.onload = (evt) => {
                    const bstr = evt.target.result; const wb = XLSX.read(bstr, { type: 'binary' }); const wsname = wb.SheetNames[0]; const ws = wb.Sheets[wsname]; const data = XLSX.utils.sheet_to_json(ws);
                    const parsedData = data.map(row => ({ itemNumber: row['Item Number'], itemName: row['Item Name'], unit: row['Unit'], rate: parseFloat(row['Rate (AUD)']), travelItemNumber: row['Travel Item Number'] || null })).filter(item => item.itemNumber && item.rate);
                    if (parsedData.length > 0) {
                        setAppData(prev => ({...prev, priceGuide: parsedData }));
                        addNotification('Price guide uploaded successfully!');
                    } else {
                        addNotification('Could not parse file or file is empty.');
                    }
                }; reader.readAsBinaryString(file);
            };

            const handleSaveLink = (updatedItem) => {
                setAppData(prev => ({
                    ...prev,
                    priceGuide: prev.priceGuide.map(item => item.itemNumber === updatedItem.itemNumber ? updatedItem : item)
                }));
                addNotification('Travel link updated!');
                setEditingItem(null);
            };

            return (
                <div>
                    {editingItem && <EditPriceGuideItemModal item={editingItem} onSave={handleSaveLink} onClose={() => setEditingItem(null)} />}
                    <h1 className="text-3xl font-bold text-slate-900 mb-6">Settings</h1>
                    <div className="card"><h2 className="text-xl font-bold text-slate-800">Upload NDIS Price Guide</h2><p className="text-sm text-slate-600 mt-2">Upload a CSV or Excel file with columns: "Item Number", "Item Name", "Unit", "Rate (AUD)", "Travel Item Number".</p><div className="mt-4"><label className="w-full flex items-center px-4 py-2 bg-white text-blue-500 rounded-lg shadow-lg tracking-wide uppercase border border-blue-500 cursor-pointer hover:bg-blue-500 hover:text-white"><svg className="w-6 h-6 mr-2" fill="currentColor" viewBox="0 0 20 20"><path d="M16.88 9.1A4 4 0 0 1 16 17H5a5 5 0 0 1-1-9.9V7a3 3 0 0 1 4.52-2.59A4.98 4.98 0 0 1 17 8c0 .38-.04.74-.12 1.1zM11 11h3l-4 4-4-4h3v-3h2v3z" /></svg><span className="text-sm leading-normal">{fileName || 'Select a file'}</span><input type='file' className="hidden" onChange={handleFileUpload} accept=".csv, application/vnd.openxmlformats-officedocument.spreadsheetml.sheet, application/vnd.ms-excel" /></label></div></div>
                    <div className="card mt-6"><h2 className="text-xl font-bold text-slate-800">Current Price Guide</h2><div className="mt-4 flow-root"><table className="min-w-full divide-y divide-slate-300"><thead><tr><th className="py-3.5 pl-4 pr-3 text-left text-sm font-semibold text-slate-900 sm:pl-0">Item Number</th><th className="px-3 py-3.5 text-left text-sm font-semibold text-slate-900">Item Name</th><th className="px-3 py-3.5 text-left text-sm font-semibold text-slate-900">Linked Travel</th><th className="relative py-3.5 pl-3 pr-4 sm:pr-0"><span className="sr-only">Edit</span></th></tr></thead><tbody className="divide-y divide-slate-200">{appData.priceGuide.map(item => (<tr key={item.itemNumber}><td className="whitespace-nowrap py-4 pl-4 pr-3 text-sm font-medium text-slate-900 sm:pl-0">{item.itemNumber}</td><td className="whitespace-nowrap px-3 py-4 text-sm text-slate-500">{item.itemName}</td><td className="whitespace-nowrap px-3 py-4 text-sm text-slate-500">{item.travelItemNumber || 'N/A'}</td><td className="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-0">{item.unit === 'Hour' && <Button onClick={() => setEditingItem(item)} variant="secondary">Edit</Button>}</td></tr>))}</tbody></table></div></div>
                </div>
            );
        };
        
        const EditPriceGuideItemModal = ({ item, onSave, onClose }) => {
            const { appData } = useAppContext();
            const [linkedTravel, setLinkedTravel] = useState(item.travelItemNumber || '');
            const travelCodes = appData.priceGuide.filter(i => i.unit === 'km');

            const handleSubmit = (e) => {
                e.preventDefault();
                onSave({ ...item, travelItemNumber: linkedTravel });
            };

            return (
                <Modal show={true} onClose={onClose} title={`Link Travel for ${item.itemName}`}>
                    <form onSubmit={handleSubmit} className="space-y-4">
                        <p className="text-sm text-slate-600">Select a travel code to automatically associate with this support item on invoices.</p>
                        <div>
                            <label htmlFor="travelLink" className="block text-sm font-medium text-slate-700">Travel Item</label>
                            <select id="travelLink" value={linkedTravel} onChange={e => setLinkedTravel(e.target.value)} className="mt-1 block w-full rounded-md border-slate-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50">
                                <option value="">None</option>
                                {travelCodes.map(t => <option key={t.itemNumber} value={t.itemNumber}>{t.itemName} ({t.itemNumber})</option>)}
                            </select>
                        </div>
                        <div className="flex justify-end space-x-3 pt-4">
                            <Button onClick={onClose} variant="secondary">Cancel</Button>
                            <Button type="submit">Save Link</Button>
                        </div>
                    </form>
                </Modal>
            );
        };

        const UserProfile = () => {
            const { appData, activeId } = useAppContext();
            const profileUser = appData.users.find(u => u.id === activeId);
            if (!profileUser) return <p>User not found.</p>;
            return (
                <div>
                    <h1 className="text-3xl font-bold text-slate-900 mb-6">Profile: {profileUser.fullName}</h1>
                    <div className="card">
                        <div className="border-t border-slate-200">
                            {profileUser.role === 'admin' && <dl className="divide-y"><DetailItem label="Full Name" value={profileUser.fullName} /><DetailItem label="Email" value={profileUser.email} /></dl>}
                            {profileUser.role === 'worker' && profileUser.personalDetails && <dl className="divide-y"><DetailItem label="Full Name" value={profileUser.personalDetails.fullName} /><DetailItem label="Email" value={profileUser.email} /><DetailItem label="ABN" value={profileUser.personalDetails.abn} /></dl>}
                            {profileUser.role === 'participant' && profileUser.billingDetails && <dl className="divide-y"><DetailItem label="Full Name" value={profileUser.fullName} /><DetailItem label="NDIS Number" value={profileUser.ndisNumber} /><DetailItem label="Billing Email" value={profileUser.billingDetails.managerEmail} /></dl>}
                        </div>
                    </div>
                </div>
            );
        };

        const MyProfile = () => {
            const { user, updateUser } = useAppContext();
            const [isEditing, setIsEditing] = useState(false);
            const handleSave = (updatedData) => { updateUser(updatedData); setIsEditing(false); };
            if (!user) return <Spinner />;
            return (
                <div>{isEditing && <EditProfileModal user={user} onSave={handleSave} onClose={() => setIsEditing(false)} />}<h1 className="text-3xl font-bold text-slate-900 mb-6">My Profile</h1><div className="card"><div className="flex justify-between items-center"><h2 className="text-xl font-bold">My Details</h2><div><Button onClick={() => setIsEditing(true)} variant="secondary">Edit</Button></div></div><div className="mt-4 border-t">{user.role === 'worker' && user.personalDetails && <dl className="divide-y"><DetailItem label="Full Name" value={user.personalDetails.fullName} /><DetailItem label="Email" value={user.email} /><DetailItem label="ABN" value={user.personalDetails.abn} /></dl>}{user.role === 'participant' && user.billingDetails && <dl className="divide-y"><DetailItem label="Full Name" value={user.fullName} /><DetailItem label="NDIS Number" value={user.ndisNumber} /><DetailItem label="Billing Email" value={user.billingDetails.managerEmail} /></dl>}</div></div></div>
            );
        };

        const EditProfileModal = ({ user, onSave, onClose }) => {
            const [formData, setFormData] = useState(user);
            const handleChange = (e) => { const { name, value } = e.target; const [section, field] = name.split('.'); if (field) { setFormData(prev => ({ ...prev, [section]: { ...prev[section], [field]: value } })); } else { setFormData(prev => ({ ...prev, [name]: value })); } };
            const handleSubmit = (e) => { e.preventDefault(); onSave(formData); };
            return (
                <Modal show={true} onClose={onClose} title="Edit Profile">
                    <form onSubmit={handleSubmit} className="space-y-4">
                        {user.role === 'worker' && user.personalDetails && <>
                            <Input id="pd.fullName" name="personalDetails.fullName" label="Full Name" value={formData.personalDetails.fullName} onChange={handleChange} />
                            <Input id="pd.abn" name="personalDetails.abn" label="ABN" value={formData.personalDetails.abn} onChange={handleChange} />
                        </>}
                        {user.role === 'participant' && <>
                            <Input id="name" name="fullName" label="Full Name" value={formData.fullName} onChange={handleChange} />
                            <Input id="ndisNumber" name="ndisNumber" label="NDIS Number" value={formData.ndisNumber} onChange={handleChange} />
                            <Input id="billingDetails.managerEmail" name="billingDetails.managerEmail" label="Billing Email" value={formData.billingDetails.managerEmail} />
                        </>}
                        <div className="flex justify-end space-x-3 pt-4"><Button onClick={onClose} variant="secondary">Cancel</Button><Button type="submit">Save Changes</Button></div>
                    </form>
                </Modal>
            );
        };

        const LogShift = () => {
            const { navigateTo, user, appData, setAppData, addNotification } = useAppContext();
            const [shiftData, setShiftData] = useState({ participantId: '', shiftDate: '', startTime: '', endTime: '', notes: '', supportItemId: appData.priceGuide.find(i=>i.unit==='Hour')?.itemNumber || '', isTravelClaimed: false, startOdometer: '', endOdometer: '' });
            const handleChange = (e) => { const { name, value, type, checked } = e.target; setShiftData(prev => ({ ...prev, [name]: type === 'checkbox' ? checked : value })); };
            const handleSubmit = (e) => {
                e.preventDefault();
                const startDateTime = new Date(`${shiftData.shiftDate}T${shiftData.startTime}`);
                const endDateTime = new Date(`${shiftData.shiftDate}T${shiftData.endTime}`);
                if (endDateTime <= startDateTime) {
                    addNotification("End time must be after start time."); return;
                }
                let travelKms = 0;
                if (shiftData.isTravelClaimed) {
                    const startOdo = parseFloat(shiftData.startOdometer);
                    const endOdo = parseFloat(shiftData.endOdometer);
                    if (isNaN(startOdo) || isNaN(endOdo) || endOdo < startOdo) {
                        addNotification("Invalid odometer readings."); return;
                    }
                    travelKms = endOdo - startOdo;
                }
                const durationHours = (endDateTime - startDateTime) / 3600000;
                const participant = appData.users.find(p => p.id === shiftData.participantId);
                const newShift = {
                    id: `shift-${Date.now()}`, workerId: user.id, participantId: shiftData.participantId, participantName: participant.fullName, shiftDate: shiftData.shiftDate, startTime: shiftData.startTime, endTime: shiftData.endTime,
                    notes: shiftData.notes, durationHours: durationHours.toFixed(2), supportItemId: shiftData.supportItemId, isTravelClaimed: shiftData.isTravelClaimed, travelKms: travelKms, invoiced: false,
                };
                setAppData(prev => ({ ...prev, shifts: [...prev.shifts, newShift] }));
                addNotification('Shift logged successfully!');
                navigateTo('overview');
            };
             return (
                <div>
                    <h1 className="text-3xl font-bold text-slate-900 mb-2">Log Shift</h1>
                    <form onSubmit={handleSubmit} className="card space-y-6">
                        <div>
                            <label htmlFor="participantId" className="block text-sm font-medium text-slate-700 mb-1">Participant</label>
                            <select id="participantId" name="participantId" value={shiftData.participantId} onChange={handleChange} required className="mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                <option value="">Select a participant</option>
                                {appData.users.filter(u => u.role === 'participant').map(p => <option key={p.id} value={p.id}>{p.fullName}</option>)}
                            </select>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <Input id="shiftDate" name="shiftDate" type="date" label="Shift Date" value={shiftData.shiftDate} onChange={handleChange} required />
                            <div>
                                <label htmlFor="supportItemId" className="block text-sm font-medium text-slate-700 mb-1">Support Delivered</label>
                                <select id="supportItemId" name="supportItemId" value={shiftData.supportItemId} onChange={handleChange} required className="mt-1 block w-full px-3 py-2 bg-white border border-slate-300 rounded-md shadow-sm focus:outline-none focus:ring-indigo-500 focus:border-indigo-500 sm:text-sm">
                                    {appData.priceGuide.filter(item => item.unit === 'Hour').map(item => <option key={item.itemNumber} value={item.itemNumber}>{item.itemName} - ${item.rate.toFixed(2)}/hr</option>)}
                                </select>
                            </div>
                        </div>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <Input id="startTime" name="startTime" type="time" label="Start Time" value={shiftData.startTime} onChange={handleChange} required />
                            <Input id="endTime" name="endTime" type="time" label="End Time" value={shiftData.endTime} onChange={handleChange} required />
                        </div>
                        <div>
                            <label htmlFor="notes" className="block text-sm font-medium text-slate-700">Shift Notes</label>
                            <textarea id="notes" name="notes" rows="3" value={shiftData.notes} onChange={handleChange} className="mt-1 block w-full rounded-md border-slate-300 shadow-sm"></textarea>
                        </div>
                        <div className="flex items-center">
                            <input id="isTravelClaimed" name="isTravelClaimed" type="checkbox" checked={shiftData.isTravelClaimed} onChange={handleChange} className="h-4 w-4 text-indigo-600 border-slate-300 rounded" />
                            <label htmlFor="isTravelClaimed" className="ml-2 block text-sm text-slate-900">Claim Travel?</label>
                        </div>
                        {shiftData.isTravelClaimed && 
                            <div className="fade-in grid grid-cols-1 md:grid-cols-2 gap-6">
                                <Input id="startOdometer" name="startOdometer" type="number" label="Start Odometer (km)" value={shiftData.startOdometer} onChange={handleChange} required />
                                <Input id="endOdometer" name="endOdometer" type="number" label="End Odometer (km)" value={shiftData.endOdometer} onChange={handleChange} required />
                            </div>
                        }
                        <div className="flex justify-end space-x-3">
                            <Button onClick={() => navigateTo('overview')} variant="secondary">Cancel</Button>
                            <Button type="submit">Log Shift</Button>
                        </div>
                    </form>
                </div>
            );
        };
        
        const CreateCustomInvoice = () => {
            const { user, appData, setAppData, navigateTo, addNotification } = useAppContext();
            const [participantId, setParticipantId] = useState('');
            const [invoiceDate, setInvoiceDate] = useState(new Date().toISOString().split('T')[0]);
            const [lineItems, setLineItems] = useState([{ id: 1, itemId: '', qty: 1 }]);
            const [showPreview, setShowPreview] = useState(false);
            const [previewData, setPreviewData] = useState(null);

            const grandTotal = useMemo(() => {
                return lineItems.reduce((total, line) => {
                    const priceItem = appData.priceGuide.find(p => p.itemNumber === line.itemId);
                    if (!priceItem || isNaN(parseFloat(line.qty))) return total;
                    return total + (parseFloat(line.qty) * priceItem.rate);
                }, 0);
            }, [lineItems, appData.priceGuide]);
            
            const handleAddItem = () => setLineItems([...lineItems, { id: Date.now(), itemId: '', qty: 1 }]);
            const handleRemoveItem = (id) => setLineItems(lineItems.filter(item => item.id !== id));
            const handleItemChange = (id, field, value) => {
                setLineItems(lineItems.map(item => item.id === id ? { ...item, [field]: value } : item));
            };

            const generatePreviewData = () => {
                const participant = appData.users.find(p => p.id === participantId);
                if (!participant) { addNotification("Please select a participant."); return; }
                
                let grandTotal = 0;
                const tableBody = lineItems.map(line => {
                    const priceItem = appData.priceGuide.find(p => p.itemNumber === line.itemId);
                    if (!priceItem) return null;
                    const total = line.qty * priceItem.rate;
                    grandTotal += total;
                    return {
                        date: new Date(invoiceDate).toLocaleDateString('en-AU'),
                        support: `${priceItem.itemName} (${priceItem.itemNumber})`,
                        qty: `${line.qty} ${priceItem.unit === 'Hour' ? 'hrs' : 'km'}`,
                        rate: priceItem.rate,
                        total: `$${total.toFixed(2)}`
                    };
                }).filter(Boolean);

                if (tableBody.length === 0) { addNotification("Please add at least one valid line item."); return; }

                const data = { tableBody, grandTotal, participant, worker: user };
                setPreviewData(data);
                setShowPreview(true);
            };
            
            const handleSaveInvoice = () => {
                // This would save the invoice to appData, but for now we just use the preview
                addNotification("Invoice saved (simulation).");
                navigateTo('overview');
            };

            return (
                <div>
                    {showPreview && <InvoicePreviewModal show={showPreview} onClose={() => setShowPreview(false)} onOpen={() => {/* PDF generation can be hooked here */}} invoiceData={previewData} onConfirm={handleSaveInvoice} />}
                    <h1 className="text-3xl font-bold text-slate-900 mb-6">Create Custom Invoice</h1>
                    <div className="card space-y-6">
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <div>
                                <label htmlFor="participantId" className="block text-sm font-medium text-slate-700 mb-1">Participant</label>
                                <select id="participantId" value={participantId} onChange={e => setParticipantId(e.target.value)} required className="mt-1 block w-full rounded-md border-slate-300 shadow-sm"><option value="">Select a participant</option>{appData.users.filter(u => u.role === 'participant').map(p => <option key={p.id} value={p.id}>{p.fullName}</option>)}</select>
                            </div>
                            <Input id="invoiceDate" type="date" label="Invoice Date" value={invoiceDate} onChange={e => setInvoiceDate(e.target.value)} />
                        </div>
                        <h2 className="text-xl font-semibold text-slate-800 border-b pb-2">Line Items</h2>
                        <div className="space-y-4">
                            {lineItems.map((item, index) => (
                                <div key={item.id} className="grid grid-cols-12 gap-4 items-end fade-in p-4 border border-slate-200 rounded-lg">
                                    <div className="col-span-12 md:col-span-6"><label className="block text-sm font-medium text-slate-700">Service</label><select value={item.itemId} onChange={e => handleItemChange(item.id, 'itemId', e.target.value)} className="mt-1 block w-full rounded-md border-slate-300 shadow-sm"><option value="">Select an item</option>{appData.priceGuide.map(p => <option key={p.itemNumber} value={p.itemNumber}>{p.itemName}</option>)}</select></div>
                                    <div className="col-span-6 md:col-span-2"><Input label="Qty" type="number" value={item.qty} onChange={e => handleItemChange(item.id, 'qty', e.target.value)} min="0.1" step="0.1" /></div>
                                    <div className="col-span-6 md:col-span-3"><label className="block text-sm font-medium text-slate-700">Total</label><p className="mt-2 p-2 rounded-md bg-slate-100 text-right">${((appData.priceGuide.find(p => p.itemNumber === item.itemId)?.rate || 0) * item.qty).toFixed(2)}</p></div>
                                    <div className="col-span-12 md:col-span-1 flex justify-end"><Button onClick={() => handleRemoveItem(item.id)} variant="danger"><TrashIcon /></Button></div>
                                </div>
                            ))}
                        </div>
                        <div className="pt-2">
                            <Button onClick={handleAddItem} variant="secondary">+ Add Line Item</Button>
                        </div>
                        <div className="flex justify-between items-center pt-6 border-t mt-6">
                            <div>
                                <p className="text-lg font-semibold text-slate-600">Grand Total</p>
                                <p className="text-3xl font-bold text-slate-900">${grandTotal.toFixed(2)}</p>
                            </div>
                            <Button onClick={generatePreviewData}>Preview & Save Invoice</Button>
                        </div>
                    </div>
                </div>
            );
        };
        
        const SmsAutomation = () => {
            const { appData, setAppData, addNotification } = useAppContext();
            const { smsAutomations = [], users, jobs, draftShifts } = appData;
            const [simSms, setSimSms] = useState({ from: '', message: '' });

            const handleUpdateRule = (id, field, value) => {
                setAppData(prev => ({
                    ...prev,
                    smsAutomations: prev.smsAutomations.map(rule => 
                        rule.id === id ? { ...rule, [field]: value } : rule
                    )
                }));
            };
            
            const handleAddRule = () => {
                const newRule = { id: `auto-${Date.now()}`, trigger: '', action: 'create_draft_shift', enabled: true };
                setAppData(prev => ({...prev, smsAutomations: [...prev.smsAutomations, newRule]}));
            };
            
            const handleDeleteRule = (id) => {
                setAppData(prev => ({...prev, smsAutomations: prev.smsAutomations.filter(rule => rule.id !== id)}));
            };

            const handleSimulateSms = () => {
                const worker = users.find(u => u.personalDetails?.phoneNumber === simSms.from);
                if (!worker) {
                    addNotification(`No worker found with phone number ${simSms.from}`);
                    return;
                }

                const parts = simSms.message.split(',').map(p => p.trim());
                const command = parts[0].toLowerCase();

                const rule = smsAutomations.find(r => r.trigger.toLowerCase() === command);
                if (!rule || !rule.enabled) {
                    addNotification(`No enabled automation found for trigger: "${command}"`);
                    return;
                }

                if (rule.action === 'create_draft_shift') {
                    const jobId = parts[1];
                    const startOdo = parts[2];
                    const job = jobs.find(j => j.id === jobId);
                    if (!job) { addNotification(`Job ID "${jobId}" not found.`); return; }
                    
                    const newDraft = {
                        id: `draft-${Date.now()}`,
                        workerId: worker.id,
                        participantId: job.participantId,
                        jobId: jobId,
                        startTime: new Date().toISOString(),
                        startOdo: startOdo
                    };
                    setAppData(prev => ({...prev, draftShifts: [...prev.draftShifts, newDraft]}));
                    addNotification(`Draft shift started for ${worker.fullName} and job ${jobId}.`);
                } else if (rule.action === 'claim_job') {
                    const jobId = parts[1];
                    const job = jobs.find(j => j.id === jobId);
                    if (!job) { addNotification(`Job ID "${jobId}" not found.`); return; }
                    if (job.status !== 'Pending') { addNotification(`Job ${jobId} is not available.`); return; }

                    setAppData(prev => ({ ...prev, jobs: prev.jobs.map(j => j.id === jobId ? { ...j, status: 'Assigned', assignedWorkerId: worker.id } : j) }));
                    addNotification(`Job ${jobId} claimed by ${worker.fullName}.`);
                }
                // Add logic for 'complete_draft_shift' here later
            };

            const AutomationNode = ({ title, icon, children, onDelete }) => (
                <div className="automation-node relative">
                    {onDelete && <button onClick={onDelete} className="absolute -top-2 -right-2 bg-red-500 text-white rounded-full h-6 w-6 flex items-center justify-center">&times;</button>}
                    <div className="p-3 border-b flex items-center space-x-3 bg-slate-50 rounded-t-lg">
                        {icon}
                        <h3 className="font-semibold text-slate-700">{title}</h3>
                    </div>
                    <div className="p-4">{children}</div>
                </div>
            );

            return (
                <div className="grid grid-cols-1 lg:grid-cols-3 gap-8">
                    <div className="lg:col-span-2">
                        <h1 className="text-3xl font-bold text-slate-900 mb-6">SMS Automation</h1>
                        <div className="space-y-8">
                            {smsAutomations.map(rule => (
                                <div key={rule.id} className="flex items-center space-x-4">
                                    <AutomationNode title="Trigger" icon={<span>📱</span>} onDelete={() => handleDeleteRule(rule.id)}>
                                        <p className="text-sm text-slate-500 mb-2">When an SMS is received containing:</p>
                                        <Input id={`trigger-${rule.id}`} value={rule.trigger} onChange={e => handleUpdateRule(rule.id, 'trigger', e.target.value)} />
                                    </AutomationNode>
                                    <div className="flex-1 border-t-2 border-slate-300 border-dashed"></div>
                                    <AutomationNode title="Action" icon={<span>⚡️</span>}>
                                        <p className="text-sm text-slate-500 mb-2">Then perform this action:</p>
                                        <select value={rule.action} onChange={e => handleUpdateRule(rule.id, 'action', e.target.value)} className="mt-1 block w-full rounded-md border-slate-300 shadow-sm">
                                            <option value="create_draft_shift">Create Draft Shift</option>
                                            <option value="complete_draft_shift">Complete Draft Shift</option>
                                            <option value="claim_job">Claim Job</option>
                                        </select>
                                    </AutomationNode>
                                </div>
                            ))}
                        </div>
                        <div className="mt-8">
                            <Button variant="secondary" onClick={handleAddRule}>+ Add New Rule</Button>
                        </div>
                    </div>
                    <div className="lg:col-span-1">
                        <div className="card">
                            <h2 className="text-xl font-bold text-slate-800 mb-4">SMS Simulator</h2>
                            <div className="space-y-4">
                                <Input label="From Phone Number" value={simSms.from} onChange={e => setSimSms({...simSms, from: e.target.value})} placeholder="e.g. 0412345678" />
                                <Input label="Message" value={simSms.message} onChange={e => setSimSms({...simSms, message: e.target.value})} placeholder="e.g. shift start, job-1, 12345" />
                                <Button onClick={handleSimulateSms} fullWidth>Simulate SMS</Button>
                            </div>
                        </div>
                    </div>
                </div>
            );
        };

        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        //  Main App Component & Router
        //-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=
        const App = () => {
            const { view, navigateTo, user, logout } = useAppContext();
            const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
            const [openDropdown, setOpenDropdown] = useState(null);

            const renderView = () => {
                if (user && !user.profileComplete && view !== 'workerOnboarding' && view !== 'participantOnboarding') {
                    return (
                        <div>
                            <div className="opacity-25 pointer-events-none"><AdminOverview /></div>
                            <ProfileCompletionModal />
                        </div>
                    );
                }
                
                switch (view) {
                    case 'workers': return <WorkersDashboard />;
                    case 'participants': return <ParticipantsDashboard />;
                    case 'jobs': return <JobBoard />;
                    case 'createJob': return <CreateJob />;
                    case 'invoicing': return <InvoicingHub />;
                    case 'participantInvoicing': return <ParticipantInvoicing />;
                    case 'settings': return <Settings />;
                    case 'myProfile': return <MyProfile />;
                    case 'userProfile': return <UserProfile />;
                    case 'logShift': return <LogShift />;
                    case 'createCustomInvoice': return <CreateCustomInvoice />;
                    case 'smsAutomation': return <SmsAutomation />;
                    case 'overview':
                    default:
                        if (!user) return <Spinner />;
                        if (user.role === 'admin') return <AdminOverview />;
                        if (user.role === 'worker') return <WorkerOverview />;
                        if (user.role === 'participant') return <JobBoard />;
                        return <div>Welcome</div>;
                }
            };

            const NavLink = ({ viewName, children }) => {
                const { view: currentView } = useAppContext();
                const isActive = currentView === viewName;
                const baseClasses = 'px-3 py-2 text-sm font-medium rounded-md';
                const activeClasses = 'bg-indigo-700 text-white';
                const inactiveClasses = 'text-indigo-100 hover:bg-indigo-500 hover:bg-opacity-75';
                return <a href="#" onClick={(e) => { e.preventDefault(); navigateTo(viewName); setMobileMenuOpen(false); }} className={`${baseClasses} ${isActive ? activeClasses : inactiveClasses}`}>{children}</a>;
            };
            
            const Dropdown = ({ title, children }) => {
                const isOpen = openDropdown === title;
                return (
                    <div className="relative">
                        <button onClick={() => setOpenDropdown(isOpen ? null : title)} className="px-3 py-2 text-sm font-medium rounded-md text-indigo-100 hover:bg-indigo-500 hover:bg-opacity-75 flex items-center">
                            {title}
                            <svg className={`ml-1 h-4 w-4 transition-transform ${isOpen ? 'rotate-180' : ''}`} xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor"><path fillRule="evenodd" d="M5.293 7.293a1 1 0 011.414 0L10 10.586l3.293-3.293a1 1 0 111.414 1.414l-4 4a1 1 0 01-1.414 0l-4-4a1 1 0 010-1.414z" clipRule="evenodd" /></svg>
                        </button>
                        {isOpen && (
                            <div className="absolute right-0 mt-2 w-48 origin-top-right rounded-md shadow-lg bg-white ring-1 ring-black ring-opacity-5 z-10">
                                <div className="py-1" role="menu" aria-orientation="vertical">
                                    {children}
                                </div>
                            </div>
                        )}
                    </div>
                )
            };

            const DropdownLink = ({ viewName, children }) => {
                 const { view: currentView, navigateTo } = useAppContext();
                 const isActive = currentView === viewName;
                 return <a href="#" onClick={(e) => { e.preventDefault(); navigateTo(viewName); setOpenDropdown(null); }} className={`block px-4 py-2 text-sm ${isActive ? 'bg-indigo-100 text-indigo-700' : 'text-slate-700'} hover:bg-slate-100`} role="menuitem">{children}</a>
            };

            const NavContent = ({isMobile = false}) => {
                const LinkComponent = isMobile ? MobileNavLink : NavLink;
                if (!user) return null;
                if (user.role === 'admin') {
                    return (
                        <div className="hidden md:flex items-baseline space-x-4 ml-10">
                            <LinkComponent viewName="overview">Dashboard</LinkComponent>
                             <Dropdown title="Operations">
                                <DropdownLink viewName="jobs">Jobs</DropdownLink>
                                <DropdownLink viewName="invoicing">Invoicing</DropdownLink>
                            </Dropdown>
                            <Dropdown title="People">
                                <DropdownLink viewName="workers">Workers</DropdownLink>
                                <DropdownLink viewName="participants">Participants</DropdownLink>
                            </Dropdown>
                            <Dropdown title="System">
                                <DropdownLink viewName="settings">Settings</DropdownLink>
                                <DropdownLink viewName="smsAutomation">SMS Automation</DropdownLink>
                            </Dropdown>
                        </div>
                    )
                }
                switch(user.role) {
                    case 'worker': return <div className={isMobile ? "space-y-1 px-2 pb-3 pt-2" : "hidden md:block"}><div className={isMobile ? "" : "ml-10 flex items-baseline space-x-4"}><LinkComponent viewName="overview">Dashboard</LinkComponent><LinkComponent viewName="jobs">Job Board</LinkComponent><LinkComponent viewName="logShift">Log Shift</LinkComponent><LinkComponent viewName="createCustomInvoice">Create Invoice</LinkComponent><LinkComponent viewName="myProfile">My Profile</LinkComponent></div></div>;
                    case 'participant': return <div className={isMobile ? "space-y-1 px-2 pb-3 pt-2" : "hidden md:block"}><div className={isMobile ? "" : "ml-10 flex items-baseline space-x-4"}><LinkComponent viewName="overview">My Jobs</LinkComponent><LinkComponent viewName="myProfile">My Profile</LinkComponent></div></div>;
                    default: return null;
                }
            }

            return (
                <div className="min-h-screen bg-slate-100">
                    <nav className="bg-indigo-600">
                        <div className="mx-auto max-w-7xl px-4 sm:px-6 lg:px-8">
                            <div className="flex h-16 items-center justify-between">
                                <div className="flex items-center">
                                    <div className="flex-shrink-0 text-white font-bold text-lg cursor-pointer" onClick={() => navigateTo('overview')}>NDIS App</div>
                                    <NavContent />
                                </div>
                                <div className="hidden md:block">
                                    <Button onClick={logout} variant="secondary">Logout</Button>
                                </div>
                                <div className="-mr-2 flex md:hidden">
                                    <button onClick={() => setMobileMenuOpen(!mobileMenuOpen)} type="button" className="inline-flex items-center justify-center rounded-md bg-indigo-600 p-2 text-indigo-200 hover:bg-indigo-500 hover:bg-opacity-75 hover:text-white focus:outline-none focus:ring-2 focus:ring-white focus:ring-offset-2 focus:ring-offset-indigo-600" aria-controls="mobile-menu" aria-expanded="false">
                                        <span className="sr-only">Open main menu</span>
                                        {mobileMenuOpen ? <svg className="block h-6 w-6" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M6 18L18 6M6 6l12 12" /></svg> : <svg className="block h-6 w-6" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor"><path strokeLinecap="round" strokeLinejoin="round" d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5" /></svg>}
                                    </button>
                                </div>
                            </div>
                        </div>

                        {mobileMenuOpen && (
                            <div className="md:hidden" id="mobile-menu">
                                <NavContent isMobile={true} />
                                <div className="border-t border-indigo-700 pb-3 pt-4"><div className="flex items-center px-5"><div className="flex-shrink-0"><p className="text-base font-medium text-white">{user?.fullName}</p><p className="text-sm font-medium text-indigo-300">{user?.email}</p></div></div><div className="mt-3 space-y-1 px-2"><a href="#" onClick={logout} className="block rounded-md px-3 py-2 text-base font-medium text-indigo-200 hover:bg-indigo-500 hover:bg-opacity-75">Logout</a></div></div>
                            </div>
                        )}
                    </nav>
                    <main><div className="mx-auto max-w-7xl py-6 sm:px-6 lg:px-8">{renderView()}</div></main>
                </div>
            );
        };

        const Root = () => {
            const { view, user } = useAppContext();
            
            if (!user) {
                switch(view) {
                    case 'signup': return <SignUpScreen />;
                    case 'workerSignUp': return <GenericSignUpForm role="worker" />;
                    case 'participantSignUp': return <GenericSignUpForm role="participant" />;
                    case 'login': default: return <LoginScreen />;
                }
            }
            
            if (!user.profileComplete) {
                switch(view) {
                    case 'workerOnboarding': return <WorkerOnboarding />;
                    case 'participantOnboarding': return <ParticipantOnboarding />;
                    default: return <App />; // This will show the completion modal
                }
            }
            
            return <App />;
        };

        const AppWrapper = () => <AppProvider><Root /></AppProvider>;
        const container = document.getElementById('root');
        const root = ReactDOM.createRoot(container);
        root.render(<AppWrapper />);

    </script>
</body>
</html>